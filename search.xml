<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Netty下缓解HTTP Header慢速攻击</title>
    <url>/posts/93c5eb6b/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前谈到了<a href="https://gsealy.net/posts/857074dc/">HTTP慢速攻击下webflux化解方式</a>仅仅是一个临时方案，在一些环境下扔会出现问题。本文就是为彻底解决该问题而产出的。</p>
]]></content>
      <tags>
        <tag>Netty</tag>
        <tag>慢速攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP慢速攻击下webflux化解方式</title>
    <url>/posts/857074dc/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>业务应用在做漏扫时发现一个中危漏洞需要处理。采用的是Spring Cloud Webflux，使用内嵌的 Netty 作为Web容器。因为是响应式编程，漏扫工具也没有提供对应的解决办法。</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/spring/scan-result.png" alt="漏扫结果"></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>缓慢的HTTP拒绝服务攻击是一种专门针对于Web的应用层拒绝服务攻击，攻击者操纵网络上的肉鸡，对目标Web服务器进行海量HTTP请求攻击，直到服务器带宽被打满，造成了拒绝服务。</p>
<p>慢速HTTP拒绝服务攻击经过不断的演变和发展，主要有三种攻击类型，分别是Slow headers、Slow body、Slow read。以Slow headers为例，Web应用在处理HTTP请求之前都要先接收完所有的HTTP头部，因为HTTP头部中包含了一些Web应用可能用到的重要的信息。攻击者利用这点，发起一个HTTP请求，一直不停的发送HTTP头部，消耗服务器的连接和内存资源。抓包数据可见，攻击客户端与服务器建立TCP连接后，每10秒才向服务器发送一个HTTP头部，而Web服务器在没接收到2个连续的\r\n时，会认为客户端没有发送完头部，而持续的等等客户端发送数据。如果恶意攻击者客户端持续建立这样的连接，那么服务器上可用的连接将一点一点被占满，从而导致拒绝服务。这种攻击类型称为慢速HTTP拒绝服务攻击。</p>
<h1 id="处理（影响业务）"><a href="#处理（影响业务）" class="headerlink" title="处理（影响业务）"></a>处理（影响业务）</h1><blockquote>
<p>2021年7月1日 更新</p>
<p>该处理不适用于SCG（Spring Cloud Gateway）网关类应用，在请求转发至后端后，可能后端处理会超时。导致前面的连接被断开无法做出响应。</p>
</blockquote>
<p>Netty可以配置TCP的读写超时，但是测试后无效。需要添加<code>ReadTimeoutHandler</code>控制HTTP的读的超时状态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ReactiveWebServerFactory <span class="title">reactiveWebServerFactory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      @Value(<span class="string">"$&#123;server.netty.idle-timeout&#125;"</span>)</span> Duration idleTimeout) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> NettyReactiveWebServerFactory factory = <span class="keyword">new</span> NettyReactiveWebServerFactory();</span><br><span class="line">    factory.addServerCustomizers(server -&gt;</span><br><span class="line">        server.tcpConfiguration(tcp -&gt;</span><br><span class="line">            tcp.bootstrap(bootstrap -&gt; bootstrap.childHandler(<span class="keyword">new</span> ChannelInitializer&lt;&gt;() &#123;</span><br><span class="line">              <span class="meta">@Override</span></span><br><span class="line">              <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(Channel channel)</span> </span>&#123;</span><br><span class="line">                  <span class="comment">// 仅处理slow read，不处理slow headers等问题</span></span><br><span class="line">                  channel.pipeline().addLast(<span class="keyword">new</span> ReadTimeoutHandler(<span class="number">9</span>));</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;))</span><br><span class="line">        ));</span><br><span class="line">    <span class="keyword">return</span> factory;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完整项目可以参见：<a href="https://github.com/Gsealy/slowloris-webflux-netty" target="_blank" rel="noopener">https://github.com/Gsealy/slowloris-webflux-netty</a></p>
<p>没有漏扫工具的可以试试：<a href="https://github.com/shekyan/slowhttptest" target="_blank" rel="noopener">https://github.com/shekyan/slowhttptest</a></p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ol>
<li><a href="https://stackoverflow.com/a/58195908/9137803" target="_blank" rel="noopener">How to configure netty connection-timeout for Spring WebFlux Answer 1</a></li>
</ol>
]]></content>
      <tags>
        <tag>Webflux</tag>
        <tag>Netty</tag>
      </tags>
  </entry>
  <entry>
    <title>K8s Operator之controller-runtime</title>
    <url>/posts/b61a3aa4/</url>
    <content><![CDATA[<h1 id="k8s-Operator"><a href="#k8s-Operator" class="headerlink" title="k8s Operator"></a>k8s Operator</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>官方介绍：<a href="https://kubernetes.io/zh/docs/concepts/extend-kubernetes/operator/" target="_blank" rel="noopener">kubernetes/operator</a></p>
<p>Kubernetes Operator是一种封装、部署和管理 Kubernetes 应用的方法。我们使用 Kubernetes API（应用编程接口）和 kubectl 工具在 Kubernetes 上部署并管理 Kubernetes 应用。也是一种特定于应用的控制器，可扩展 Kubernetes API 的功能，来代表 Kubernetes 用户创建、配置和管理复杂应用的实例。它基于基本 Kubernetes 资源和控制器概念构建，但又涵盖了特定于域或应用的知识，用于实现其所管理软件的整个生命周期的自动化。 </p>
<h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p>在 Kubernetes 中，控制平面的控制器实施<strong>控制循环</strong>，反复比较集群的理想状态和实际状态。如果集群的实际状态与理想状态不符，控制器将采取措施解决此问题。 </p>
<p>Operator 是使用自定义资源（Custom Resource, aka. CR）管理应用及其组件的自定义 Kubernetes 控制器。高级配置和设置由用户在 CR 中提供。Kubernetes Operator 基于嵌入在 Operator 逻辑中的最佳实践将高级指令转换为低级操作。</p>
<p>自定义资源是 Kubernetes 中的 API 扩展机制。自定义资源定义（CRD）会明确 CR 并列出 Operator 用户可用的所有配置。 Kubernetes Operator 监视 CR 类型并采取特定于应用的操作，确保当前状态与该资源的理想状态相符。通过自定义资源定义引入新的对象类型。Kubernetes API 可以像处理内置对象一样处理自定义资源定义，包括通过 kubectl 交互以及包含在基于角色的访问权限控制（RBAC）策略中。Operator 会持续监控正在运行的应用，可备份数据，从故障中恢复，以及随着时间的推移自动升级应用。 </p>
<p>Kubernetes Operator <strong>几乎可执行任何操作</strong>：扩展复杂的应用，应用版本升级，甚至使用专用硬件管理计算集群中节点的内核模块。</p>
<p>工作原理如下图所示：</p>
<p><img src="https://static001.infoq.cn/resource/image/85/2c/854b0a8eb938905e2e01195e55f5dd2c.png" alt="img"></p>
<p>注：via <a href="https://www.infoq.cn/article/3jrwfyszlu6jatbdrtov" target="_blank" rel="noopener">infoq Kubernetes Operator 基础入门</a></p>
<h1 id="控制器模型"><a href="#控制器模型" class="headerlink" title="控制器模型"></a>控制器模型</h1><p>控制器就是保证系统按期望状态运行。下图展示的是整体架构，自定义控制器包含Informer、workQueue、Control Loop。</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/k8s/k8s_custom_controller.png" alt="img"></p>
<p>声明式API对象与控制器模型相辅相成，声明式API对象定义出期望的资源状态，实际状态往往来自于 Kubernetes 集群本身，比如<strong>kubelet 通过心跳汇报的容器状态和节点状态</strong>，或者监控系统中保存的应用监控数据，或者控制器主动收集的它自己感兴趣的信息。控制器模型则通过控制循环（Control Loop）将Kubernetes内部的资源调整为声明式API对象期望的样子。因此可以认为声明式API对象和控制器模型，才是Kubernetes项目编排能力“赖以生存”的核心所在。</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/k8s/k8s_controller_definition.PNG" alt="img"></p>
<p>详细控制器介绍可以参考：<a href="https://qiankunli.github.io/2019/03/07/kubernetes_controller.html" target="_blank" rel="noopener">Kubernetes 控制器模型</a></p>
<h2 id="Reconcile-调协"><a href="#Reconcile-调协" class="headerlink" title="Reconcile 调协"></a>Reconcile 调协</h2><p>调协 - reconcile，用来调控控制器的操作。例如，添加自定义控制器，核心处理逻辑就是Reconcile函数中。</p>
<p>在Kubernetes中，Pod是调度的基本单元，也是所有内置Workload管理的基本单元，无论是Deployment还是StatefulSet，它们在对管理的应用进行更新时，都是以Pod为单位。<strong>所谓编排，最终落地就是 更新pod 的spec ,condition,container status 等数据</strong>（原地更新或重建符合这些配置的pod）。非基本单位的 Deployment/StatefulSet 的变更更多是数据的持久化。</p>
<h1 id="controller-runtime"><a href="#controller-runtime" class="headerlink" title="controller-runtime"></a>controller-runtime</h1><blockquote>
<p>项目地址：<a href="https://github.com/kubernetes-sigs/controller-runtime" target="_blank" rel="noopener">controller-runtime</a></p>
</blockquote>
<p>该包提供用于构建控制器的库。控制器实现Kubernetes API，是构建Operator、工作负载api、配置api、自动伸缩器等的基础。</p>
<h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><p>Controller实现了Kubernetes API来响应事件（对象创建/更新/删除），并确保对象Spec中指定的状态与系统状态匹配，这称之为<strong>调协（reconcile）</strong>。如果状态不匹配，Controller将根据需要创建/更新/删除对象以使它们匹配。</p>
<p>Controller通过实现工作队列来处理 reconcile.Requests （调协特定对象状态的请求）。<br>与HTTP处理流程不同，控制器<strong>不</strong>直接处理事件，而是将请求入队调协对象最终状态。这意味着针对多个事件可能是批处理的，并且每次做调协都需要了解当前系统状态。</p>
<ul>
<li>Controller需要一个Reconciler来从工作队列中取事件。</li>
<li>Controller需要配置一个监听入队reconcile.Requests事件的响应。</li>
</ul>
<h4 id="Reconciler-调协"><a href="#Reconciler-调协" class="headerlink" title="Reconciler 调协"></a>Reconciler 调协</h4><p>Reconciler是一个提供给Controller的函数，可以随时使用对象的Name和Namespace调用它。当被调用时，Reconciler将确保系统的状态与调用Reconciler时对象中指定的状态相匹配。<br>示例：为 ReplicaSet 对象调用的Reconciler。ReplicaSet指定了5个副本，但是系统中只有3个Pods。Reconciler创建了另外两个Pods，并将它们的OwnerReference设置为指向ReplicaSet，并使controller=true。</p>
<ul>
<li>Reconciler包含了Controller的所有业务逻辑。</li>
<li>Reconciler通常工作于单一对象类型。e.g，它只协调ReplicaSets。对于不同的类型，使用不同的Controller。如果您希望从其他对象触发调协，可以提供一个映射(e.g，所有者的引用)，将触发调协的对象映射到被调协的对象。</li>
<li>Reconciler提供了对象的Name / Namespace来进行调协。</li>
<li>Reconciler不关心触发调协的事件内容或事件类型。e.g，无论ReplicaSet是创建还是更新，Reconciler总是会将系统中的Pods数量与对象在被调用时指定的数量进行比较。</li>
</ul>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>[1] 什么是 Kubernetes Operator，<a href="https://www.redhat.com/zh/topics/containers/what-is-a-kubernetes-operator" target="_blank" rel="noopener">https://www.redhat.com/zh/topics/containers/what-is-a-kubernetes-operator</a></p>
<p>[2] Kubernetes Operator 基础入门，<a href="https://time.geekbang.org/column/article/40583" target="_blank" rel="noopener">https://time.geekbang.org/column/article/40583</a></p>
<p>[3] 编排其实很简单：谈谈“控制器”模型，<a href="https://time.geekbang.org/column/article/40583" target="_blank" rel="noopener">https://time.geekbang.org/column/article/40583</a></p>
<p>[4] Kubernetes 控制器模型 ，<a href="https://qiankunli.github.io/2019/03/07/kubernetes_controller.html" target="_blank" rel="noopener">https://qiankunli.github.io/2019/03/07/kubernetes_controller.html</a></p>
]]></content>
      <tags>
        <tag>K8s</tag>
        <tag>golang</tag>
        <tag>operator</tag>
      </tags>
  </entry>
  <entry>
    <title>自建Quay.io代理及Containerd&amp;Docker代理配置</title>
    <url>/posts/a0ac0cdf/</url>
    <content><![CDATA[<blockquote>
<p>首先的首先，需要一个代理，要不后面的看了也没用</p>
</blockquote>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>安装OLM（Operator Lifecycle Manager） 时，无法下载quay.io的镜像，就算是提前下载到本地也不行。像<code>CatalogSource</code>类型，spec中没有<code>imagePullPolicy</code>属性，无法修改。</p>
<p>安装参考：<a href="https://github.com/operator-framework/operator-lifecycle-manager/blob/master/doc/install/install.md" target="_blank" rel="noopener">https://github.com/operator-framework/operator-lifecycle-manager/blob/master/doc/install/install.md</a></p>
<h1 id="Docker镜像下载加速"><a href="#Docker镜像下载加速" class="headerlink" title="Docker镜像下载加速"></a>Docker镜像下载加速</h1><p>此时（2021年3月1日），服务器配了镜像代理地址也无法拉取镜像，输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get &quot;https:&#x2F;&#x2F;registry-1.docker.io&#x2F;v2&#x2F;&quot;: net&#x2F;http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</span><br></pre></td></tr></table></figure>

<p>第一个想到就是被墙了，但是系统全局配了<code>http_proxy</code>和<code>https_proxy</code>，<strong>无效</strong></p>
<p>参考官方文档<a href="https://docs.docker.com/config/daemon/systemd/#httphttps-proxy" target="_blank" rel="noopener">Docker systemd/#httphttps-proxy配置</a>，给Dokcer daemon配置代理即可。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol>
<li>创建<code>docker.service.d</code>目录</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;docker.service.d</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>然后在该目录下创建<code>http-proxy.conf</code>文件，在其中填入全局变量即可</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">Environment&#x3D;&quot;HTTP_PROXY&#x3D;http:&#x2F;&#x2F;proxy.example.com:80&#x2F;&quot;</span><br><span class="line">Environment&#x3D;&quot;HTTPS_PROXY&#x3D;http:&#x2F;&#x2F;proxy.example.com:80&#x2F;&quot;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>[可选]添加不走代理的地址</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Environment&#x3D;&quot;HTTP_PROXY&#x3D;http:&#x2F;&#x2F;proxy.example.com:80&#x2F;&quot;</span><br><span class="line">Environment&#x3D;&quot;NO_PROXY&#x3D;localhost,127.0.0.0&#x2F;8,docker-registry.somecorporation.com&quot;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>reload daemon</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>[可选] 检查配置是否加载</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl show --property Environment docker</span><br><span class="line">Environment&#x3D;HTTP_PROXY&#x3D;http:&#x2F;&#x2F;proxy.example.com:80&#x2F;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>重启Docker:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<h1 id="Containerd镜像下载加速"><a href="#Containerd镜像下载加速" class="headerlink" title="Containerd镜像下载加速"></a>Containerd镜像下载加速</h1><blockquote>
<p>以1.4.1版本为例</p>
</blockquote>
<h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p>修改默认配置文件 <code>/etc/contaienrd/config.toml</code>，按如下配置即可，可修改为自己所需的地址</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="section">[plugins]</span></span><br><span class="line">  <span class="section">[plugins.cri]</span></span><br><span class="line">    <span class="section">[plugins.cri.registry]</span></span><br><span class="line">      <span class="section">[plugins.cri.registry.mirrors]</span></span><br><span class="line">        <span class="section">[plugins.cri.registry.mirrors."docker.io"]</span></span><br><span class="line">          endpoint = [</span><br><span class="line">            "https://docker.mirrors.ustc.edu.cn",</span><br><span class="line">            "http://hub-mirror.c.163.com"</span><br><span class="line">          ]</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h1 id="Quay-io-内网代理"><a href="#Quay-io-内网代理" class="headerlink" title="Quay.io 内网代理"></a>Quay.io 内网代理</h1><p>quay的镜像现在已经下不下来了，只能走代理下载，现有国内的几个代理地址（中科大，七牛等）好像都不太行，只能自己内网建一个quay的代理了。</p>
<h2 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h2><p>Docker的registry镜像支持代理模式，先启动一个redis</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建网卡</span><br><span class="line">&gt; docker network create docker-registry</span><br><span class="line"># 启动redis</span><br><span class="line">&gt; docker run -d --name&#x3D;redis --net&#x3D;docker-registry --restart&#x3D;always redis redis-server --maxmemory 512m</span><br></pre></td></tr></table></figure>

<p>创建registry的镜像存储路径，创建配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">&gt;</span> <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">/opt/docker/dockerhub/data</span></span><br><span class="line"><span class="string">&gt;</span> <span class="string">cat</span> <span class="string">&gt;</span> <span class="string">/opt/docker/dockerhub/data/config.yml</span> <span class="string">&lt;&lt;EOF</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">0.1</span></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="string">error</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">    <span class="attr">delete:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">cache:</span></span><br><span class="line">        <span class="attr">blobdescriptor:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">filesystem:</span></span><br><span class="line">        <span class="attr">rootdirectory:</span> <span class="string">/var/lib/registry</span></span><br><span class="line">    <span class="attr">maintenance:</span></span><br><span class="line">        <span class="attr">uploadpurging:</span></span><br><span class="line">            <span class="attr">enabled:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">    <span class="attr">addr:</span> <span class="string">:5000</span></span><br><span class="line">    <span class="attr">debug:</span></span><br><span class="line">        <span class="attr">addr:</span> <span class="string">localhost:5001</span></span><br><span class="line">    <span class="attr">headers:</span></span><br><span class="line">        <span class="attr">X-Content-Type-Options:</span> <span class="string">[nosniff]</span></span><br><span class="line"><span class="attr">notifications:</span></span><br><span class="line">    <span class="attr">endpoints:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">local-5003</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">http://localhost:5003/callback</span></span><br><span class="line">          <span class="attr">headers:</span></span><br><span class="line">              <span class="attr">Authorization:</span> <span class="string">[Bearer</span> <span class="number">123456789</span><span class="string">]</span></span><br><span class="line">          <span class="attr">timeout:</span> <span class="string">1s</span></span><br><span class="line">          <span class="attr">threshold:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">backoff:</span> <span class="string">1s</span></span><br><span class="line">          <span class="attr">disabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">local-8083</span></span><br><span class="line">          <span class="attr">url:</span> <span class="string">http://localhost:8083/callback</span></span><br><span class="line">          <span class="attr">timeout:</span> <span class="string">1s</span></span><br><span class="line">          <span class="attr">threshold:</span> <span class="number">10</span></span><br><span class="line">          <span class="attr">backoff:</span> <span class="string">1s</span></span><br><span class="line">          <span class="attr">disabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">health:</span></span><br><span class="line">    <span class="attr">storagedriver:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">interval:</span> <span class="string">10s</span></span><br><span class="line">        <span class="attr">threshold:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换为需要代理的地址，还可以配置用户名密码</span></span><br><span class="line"><span class="attr">proxy:</span></span><br><span class="line">    <span class="attr">remoteurl:</span> <span class="string">https://quay.io</span></span><br><span class="line"></span><br><span class="line"><span class="attr">redis:</span></span><br><span class="line">    <span class="attr">addr:</span> <span class="string">redis:6379</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<p>启动 docker registry，<strong>一定要配置代理的全局变量</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; docker run -d \</span><br><span class="line">--name dockerhub-mirror --restart always \</span><br><span class="line">--network docker-registry \</span><br><span class="line">-v &#x2F;opt&#x2F;docker&#x2F;dockerhub&#x2F;data:&#x2F;var&#x2F;lib&#x2F;registry \</span><br><span class="line">-v &#x2F;opt&#x2F;docker&#x2F;dockerhub&#x2F;config.yml:&#x2F;etc&#x2F;docker&#x2F;registry&#x2F;config.yml:ro \</span><br><span class="line">-p 5000:5000&#x2F;tcp --log-driver journald --log-opt tag&#x3D;&quot;dockerd-dockerhub&quot; \</span><br><span class="line">-e http_proxy&#x3D;&quot;http:&#x2F;&#x2F;proxy.example.com:80&#x2F;&quot; \</span><br><span class="line">-e https_proxy&#x3D;&quot;http:&#x2F;&#x2F;proxy.example.com:80&#x2F;&quot; \</span><br><span class="line">registry:2.7.1</span><br></pre></td></tr></table></figure>

<p>然后我们在Docker的daemon.json和Containerd的config.toml中配置该registry地址即可。</p>
<h2 id="运行时配置"><a href="#运行时配置" class="headerlink" title="运行时配置"></a>运行时配置</h2><p>下面以内网地址<code>10.20.89.33</code>为例</p>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>/etc/docker/daemon.json</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&quot;insecure-registries&quot;: [&quot;10.20.89.33:5000&quot;]</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<h3 id="Containerd"><a href="#Containerd" class="headerlink" title="Containerd"></a>Containerd</h3><p>/etc/contaienrd/config.toml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">[plugins]</span><br><span class="line">  [plugins.cri]</span><br><span class="line">    [plugins.cri.registry]</span><br><span class="line">      [plugins.cri.registry.mirrors]</span><br><span class="line">        ... 其他代理配置</span><br><span class="line">        [plugins.cri.registry.mirrors.&quot;quay.io&quot;]</span><br><span class="line">          endpoint &#x3D; [</span><br><span class="line">            &quot;http:&#x2F;&#x2F;10.20.89.33:5000&quot;</span><br><span class="line">          ]</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] <a href="https://docs.docker.com/config/daemon/systemd/#httphttps-proxy" target="_blank" rel="noopener">Docker systemd/#httphttps-proxy配置</a></p>
<p>[2] <a href="http://mirrors.ustc.edu.cn/help/dockerhub.html" target="_blank" rel="noopener">ustc Docker Hub 源使用帮助</a></p>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Containerd</tag>
      </tags>
  </entry>
  <entry>
    <title>“魔铲”挖矿木马清理</title>
    <url>/posts/c11d6eb2/</url>
    <content><![CDATA[<blockquote>
<p>非专业人事第一次处理挖矿木马，脱壳啥的也不会，一点一点找到并删除相关文件，最后整理为清理脚本</p>
</blockquote>
<h1 id="事由"><a href="#事由" class="headerlink" title="事由"></a>事由</h1><p>发现我的esxi内的Gitlab虚机连不上了，登录显示<code>ERROR:ld.so：object &#39;/usr/local/lib/libprocessshider.so&#39; from /etc/ld.so.preload cannot be preloaded: ignored.</code>，机子卡的基本属于断连状态。</p>
<p>console和SSH登录显示异常：</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/CoinMiner/login.png" alt=""></p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/CoinMiner/warn.png" alt=""></p>
<p>后发现相同网段其他设备也有这个问题，但是可以正常登录，就先上另一台设备处理（代号：<code>33</code>）</p>
<h1 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h1><p>表征问题</p>
<ol>
<li>CPU 占用 100%</li>
<li>空闲内存低</li>
<li>输命令经常会出<code>ERROR:ld.so：...ignored.</code></li>
<li>会有异常定时任务</li>
</ol>
<p>会有一个update.sh或者root.sh的文件，进程会看到curl请求并运行一个脚本，相关进程已经隐藏，不在进程列表显示</p>
<p>系统资源占用，但是没有相关进程显示：</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/CoinMiner/top.png" alt=""></p>
<p>检查主要看几个常见的地儿，有没有最近同一时间创建或者修改的内容，像<code>/sbin/</code>，<code>/bin/</code>，<code>/etc/init.d</code>，<code>/etc/corn*/</code>，可疑用户等</p>
<p>有关木马的分析可以看：<a href="https://www.4hou.com/posts/jLRW" target="_blank" rel="noopener">精准投放Tsunami僵尸网络和“魔铲”挖矿木马的行动分析</a></p>
<h2 id="清理"><a href="#清理" class="headerlink" title="清理"></a>清理</h2><p>参考其他人清理挖矿木马的过程</p>
<ol>
<li><p>先清空<code>/etc/ld.so.preload</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">""</span> &gt; /etc/ld.so.preload</span><br><span class="line">rm -rf /usr/<span class="built_in">local</span>/lib/libprocesshider.so</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除可疑服务<code>pwnrigl.service</code>和<code>ntpdate.service</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chattr -ia /usr/lib/systemd/system/pwnrigl.service /usr/lib/systemd/system/ntpdate.service &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">systemctl stop pwnrigl.service ntpdate.service &amp;&amp; systemctl <span class="built_in">disable</span> pwnrigl.service ntpdate.service</span><br><span class="line">rm -rf /usr/lib/systemd/system/pwnrigl.service /usr/lib/systemd/system/ntpdate.service</span><br></pre></td></tr></table></figure>
</li>
<li><p>清空定时任务，删除建的用户<code>x</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -r &amp;&amp; crontab -u x -r &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">chattr -ia /etc/cron*/ntpdate /etc/cron*/pwnrig &gt; /dev/null 2&gt;&amp;1 &amp;&amp; rm -rf /etc/cron*/ntpdate /etc/cron*/pwnrig</span><br><span class="line">userdel -r x &gt; /dev/null 2&gt;&amp;1 &amp;&amp; rm -rf /home/x</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除所有释放的程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf /var/tmp /tmp/*</span><br><span class="line">pkill -f <span class="string">'\-bash'</span></span><br><span class="line">chattr -ia /bin/sysdr /bin/initdr /bin/crondr /bin/bprofr /bin/-bash &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">rm -rf /bin/sysdr /bin/initdr /bin/crondr /bin/bprofr /bin/-bash</span><br><span class="line">chattr -ia /sbin/lntpdate /sbin/entpdate /sbin/bsysd /sbin/binitd /sbin/bcrond /sbin/msysd /sbin/minitd /sbin/mcrond /sbin/-bash &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">rm -rf /sbin/lntpdate /sbin/entpdate /sbin/bsysd /sbin/binitd /sbin/bcrond /sbin/msysd /sbin/minitd /sbin/mcrond /sbin/-bash</span><br><span class="line">chattr -ia /etc/init.d/ntpdate  /etc/init.d/pwnrig &gt; /dev/null 2&gt;&amp;1 &amp;&amp; rm -rf /etc/init.d/ntpdate  /etc/init.d/pwnrig</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除.bash_profile中的异常命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chattr -ia /<span class="variable">$USER</span>/.bash_profile &gt; /dev/null 2&gt;&amp;1 &amp;&amp; sed -i <span class="string">'/bprofr/d'</span> /<span class="variable">$USER</span>/.bash_profile</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="清理脚本"><a href="#清理脚本" class="headerlink" title="清理脚本"></a>清理脚本</h2><p>Gist 地址：<a href="https://gist.github.com/Gsealy/2c8ad20f49009c649f662b14e6825d51" target="_blank" rel="noopener">clean.sh</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/env bash</span></span><br><span class="line"><span class="comment"># clean pwnrig coin miner</span></span><br><span class="line"><span class="comment"># Gsealy</span></span><br><span class="line"><span class="comment"># 2021-2-3 21:19:17</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> +e</span><br><span class="line"></span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line"></span><br><span class="line">USER=`whoami`</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">delete_it</span></span>() &#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">""</span> &gt; /etc/ld.so.preload</span><br><span class="line">rm -rf /usr/<span class="built_in">local</span>/lib/libprocesshider.so</span><br><span class="line"></span><br><span class="line">chattr -ia /usr/lib/systemd/system/pwnrigl.service /usr/lib/systemd/system/ntpdate.service &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">systemctl stop pwnrigl.service ntpdate.service &amp;&amp; systemctl <span class="built_in">disable</span> pwnrigl.service ntpdate.service</span><br><span class="line">rm -rf /usr/lib/systemd/system/pwnrigl.service /usr/lib/systemd/system/ntpdate.service</span><br><span class="line"></span><br><span class="line">rm -rf /var/tmp /tmp/*</span><br><span class="line">pkill -f <span class="string">'\-bash'</span></span><br><span class="line">chattr -ia /bin/sysdr /bin/initdr /bin/crondr /bin/bprofr /bin/-bash &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">rm -rf /bin/sysdr /bin/initdr /bin/crondr /bin/bprofr /bin/-bash</span><br><span class="line">chattr -ia /sbin/lntpdate /sbin/entpdate /sbin/bsysd /sbin/binitd /sbin/bcrond /sbin/msysd /sbin/minitd /sbin/mcrond /sbin/-bash &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">rm -rf /sbin/lntpdate /sbin/entpdate /sbin/bsysd /sbin/binitd /sbin/bcrond /sbin/msysd /sbin/minitd /sbin/mcrond /sbin/-bash</span><br><span class="line">chattr -ia /etc/init.d/ntpdate  /etc/init.d/pwnrig &gt; /dev/null 2&gt;&amp;1 &amp;&amp; rm -rf /etc/init.d/ntpdate  /etc/init.d/pwnrig</span><br><span class="line">chattr -ia /etc/cron*/ntpdate /etc/cron*/pwnrig &gt; /dev/null 2&gt;&amp;1 &amp;&amp; rm -rf /etc/cron*/ntpdate /etc/cron*/pwnrig</span><br><span class="line"></span><br><span class="line">pkill -f <span class="string">'\-bash'</span> &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">crontab -r &amp;&amp; crontab -u x -r &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">userdel -r x &gt; /dev/null 2&gt;&amp;1 &amp;&amp; rm -rf /home/x</span><br><span class="line"></span><br><span class="line">chattr -ia /<span class="variable">$USER</span>/.bash_profile &gt; /dev/null 2&gt;&amp;1 &amp;&amp; sed -i <span class="string">'/bprofr/d'</span> /<span class="variable">$USER</span>/.bash_profile</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"ATTENTION: will clean current user's cron task, y[Y] for continue；others exit "</span> _continue</span><br><span class="line"><span class="keyword">if</span> [[ (<span class="string">"<span class="variable">$_continue</span>"</span> == [yY]) ]]; <span class="keyword">then</span></span><br><span class="line">    delete_it</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"clean finish, please change login password ASAP"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://www.4hou.com/posts/jLRW" target="_blank" rel="noopener">精准投放Tsunami僵尸网络和“魔铲”挖矿木马的行动分析</a></li>
<li><a href="https://www.jokercat.top/index.php/2020/11/12/opex%EF%BC%9Alibprocesshider-%E7%BF%BB%E8%BD%A6%E5%8F%8A%E4%BF%AE%E5%A4%8D/" target="_blank" rel="noopener">Opex：libprocesshider-翻车及修复</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Linux处理TIME_WAIT和FIN_WAIT_2状态</title>
    <url>/posts/4c6f1fcd/</url>
    <content><![CDATA[<blockquote>
<ol>
<li>以3.10版本内核为例，4.1+版本内核在处理FIN-WAIT-2时有所改变，后面会提到</li>
<li>代码做适度精简</li>
</ol>
</blockquote>
<h1 id="TL；DR"><a href="#TL；DR" class="headerlink" title="TL；DR"></a>TL；DR</h1><ul>
<li>Linux TCP的TIME_WAIT状态超时默认为60秒，不可修改</li>
<li>Linux TCP的FIN_WAIT_2和TIME_WAIT共用一套实现</li>
<li>可以通过tcp_fin_timeout修改FIN_WAIT_2的超时</li>
<li>3.10内核和4.1+内核对tcp_fin_timeout实现机制有所变化</li>
<li>reuse和recycle都需要开启timestamp，对NAT不友好</li>
<li>推荐使用4.3+内核，参数配置可以看最后</li>
</ul>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/linux/tcp-state.png" alt=""></p>
<p>图1. TCP 状态机</p>
<h1 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h1><p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/linux/fin.png" alt=""></p>
<h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p>初步认为<code>tcp_input.c#tcp_fin</code>为此次的入口，主动断开连接方收到被关闭方发出的<code>FIN</code>指令后，进入time-wait状态做进一步处理。</p>
<p>link：<a href="https://lxr.missinglinkelectronics.com/linux+v3.10/net/ipv4/tcp_input.c#L5812" target="_blank" rel="noopener">linux/net/ipv4/tcp_input.c</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  /net/ipv4/tcp_input.c</span></span><br><span class="line"><span class="comment"> *  ...</span></span><br><span class="line"><span class="comment"> *	If we are in FINWAIT-2, a received FIN moves us to TIME-WAIT.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tcp_fin</span><span class="params">(struct sock *sk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">tcp_sock</span> *<span class="title">tp</span> = <span class="title">tcp_sk</span>(<span class="title">sk</span>);</span></span><br><span class="line"></span><br><span class="line">	inet_csk_schedule_ack(sk);</span><br><span class="line"></span><br><span class="line">	sk-&gt;sk_shutdown |= RCV_SHUTDOWN;</span><br><span class="line">	sock_set_flag(sk, SOCK_DONE);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">switch</span> (sk-&gt;sk_state) &#123;</span><br><span class="line">	<span class="keyword">case</span> TCP_SYN_RECV:</span><br><span class="line">	<span class="keyword">case</span> TCP_ESTABLISHED:</span><br><span class="line">		...</span><br><span class="line">	<span class="keyword">case</span> TCP_CLOSE_WAIT:</span><br><span class="line">	<span class="keyword">case</span> TCP_CLOSING:</span><br><span class="line">		...</span><br><span class="line">	<span class="keyword">case</span> TCP_LAST_ACK:</span><br><span class="line">		...</span><br><span class="line">	<span class="keyword">case</span> TCP_FIN_WAIT1:</span><br><span class="line">		...</span><br><span class="line">	<span class="keyword">case</span> TCP_FIN_WAIT2:</span><br><span class="line">		<span class="comment">/* 接收被关闭连接方的FIN -- 发送 ACK，转到TIME_WAIT状态 */</span></span><br><span class="line">		tcp_send_ack(sk);</span><br><span class="line">		tcp_time_wait(sk, TCP_TIME_WAIT, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="comment">/* Only TCP_LISTEN and TCP_CLOSE are left, in these</span></span><br><span class="line"><span class="comment">		 * cases we should never reach this piece of code.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		pr_err(<span class="string">"%s: Impossible, sk-&gt;sk_state=%d\n"</span>,</span><br><span class="line">		       __func__, sk-&gt;sk_state);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="处理time-wait"><a href="#处理time-wait" class="headerlink" title="处理time-wait"></a>处理time-wait</h3><p>在<code>tcp_minisocks.c</code>中，会处理状态回收，控制time-wait桶大小等，先在这里给出结论：</p>
<p>a)<code>net.ipv4.tcp_tw_recycle</code>需要和<code>net.ipv4.tcp_timestamps</code>同时打开才可以快速回收<br>b) 连接状态为TIME_WAIT时，清理时间为默认60s，不可修改</p>
<p>link：<a href="https://lxr.missinglinkelectronics.com/linux+v3.10/net/ipv4/tcp_minisocks.c#L276" target="_blank" rel="noopener">linux/net/ipv4/tcp_minisocks.c</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tcp_death_row 结构</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在tcp_death_row中存在两种回收机制，一种是timeout较长的sock口,放入tw_timer定时器的队列中，</span></span><br><span class="line"><span class="comment">一种timeout较短的套接口，放入twcal_timer定时器的队列中；</span></span><br><span class="line"><span class="comment">tw_timer定时器超时精度为 TCP_TIMEWAIT_LEN / INET_TWDR_TWKILL_SLOTS=7.5s</span></span><br><span class="line"><span class="comment">而 twcal_timer 的定时单位并不是固定的值，而是根据常量 HZ 定义的, 在3.10内核中为250HZ，</span></span><br><span class="line"><span class="comment">超时精度为：1&lt;&lt;INET_TWDR_RECYCLE_TICK个tick,</span></span><br><span class="line"><span class="comment">即 $((1&lt;&lt;5))=32个tick, 也就是相当于约 32/250≈1/8s的精度</span></span><br><span class="line"><span class="comment">具体处理在inet_twsk_schedule()方法中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_timewait_death_row</span> <span class="title">tcp_death_row</span> = &#123;</span></span><br><span class="line">	.sysctl_max_tw_buckets = NR_FILE * <span class="number">2</span>,</span><br><span class="line">	.period		= TCP_TIMEWAIT_LEN / INET_TWDR_TWKILL_SLOTS,</span><br><span class="line">	.death_lock	= __SPIN_LOCK_UNLOCKED(tcp_death_row.death_lock),</span><br><span class="line">	.hashinfo	= &amp;tcp_hashinfo,</span><br><span class="line">	.tw_timer	= TIMER_INITIALIZER(inet_twdr_hangman, <span class="number">0</span>,</span><br><span class="line">					    (<span class="keyword">unsigned</span> <span class="keyword">long</span>)&amp;tcp_death_row),</span><br><span class="line">	.twkill_work	= __WORK_INITIALIZER(tcp_death_row.twkill_work,</span><br><span class="line">					     inet_twdr_twkill_work),</span><br><span class="line"><span class="comment">/* Short-time timewait calendar */</span></span><br><span class="line"></span><br><span class="line">	.twcal_hand	= <span class="number">-1</span>,</span><br><span class="line">	.twcal_timer	= TIMER_INITIALIZER(inet_twdr_twcal_tick, <span class="number">0</span>,</span><br><span class="line">					    (<span class="keyword">unsigned</span> <span class="keyword">long</span>)&amp;tcp_death_row),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * /net/ipv4/tcp_minisocks.c</span></span><br><span class="line"><span class="comment"> * 将socket状态转为time-wait或者fin-wait-2状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tcp_time_wait</span><span class="params">(struct sock *sk, <span class="keyword">int</span> state, <span class="keyword">int</span> timeo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">inet_timewait_sock</span> *<span class="title">tw</span> = <span class="title">NULL</span>;</span></span><br><span class="line">	<span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">inet_connection_sock</span> *<span class="title">icsk</span> = <span class="title">inet_csk</span>(<span class="title">sk</span>);</span></span><br><span class="line">	<span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcp_sock</span> *<span class="title">tp</span> = <span class="title">tcp_sk</span>(<span class="title">sk</span>);</span></span><br><span class="line">	<span class="keyword">bool</span> recycle_ok = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 是否开启了recycle，且存在时间戳扩展，标记recycle_ok为true，为后面回收做准备</span></span><br><span class="line">	<span class="keyword">if</span> (tcp_death_row.sysctl_tw_recycle &amp;&amp; tp-&gt;rx_opt.ts_recent_stamp)</span><br><span class="line">		recycle_ok = tcp_remember_stamp(sk);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果当前等待回收time-wait的数量小于配置的桶大小，把当前sock扔到处理队列里面</span></span><br><span class="line">	<span class="keyword">if</span> (tcp_death_row.tw_count &lt; tcp_death_row.sysctl_max_tw_buckets) <span class="comment">// 2</span></span><br><span class="line">		tw = inet_twsk_alloc(sk, state);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (tw != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">tcp_timewait_sock</span> *<span class="title">tcptw</span> = <span class="title">tcp_twsk</span>((<span class="title">struct</span> <span class="title">sock</span> *)<span class="title">tw</span>);</span></span><br><span class="line">		<span class="keyword">const</span> <span class="keyword">int</span> rto = (icsk-&gt;icsk_rto &lt;&lt; <span class="number">2</span>) - (icsk-&gt;icsk_rto &gt;&gt; <span class="number">1</span>); <span class="comment">// 3.5*RTO</span></span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">inet_sock</span> *<span class="title">inet</span> = <span class="title">inet_sk</span>(<span class="title">sk</span>);</span></span><br><span class="line"></span><br><span class="line">		tw-&gt;tw_transparent	= inet-&gt;transparent;</span><br><span class="line">		tw-&gt;tw_mark		= sk-&gt;sk_mark;</span><br><span class="line">		tw-&gt;tw_rcv_wscale	= tp-&gt;rx_opt.rcv_wscale;</span><br><span class="line">		tcptw-&gt;tw_rcv_nxt	= tp-&gt;rcv_nxt;</span><br><span class="line">		tcptw-&gt;tw_snd_nxt	= tp-&gt;snd_nxt;</span><br><span class="line">		tcptw-&gt;tw_rcv_wnd	= tcp_receive_window(tp);</span><br><span class="line">		tcptw-&gt;tw_ts_recent	= tp-&gt;rx_opt.ts_recent;</span><br><span class="line">		tcptw-&gt;tw_ts_recent_stamp = tp-&gt;rx_opt.ts_recent_stamp;</span><br><span class="line">		tcptw-&gt;tw_ts_offset	= tp-&gt;tsoffset;</span><br><span class="line">		tcptw-&gt;tw_last_oow_ack_time = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">... ifdef endif...</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Get the TIME_WAIT timeout firing. */</span></span><br><span class="line">    <span class="comment">// 从tcp_fin方法过来的入参timeo为0，会被重新赋值为3.5rto</span></span><br><span class="line">		<span class="keyword">if</span> (timeo &lt; rto)</span><br><span class="line">			timeo = rto;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果需要回收话，设置超时时间为当前rto；否则超时时间设为60s，当状态是time-wait时，</span></span><br><span class="line">    <span class="comment">// timeo也设置为60s，这是后面处理状态的时间</span></span><br><span class="line">    <span class="comment">// btw，rto的值，一般都会小于配置的值，除非双方出现网络抖动和硬件异常需要多次超时重传</span></span><br><span class="line">		<span class="keyword">if</span> (recycle_ok) &#123;</span><br><span class="line">			tw-&gt;tw_timeout = rto;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			tw-&gt;tw_timeout = TCP_TIMEWAIT_LEN;</span><br><span class="line">			<span class="keyword">if</span> (state == TCP_TIME_WAIT)</span><br><span class="line">				timeo = TCP_TIMEWAIT_LEN;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">/* Linkage updates. */</span></span><br><span class="line">		__inet_twsk_hashdance(tw, sk, &amp;tcp_hashinfo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 两种timer</span></span><br><span class="line">    <span class="comment">// 1. TCP_TIMEWAIT_LEN定义的60s的timer</span></span><br><span class="line">    <span class="comment">// 2. TIMEOUT为3.5*RTO的timer</span></span><br><span class="line">		inet_twsk_schedule(tw, &amp;tcp_death_row, timeo,</span><br><span class="line">				   TCP_TIMEWAIT_LEN);</span><br><span class="line">		inet_twsk_put(tw);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">/* Sorry, if we're out of memory, just CLOSE this</span></span><br><span class="line"><span class="comment">		 * socket up.  We've got bigger problems than</span></span><br><span class="line"><span class="comment">		 * non-graceful socket closings.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_TCPTIMEWAITOVERFLOW);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	tcp_update_metrics(sk);</span><br><span class="line">	tcp_done(sk);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="time-wait轮询处理"><a href="#time-wait轮询处理" class="headerlink" title="time-wait轮询处理"></a>time-wait轮询处理</h3><p>根据timeo值大小计算slot，判断后，进入不同的timer，等待清理</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* /net/ipv4/inet_timewait_sock.c</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inet_twsk_schedule</span><span class="params">(struct inet_timewait_sock *tw,</span></span></span><br><span class="line"><span class="function"><span class="params">		       struct inet_timewait_death_row *twdr,</span></span></span><br><span class="line"><span class="function"><span class="params">		       <span class="keyword">const</span> <span class="keyword">int</span> timeo, <span class="keyword">const</span> <span class="keyword">int</span> timewait_len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hlist_head</span> *<span class="title">list</span>;</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> slot;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* timeout := RTO * 3.5</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * 3.5 = 1+2+0.5 to wait for two retransmits.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * RATIONALE: if FIN arrived and we entered TIME-WAIT state,</span></span><br><span class="line"><span class="comment">	 * our ACK acking that FIN can be lost. If N subsequent retransmitted</span></span><br><span class="line"><span class="comment">	 * FINs (or previous seqments) are lost (probability of such event</span></span><br><span class="line"><span class="comment">	 * is p^(N+1), where p is probability to lose single packet and</span></span><br><span class="line"><span class="comment">	 * time to detect the loss is about RTO*(2^N - 1) with exponential</span></span><br><span class="line"><span class="comment">	 * backoff). Normal timewait length is calculated so, that we</span></span><br><span class="line"><span class="comment">	 * waited at least for one retransmitted FIN (maximal RTO is 120sec).</span></span><br><span class="line"><span class="comment">	 * [ BTW Linux. following BSD, violates this requirement waiting</span></span><br><span class="line"><span class="comment">	 *   only for 60sec, we should wait at least for 240 secs.</span></span><br><span class="line"><span class="comment">	 *   Well, 240 consumes too much of resources 8)</span></span><br><span class="line"><span class="comment">	 * ]</span></span><br><span class="line"><span class="comment">	 * This interval is not reduced to catch old duplicate and</span></span><br><span class="line"><span class="comment">	 * responces to our wandering segments living for two MSLs.</span></span><br><span class="line"><span class="comment">	 * However, if we use PAWS to detect</span></span><br><span class="line"><span class="comment">	 * old duplicates, we can reduce the interval to bounds required</span></span><br><span class="line"><span class="comment">	 * by RTO, rather than MSL. So, if peer understands PAWS, we</span></span><br><span class="line"><span class="comment">	 * kill tw bucket after 3.5*RTO (it is important that this number</span></span><br><span class="line"><span class="comment">	 * is greater than TS tick!) and detect old duplicates with help</span></span><br><span class="line"><span class="comment">	 * of PAWS.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">  <span class="comment">// 通过timeout值计算slot号</span></span><br><span class="line">	slot = (timeo + (<span class="number">1</span> &lt;&lt; INET_TWDR_RECYCLE_TICK) - <span class="number">1</span>) &gt;&gt; INET_TWDR_RECYCLE_TICK;</span><br><span class="line"></span><br><span class="line">	spin_lock(&amp;twdr-&gt;death_lock);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/* Unlink it, if it was scheduled */</span></span><br><span class="line">	<span class="keyword">if</span> (inet_twsk_del_dead_node(tw))</span><br><span class="line">		twdr-&gt;tw_count--;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		atomic_inc(&amp;tw-&gt;tw_refcnt);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 如果所计算的slot大于默认值（1&lt;&lt;5），进入慢timer去处理，其他的进入快timer</span></span><br><span class="line">	<span class="keyword">if</span> (slot &gt;= INET_TWDR_RECYCLE_SLOTS) &#123;</span><br><span class="line">		<span class="comment">/* Schedule to slow timer */</span></span><br><span class="line">		<span class="keyword">if</span> (timeo &gt;= timewait_len) &#123;</span><br><span class="line">			slot = INET_TWDR_TWKILL_SLOTS - <span class="number">1</span>;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			slot = DIV_ROUND_UP(timeo, twdr-&gt;period);</span><br><span class="line">			<span class="keyword">if</span> (slot &gt;= INET_TWDR_TWKILL_SLOTS)</span><br><span class="line">				slot = INET_TWDR_TWKILL_SLOTS - <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		tw-&gt;tw_ttd = inet_tw_time_stamp() + timeo;</span><br><span class="line">		slot = (twdr-&gt;slot + slot) &amp; (INET_TWDR_TWKILL_SLOTS - <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">list</span> = &amp;twdr-&gt;cells[slot];</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		tw-&gt;tw_ttd = inet_tw_time_stamp() + (slot &lt;&lt; INET_TWDR_RECYCLE_TICK);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (twdr-&gt;twcal_hand &lt; <span class="number">0</span>) &#123;</span><br><span class="line">			twdr-&gt;twcal_hand = <span class="number">0</span>;</span><br><span class="line">			twdr-&gt;twcal_jiffie = jiffies;</span><br><span class="line">			twdr-&gt;twcal_timer.expires = twdr-&gt;twcal_jiffie +</span><br><span class="line">					      (slot &lt;&lt; INET_TWDR_RECYCLE_TICK);</span><br><span class="line">			add_timer(&amp;twdr-&gt;twcal_timer);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (time_after(twdr-&gt;twcal_timer.expires,</span><br><span class="line">				       jiffies + (slot &lt;&lt; INET_TWDR_RECYCLE_TICK)))</span><br><span class="line">				mod_timer(&amp;twdr-&gt;twcal_timer,</span><br><span class="line">					  jiffies + (slot &lt;&lt; INET_TWDR_RECYCLE_TICK));</span><br><span class="line">			slot = (twdr-&gt;twcal_hand + slot) &amp; (INET_TWDR_RECYCLE_SLOTS - <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">list</span> = &amp;twdr-&gt;twcal_row[slot];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	hlist_add_head(&amp;tw-&gt;tw_death_node, <span class="built_in">list</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (twdr-&gt;tw_count++ == <span class="number">0</span>)</span><br><span class="line">		mod_timer(&amp;twdr-&gt;tw_timer, jiffies + twdr-&gt;period);</span><br><span class="line">	spin_unlock(&amp;twdr-&gt;death_lock);</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL_GPL(inet_twsk_schedule);</span><br></pre></td></tr></table></figure>

<h2 id="4-1-内核修改了什么"><a href="#4-1-内核修改了什么" class="headerlink" title="4.1+内核修改了什么"></a>4.1+内核修改了什么</h2><p>4.1 的内核，对TIME_WAIT处理逻辑做了改动，具体改动见PR，这里做一下简单翻译。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcp&#x2F;dccp：摆脱单独一个time-wait timer</span><br><span class="line"></span><br><span class="line">大约15年前，当时内存昂贵且机器只有一个CPU时，使用timer作为time-wait套接字是不错的选择，</span><br><span class="line">但是这个没法扩展，代码丑陋且延迟极大（经常能看到cpus在death_lock pinlock上达到30ms的自旋）</span><br><span class="line">我们现在可以让每个time-wait sock额外使用64个字节，并将time-wait负载扩展到所有的CPU</span><br><span class="line">来获得更好的性能</span><br><span class="line">测试如下：</span><br><span class="line">下面的测试中, 在server端（lpaa24）&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;tcp_tw_recycle 设为 1</span><br><span class="line"></span><br><span class="line">修改前 :</span><br><span class="line">lpaa23:~# .&#x2F;super_netperf 200 -H lpaa24 -t TCP_CC -l 60 -- -p0,0</span><br><span class="line">419594</span><br><span class="line"></span><br><span class="line">lpaa23:~# .&#x2F;super_netperf 200 -H lpaa24 -t TCP_CC -l 60 -- -p0,0</span><br><span class="line">437171</span><br><span class="line">当测试运行时，可以观察到25到33ms的延迟</span><br><span class="line"></span><br><span class="line">lpaa24:~# ping -c 1000 -i 0.02 -qn lpaa23</span><br><span class="line">...</span><br><span class="line">1000 packets transmitted, 1000 received, 0% packet loss, time 20601ms</span><br><span class="line">rtt min&#x2F;avg&#x2F;max&#x2F;mdev &#x3D; 0.020&#x2F;0.217&#x2F;25.771&#x2F;1.535 ms, pipe 2</span><br><span class="line"></span><br><span class="line">lpaa24:~# ping -c 1000 -i 0.02 -qn lpaa23</span><br><span class="line">...</span><br><span class="line">1000 packets transmitted, 1000 received, 0% packet loss, time 20702ms</span><br><span class="line">rtt min&#x2F;avg&#x2F;max&#x2F;mdev &#x3D; 0.019&#x2F;0.183&#x2F;33.761&#x2F;1.441 ms, pipe 2</span><br><span class="line"></span><br><span class="line">修改后 :</span><br><span class="line">吞吐量提高90% :</span><br><span class="line"></span><br><span class="line">lpaa23:~# .&#x2F;super_netperf 200 -H lpaa24 -t TCP_CC -l 60 -- -p0,0</span><br><span class="line">810442</span><br><span class="line"></span><br><span class="line">lpaa23:~# .&#x2F;super_netperf 200 -H lpaa24 -t TCP_CC -l 60 -- -p0,0</span><br><span class="line">800992</span><br><span class="line"></span><br><span class="line">即时网络利用率提高了90%以上，延迟依旧保持在一个很低的水平上：</span><br><span class="line"></span><br><span class="line">lpaa24:~# ping -c 1000 -i 0.02 -qn lpaa23</span><br><span class="line">...</span><br><span class="line">1000 packets transmitted, 1000 received, 0% packet loss, time 19991ms</span><br><span class="line">rtt min&#x2F;avg&#x2F;max&#x2F;mdev &#x3D; 0.023&#x2F;0.064&#x2F;0.360&#x2F;0.042 ms</span><br></pre></td></tr></table></figure>

<p>commit：<a href="https://github.com/torvalds/linux/commit/789f558cfb3680aeb52de137418637f6b04b7d22" target="_blank" rel="noopener">789f558cfb3680aeb52de137418637f6b04b7d22</a></p>
<p>link：<a href="https://lxr.missinglinkelectronics.com/linux+v4.1/net/ipv4/inet_timewait_sock.c" target="_blank" rel="noopener">v4.1/net/ipv4/inet_timewait_sock.c</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inet_twsk_schedule</span><span class="params">(struct inet_timewait_sock *tw, <span class="keyword">const</span> <span class="keyword">int</span> timeo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tw-&gt;tw_kill = timeo &lt;= <span class="number">4</span>*HZ;</span><br><span class="line">	<span class="keyword">if</span> (!mod_timer_pinned(&amp;tw-&gt;tw_timer, jiffies + timeo)) &#123;</span><br><span class="line">		atomic_inc(&amp;tw-&gt;tw_refcnt);</span><br><span class="line">		atomic_inc(&amp;tw-&gt;tw_dr-&gt;tw_count);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL_GPL(inet_twsk_schedule);</span><br></pre></td></tr></table></figure>

<p>然后在4.3对上面的PR又做了修订 ，详细见PR。做下简单翻译：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">当创建一个timewait socket时，我们需要在允许其他CPU找到它之前配置计时器。</span><br><span class="line">允许cpus查找socket的信号将tw_refcnt设置为非零值</span><br><span class="line"></span><br><span class="line">我们需要先调用inet_twsk_schedule(),才能在 __inet_twsk_hashdance()中设置tw_refcnt值</span><br><span class="line"></span><br><span class="line">这也意味着我们需要从inet_twsk_schedule()中删除tw_refcnt的更改，然后由调用方处理。</span><br><span class="line"></span><br><span class="line">请注意，由于我们使用了mod_timer_pinned()，因此可以保证在BH上下文中运行时设置tw_refcnt之前，</span><br><span class="line">计时器不会过期。</span><br><span class="line"></span><br><span class="line">为了使内容更具可读性，我引入了inet_twsk_reschedule() helper。</span><br><span class="line"></span><br><span class="line">重新设置计时器时，可以使用mod_timer_pending()来确保不需要重新设置已取消的计时器。</span><br><span class="line"></span><br><span class="line">注意：如果流的数据包能击中多个cpus，则可能会触发此错误。 除非以某种方式破坏了流量控制，</span><br><span class="line">否则通常不会发生这种情况。 大概修改<span class="number">5</span>个月后发现了这个错误。</span><br><span class="line"></span><br><span class="line">reqsk_queue_hash_req()中的SYN_RECV socket需要类似的修复程序，但将在单独的修补程序中提</span><br><span class="line">供该修复程序以进行正确的跟踪。</span><br></pre></td></tr></table></figure>

<p>commit：<a href="https://github.com/torvalds/linux/commit/ed2e923945892a8372ab70d2f61d364b0b6d9054" target="_blank" rel="noopener">ed2e923945892a8372ab70d2f61d364b0b6d9054</a></p>
<p>link：<a href="https://lxr.missinglinkelectronics.com/linux+v4.3/net/ipv4/inet_timewait_sock.c#L222" target="_blank" rel="noopener">v4.3/net/ipv4/inet_timewait_sock.c#L222</a></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> __inet_twsk_schedule(struct inet_timewait_sock *tw, <span class="keyword">int</span> timeo, <span class="keyword">bool</span> rearm)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (!rearm) &#123;</span><br><span class="line">			BUG_ON(mod_timer_pinned(&amp;tw-&gt;tw_timer, jiffies + timeo));</span><br><span class="line"> 			atomic_inc(&amp;tw-&gt;tw_dr-&gt;tw_count);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			mod_timer_pending(&amp;tw-&gt;tw_timer, jiffies + timeo);</span><br><span class="line"> 		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单来说，就是CPU利用率提升，吞吐量提高。推荐使用4.3+内核</p>
<h2 id="几个常见参数介绍"><a href="#几个常见参数介绍" class="headerlink" title="几个常见参数介绍"></a>几个常见参数介绍</h2><h3 id="net-ipv4-tcp-tw-reuse"><a href="#net-ipv4-tcp-tw-reuse" class="headerlink" title="net.ipv4.tcp_tw_reuse"></a>net.ipv4.tcp_tw_reuse</h3><p>重用 TIME_WAIT 连接的条件：</p>
<ul>
<li>设置了 tcp_timestamps = 1，即开启状态。</li>
<li>设置了 tcp_tw_reuse = 1，即开启状态。</li>
<li>新连接的 timestamp 大于 之前连接的 timestamp 。</li>
<li>在处于 TIME_WAIT 状态并且持续 1 秒之后。<code>get_seconds() - tcptw-&gt;tw_ts_recent_stamp &gt; 1</code> 。</li>
</ul>
<p>重用的连接类型：仅仅只是 Outbound (Outgoing) connection ，对于 Inbound connection 不会重用。</p>
<p>安全指的是什么：</p>
<ul>
<li>TIME_WAIT 可以避免重复发送的数据包被后续的连接错误的接收，由于 timestamp 机制的存在，重复的数据包会直接丢弃掉。</li>
<li>TIME_WAIT 能够确保被动连接的一方，不会由于主动连接的一方发送的最后一个 ACK 数据包丢失（比如网络延迟导致的丢包）之后，一直停留在 LAST_ACK 状态，导致被动关闭方无法正确地关闭连接。为了确保这一机制，主动关闭的一方会一直重传（ retransmit ） FIN 数据包。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tcp_twsk_unique</span><span class="params">(struct sock *sk, struct sock *sktw, <span class="keyword">void</span> *twp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcp_timewait_sock</span> *<span class="title">tcptw</span> = <span class="title">tcp_twsk</span>(<span class="title">sktw</span>);</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">tcp_sock</span> *<span class="title">tp</span> = <span class="title">tcp_sk</span>(<span class="title">sk</span>);</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* With PAWS, it is safe from the viewpoint</span></span><br><span class="line"><span class="comment">	   of data integrity. Even without PAWS it is safe provided sequence</span></span><br><span class="line"><span class="comment">	   spaces do not overlap i.e. at data rates &lt;= 80Mbit/sec.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	   Actually, the idea is close to VJ's one, only timestamp cache is</span></span><br><span class="line"><span class="comment">	   held not per host, but per port pair and TW bucket is used as state</span></span><br><span class="line"><span class="comment">	   holder.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	   If TW bucket has been already destroyed we fall back to VJ's scheme</span></span><br><span class="line"><span class="comment">	   and use initial timestamp retrieved from peer table.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="comment">// 需要开启时间戳扩展</span></span><br><span class="line">	<span class="keyword">if</span> (tcptw-&gt;tw_ts_recent_stamp &amp;&amp;</span><br><span class="line">	    (twp == <span class="literal">NULL</span> || (sysctl_tcp_tw_reuse &amp;&amp;</span><br><span class="line">			     get_seconds() - tcptw-&gt;tw_ts_recent_stamp &gt; <span class="number">1</span>))) &#123;</span><br><span class="line">		tp-&gt;write_seq = tcptw-&gt;tw_snd_nxt + <span class="number">65535</span> + <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">if</span> (tp-&gt;write_seq == <span class="number">0</span>)</span><br><span class="line">			tp-&gt;write_seq = <span class="number">1</span>;</span><br><span class="line">		tp-&gt;rx_opt.ts_recent	   = tcptw-&gt;tw_ts_recent;</span><br><span class="line">		tp-&gt;rx_opt.ts_recent_stamp = tcptw-&gt;tw_ts_recent_stamp;</span><br><span class="line">		sock_hold(sktw);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">EXPORT_SYMBOL_GPL(tcp_twsk_unique);</span><br></pre></td></tr></table></figure>

<h3 id="net-ipv4-tcp-tw-recycle"><a href="#net-ipv4-tcp-tw-recycle" class="headerlink" title="net.ipv4.tcp_tw_recycle"></a>net.ipv4.tcp_tw_recycle</h3><p>详见上面处理<strong>time-wait</strong>一节的分析</p>
<p>不建议开启 tw_recycle 配置。事实上，在 linux 内核 4.12 版本，已经去掉了 net.ipv4.tcp_tw_recycle 参数了，参考<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=4396e46187ca5070219b81773c4e65088dac50cc" target="_blank" rel="noopener">commit</a></p>
<h3 id="tcp-max-tw-buckets"><a href="#tcp-max-tw-buckets" class="headerlink" title="tcp_max_tw_buckets"></a>tcp_max_tw_buckets</h3><p>设置 TIME_WAIT 最大数量。目的为了阻止一些简单的DoS攻击，平常不要人为的降低它。如果缩小了它，那么系统会将多余的TIME_WAIT删除掉，日志里会显示：「TCP: time wait bucket table overflow」。</p>
<h1 id="如何设置正确的值"><a href="#如何设置正确的值" class="headerlink" title="如何设置正确的值"></a>如何设置正确的值</h1><blockquote>
<p>定时器精度相关分析请看参考[3]</p>
</blockquote>
<h2 id="4-1内核"><a href="#4-1内核" class="headerlink" title="4.1内核"></a>4.1内核</h2><ol>
<li>tcp_fin_timeout &lt;= 3, FIN_WAIT_2 状态超时时间为 tcp_fin_timeout 值。</li>
<li>3&lt;tcp_fin_timeout &lt;=60, FIN_WAIT_2状态超时时间为 tcp_fin_timeout值+定时器精度（以7秒为单位）误差时间。</li>
<li>tcp_fin_timeout &gt; 60, FIN_WAIT_2状态会先经历keepalive状态，持续时间为tmo=tcp_fin_timeout-60值, 再经历timewait状态，持续时间为 (tcp_fin_timeout -60)+定时器精度，这里的定时器精度根据(tcp_fin_timeout -60)的计算值，会最终落在上述两个精度范围（1/8秒为单位或7秒为单位）。</li>
</ol>
<h2 id="4-3-内核"><a href="#4-3-内核" class="headerlink" title="4.3+内核"></a>4.3+内核</h2><ol>
<li>tcp_fin_timeout &lt;=60, FIN_WAIT_2 状态超时时间为 tcp_fin_timeout 值。</li>
<li>tcp_fin_timeout &gt; 60, FIN_WAIT_2 状态会先经历 keepalive 状态，持续时间为 tmo=tcp_fin_timeout-60 值 , 再经历 timewait 状态，持续时间同样为 tmo= tcp_fin_timeout-60 值。</li>
</ol>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>[1] Linux TCP Finwait2/Timewait状态要义浅析，<a href="https://blog.csdn.net/dog250/article/details/81582604" target="_blank" rel="noopener">https://blog.csdn.net/dog250/article/details/81582604</a></p>
<p>[2] TCP的TIME_WAIT快速回收与重用，<a href="https://blog.csdn.net/dog250/article/details/13760985" target="_blank" rel="noopener">https://blog.csdn.net/dog250/article/details/13760985</a></p>
<p>[3] 由优化FIN_WAIT_2状态超时引入的关于tcp_fin_timeout参数研究，<a href="https://www.talkwithtrend.com/Article/251641" target="_blank" rel="noopener">https://www.talkwithtrend.com/Article/251641</a></p>
<p>[4] TCP TIME_WAIT 详解，<a href="https://www.zhuxiaodong.net/2018/tcp-time-wait-instruction/" target="_blank" rel="noopener">https://www.zhuxiaodong.net/2018/tcp-time-wait-instruction/</a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>TCP</tag>
      </tags>
  </entry>
  <entry>
    <title>[译]容器带给DevSecOps的重大挑战</title>
    <url>/posts/b6e0f891/</url>
    <content><![CDATA[<blockquote>
<p>原文：<a href="https://containerjournal.com/topics/container-security/containers-creating-major-devsecops-challenge/" target="_blank" rel="noopener">Containers Creating Major DevSecOps Challenge - Container Journal</a></p>
</blockquote>
<h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h1><ul>
<li>出现了新的对容器攻击方式</li>
<li>大量出现加密货币劫持攻击，但是不具备很大的破坏性</li>
<li>镜像相关的业务和安全需要找到一种平衡</li>
<li>需要一种新的镜像保护方式</li>
</ul>
<p><strong><em>”与此同时，加密容器的使用以及其他有望使容器更加安全的新工具应该会增加。面临的挑战是找出一种合适的方式来应用它们。“</em></strong></p>
<h1 id="译文"><a href="#译文" class="headerlink" title="译文"></a>译文</h1><p>现在对容器的攻击出现了新的方式，会对云原生应用的部署速度有很大的影响。相关IT企业在做数字化转型时，都渴望将微服务应用程序迁移到云原生上。但是，当越来越多的核心应用完成云化改造，就导致容器安全问题更加重要，解决起来就会更加棘手。</p>
<p>幸好，今天大多数涉及容器安全漏洞的案例，通常都是加密货币劫持(<code>cryptojacking</code>)这类的小型攻击。根据<a href="https://www.prnewswire.com/news-releases/aqua-security-research-report-shows-increase-in-organized-attacks-on-cloud-native-infrastructure-and-software-supply-chain-301128515.html" target="_blank" rel="noopener">Aqua Security最近发布的一份报告</a>，其发现的95%的容器映像都被设计成劫持资源，唯一的目的就是为加密货币挖矿。加密货币劫持可以被认为相当于一种无受害人的IT犯罪，因为云服务提供商的丰富计算资源被用于非法目的。</p>
<p>但是，Aqua Security的首席数据分析师Asaf Morag指出，对于一个没有很大危害且没有破坏性的容器而言，这只是向湖中扔了一个小石头。</p>
<p>各种单位组织都在将责任向研发端推，以防止再起开发的应用中出现这个问题。面临的挑战是确保容器的安全需要一种生命周期管理方法，而这种方法的实施既繁琐又具有维护的挑战性。</p>
<p>理论上，组织要求开发人员使用静态检查工具扫描他们的代码是否存在漏洞。然而，这只是安全流程的一个开始。然后，DevOps团队还需要扫描容器运行时和它们运行的主机是否存在漏洞。虽然这似乎与如何保护单体应用的安全没有太大区别，但容器的更新速度通常要比对单体应用的大几个数量级。每一个容器和它们运行的平台在每次更新时都需要进行扫描。</p>
<p>更具挑战性的是，在现有的容器应用中随时可能发现新的漏洞，这意味着DevOps团队可能会发现重新扫描那些曾经被认为是安全的长期运行的容器和平台。</p>
<p>IBM研究员、云原生计算基金会(CNCF)安全兴趣小组技术负责人Brandon Lum表示，现在需要转换一下安全思路。因为容器是可移动的，需要将过程敏捷化，这就需要适配大量的测试用基础设施。</p>
<p>开发人员和安全团队之间剑拔弩张并不是什么新鲜事，但容器显然正在激化这个问题。CNCF SIG刚刚发布的一份新的容器安全白皮书甚至指出，“期望开发和运维人员成为安全专家是不合常理的”。这也就不难理解为什么这么多组织在不断权衡实施容器安全的成本和实际风险了。事实上，CNCF白皮书指出：”随着现代方法论的快速出现，以及IT技术和业务需求的更好结合，安全必须具有适应性、使用合理和透明的。”</p>
<p>“使用合理”是由一个组织愿意承担的风险程度决定的。事实上，一些组织认为，在有潜在漏洞的容器真正有可能被破坏之前，早就会将其撕毁并更换，这并不是闻所未闻的事情。这个假设是应用部署和更新的速度，以推进业务目标，胜过容器安全问题。如果不是这样，就会有数以百万计的容器已经部署在生产环境中，尽管已知有漏洞。</p>
<p>当然，安全专业人员正在试图通过策略和制度的结合，尽量减少生产环境中可能存在的潜在容器漏洞的数量。可以附加政策，如果容器不符合特定要求，就阻止其运行。问题是，当逼不得已时，大多数组织会决定业务需要大于安全问题。</p>
<p>这个规则的一个例外是政府机构，比如美国国家安全局（NSA）根据NSA的DevSecOps负责人Emily Fox的说法，昔日不遵守最佳DevSecOps实践的开发人员将不被允许为大多数组织工作。</p>
<p>在AI和自动化的帮助下，也许有一天让单位组织更加容易的实现容器的安全生命周期管理，但就目前大多数组织中DevSecOps的现状来看，2025年能实现都表现得过于乐观。</p>
<p><strong>与此同时，加密容器的使用以及其他有望使容器更加安全的新工具应该会增加。面临的挑战是找出一种合适的方式来应用它们。</strong></p>
]]></content>
      <tags>
        <tag>镜像加密</tag>
        <tag>翻译</tag>
      </tags>
  </entry>
  <entry>
    <title>访问Docker容器响应&#39;ERR_CONNECTION_RESET&#39;的问题排查</title>
    <url>/posts/6e5db5aa/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>接到反馈说刚才好好的单体Docker容器无法访问了。浏览器访问超时并显示<code>ERR_CONNECTION_RESET</code>。</p>
<h1 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h1><p>首先想到的就是服务挂了，但是从<code>docker ps -a</code>来看，容器运行良好，且都对外开放了相应的端口。</p>
<h2 id="1-排查端口"><a href="#1-排查端口" class="headerlink" title="1. 排查端口"></a>1. 排查端口</h2><p>宿主机使用 <code>lo</code> 网卡访问响应端口，看下端口连通性。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; wget -O- 127.0.0.1:8500</span><br><span class="line">[root@localhost ~]<span class="comment"># wget -O- 127.0.0.1:8500</span></span><br><span class="line">--2020-06-10 22:25:43--  http://127.0.0.1:8500/</span><br><span class="line">正在连接 127.0.0.1:8500... 已连接。</span><br><span class="line">已发出 HTTP 请求，正在等待回应... 读取文件头错误（Connection reset by peer）。</span><br><span class="line">重试中。</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>首先确认端口是通的，但是被拒绝了，下面抓包看一下。启动抓包并重新发送 wget 请求</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; tcpdump port 8500 -i lo -vvv -w /srv/out.cap</span><br></pre></td></tr></table></figure>

<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/docker/capture-rst.png" alt=""></p>
<p>正常发送HTTP请求，收到了RST。所以浏览器才会显示<code>ERR_CONNECTION_RESET</code></p>
<p>经查，端口没问题。</p>
<h2 id="2-排查容器"><a href="#2-排查容器" class="headerlink" title="2. 排查容器"></a>2. 排查容器</h2><p>已经知道了宿主机访问会出现问题，那就看下在容器内访问能不能正常响应，进入一个和目标容器相同子网的容器。这里以busybox为例，子网使用的 <code>bridge</code> 模式，容器启动时选择相同的 Docker 网卡即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; docker <span class="built_in">exec</span> -it busybox sh</span><br><span class="line">&gt; wget -O- 192.168.24.151:8500</span><br><span class="line">Connecting to 192.168.24.151:8500 (192.168.24.151:8500)</span><br><span class="line">*** HTML 内容 ***</span><br></pre></td></tr></table></figure>

<p>能正常响应页面，在相同子网内访问是没有问题的。</p>
<h2 id="3-排查网卡"><a href="#3-排查网卡" class="headerlink" title="3. 排查网卡"></a>3. 排查网卡</h2><p>从前两项排查可知，宿主机无法访问，Docker子网内可以访问。那就是网卡应该出现了问题。因为是所有容器都是跑在新建的网卡下面的，所以直接查看宿主机网卡信息</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/docker/duplicate-interface.png" alt=""></p>
<p>居然有两个相同的网卡，居然是因为网卡冲突了。上一个出入流量很高，后一个就很低。查看现在正在使用的网卡ID，是用的上面这个流量高的网卡，而且后一个网卡也没有看到对应的网络信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">edbd45482644        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">a0b6ef0cf177        host                host                <span class="built_in">local</span></span><br><span class="line">715b7fddecd5        xxx-network         bridge              <span class="built_in">local</span></span><br><span class="line">ef3d1b9a5ebc        none                null                <span class="built_in">local</span></span><br></pre></td></tr></table></figure>

<p>删掉没用的那个网卡就可以了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; ip link delete br-fae0e0150543</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>网卡冲突带来的连接重置，通过后期查询<a href="https://blog.csdn.net/kunkliu/article/details/79082886" target="_blank" rel="noopener">解决网卡冲突</a>得知，Linux内核默认是给ARP做了VIP的，所以两个网卡都可以访问，但是docker什么时候创建的网卡就不得而知了。🔚</p>
<hr>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>本地构建基于Alpine的OpenJ9 OpenJDK11及精简JDK的制作</title>
    <url>/posts/147e3088/</url>
    <content><![CDATA[<p>看说OpenJ9的内存占用相较于Hotspot要低，<a href="https://billykorando.com/2019/05/03/5-reasons-why-you-should-consider-switching-to-eclipse-openj9/" target="_blank" rel="noopener">对比文章</a>。所以打算在本地打一个镜像试试。</p>
<p>其实AdoptOpenJDK提供的有OpenJ9的镜像，<a href="https://hub.docker.com/r/adoptopenjdk/openjdk11-openj9" target="_blank" rel="noopener">链接在此</a>。因为需要做一些修改，所以直接用Dockerfile本地构建了。同时也分享一下是如何在服务器无法连接代理的情况下使用AdoptOpenJDK镜像脚本构建镜像。</p>
<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>参考的构建脚本是AdoptOpenJDK的openjdk-docker项目，具体<a href="https://github.com/AdoptOpenJDK/openjdk-docker/blob/master/11/jre/alpine/Dockerfile.openj9.releases.full" target="_blank" rel="noopener">链接</a>。具体内容就不放这里了，直接去链接里面看就好了。</p>
<ol>
<li><p>为什么构建脚本那么长</p>
<p>OpenJ9现在基于Alpine的好像只能用glibc库，但是Alpine官方用的是musl-libc，所以脚本中很大一部分都是在安装glibc，具体可以看：<a href="https://serverfault.com/a/960783" target="_blank" rel="noopener">Installing openjdk 11 on alpine:3.9</a></p>
</li>
<li><p>国内访问问题</p>
<p>脚本中有很多的curl操作，而且地址对应的是github和archlinux，github用的AWS云存储，国内无法直连，archlinux的archive直连下载只有20kb左右，我搜了下国内的镜像站点都没有收录，所以直接在服务器上构建不可取，需要稍微修改下。</p>
</li>
</ol>
<h2 id="修改脚本"><a href="#修改脚本" class="headerlink" title="修改脚本"></a>修改脚本</h2><ol>
<li><p>下载文件</p>
<p>先在本地通过代理将所需文件下载至本地，本地搭建一个文件服务器供服务器使用（我这里所用的服务器和工作机是相同网段）。下面也给出了所需的文件，都放在天翼云上了， 国内下载应该是满速。</p>
<p>本地依赖下载：<a href="https://cloud.189.cn/web/share?code=Yn6Fju7Vb2qq" target="_blank" rel="noopener">天翼云盘</a>（访问码：rbp5）</p>
</li>
<li><p>搭建文件服务器</p>
<p>文件服务器很简单，有一个基于Chrome的插件可以直接开启服务。<a href="https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb" target="_blank" rel="noopener">Web Server for Chrome</a></p>
<p>操作很简单，选择文件目录，开启服务就好了，确保服务器能够正常访问即可。</p>
</li>
<li><p>修改URL</p>
<p>在上下两个<code>RUN</code>语法糖中都加入<code>URL_PREFIX=&quot;http://10.20.61.27:8887&quot;</code>（完整Dockerfile见最后），修改所有出现的URL就可以了！别忘记添加Alpine CDN的国内镜像源。</p>
</li>
</ol>
<h1 id="构建JDK"><a href="#构建JDK" class="headerlink" title="构建JDK"></a>构建JDK</h1><p>脚本修改好之后，直接在服务端构建即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build . -t openjdk:11.0-openj9</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Sending build context to Docker daemon  503.8kB</span><br><span class="line">Step 1/9 : FROM alpine:3.11</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> f70734b6a266</span></span><br><span class="line">Step 2/9 : MAINTAINER Gsealy &lt;jiaojingwei@infosec.com.cn&gt;</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 8750fff47cb4</span></span><br><span class="line">Removing intermediate container 8750fff47cb4</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 2b9b4628a331</span></span><br><span class="line">Step 3/9 : ENV LANG="zh_CN.UTF-8" LC_ALL="zh_CN.UTF-8"</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 370ad5d94d09</span></span><br><span class="line">Removing intermediate container 370ad5d94d09</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 5384261f7b05</span></span><br><span class="line">Step 4/9 : RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories     &amp;&amp; apk add --no-cache --virtual .build-deps curl binutils     &amp;&amp; GLIBC_VER="2.31-r0"     &amp;&amp; URL_PREFIX="http://10.20.61.27:8887"     &amp;&amp; GCC_LIBS_URL="$&#123;URL_PREFIX&#125;/gcc-libs-9.1.0-2-x86_64.pkg.tar.xz"     &amp;&amp; ZLIB_URL="$&#123;URL_PREFIX&#125;/zlib-1_1.2.11-3-x86_64.pkg.tar.xz"     &amp;&amp; curl -LfsS $&#123;URL_PREFIX&#125;/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub     &amp;&amp; curl -LfsS $&#123;URL_PREFIX&#125;/glibc-$&#123;GLIBC_VER&#125;.apk &gt; /tmp/glibc-$&#123;GLIBC_VER&#125;.apk     &amp;&amp; apk add --no-cache /tmp/glibc-$&#123;GLIBC_VER&#125;.apk     &amp;&amp; curl -LfsS $&#123;URL_PREFIX&#125;/glibc-bin-$&#123;GLIBC_VER&#125;.apk &gt; /tmp/glibc-bin-$&#123;GLIBC_VER&#125;.apk     &amp;&amp; apk add --no-cache /tmp/glibc-bin-$&#123;GLIBC_VER&#125;.apk     &amp;&amp; curl -Ls $&#123;URL_PREFIX&#125;/glibc-i18n-$&#123;GLIBC_VER&#125;.apk &gt; /tmp/glibc-i18n-$&#123;GLIBC_VER&#125;.apk     &amp;&amp; apk add --no-cache /tmp/glibc-i18n-$&#123;GLIBC_VER&#125;.apk     &amp;&amp; /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 "$LANG" || true     &amp;&amp; echo "export LANG=$LANG" &gt; /etc/profile.d/locale.sh     &amp;&amp; curl -LfsS $&#123;GCC_LIBS_URL&#125; -o /tmp/gcc-libs.tar.xz     &amp;&amp; mkdir /tmp/gcc     &amp;&amp; tar -xf /tmp/gcc-libs.tar.xz -C /tmp/gcc     &amp;&amp; mv /tmp/gcc/usr/lib/libgcc* /tmp/gcc/usr/lib/libstdc++* /usr/glibc-compat/lib     &amp;&amp; strip /usr/glibc-compat/lib/libgcc_s.so.* /usr/glibc-compat/lib/libstdc++.so*     &amp;&amp; curl -LfsS $&#123;ZLIB_URL&#125; -o /tmp/libz.tar.xz     &amp;&amp; mkdir /tmp/libz     &amp;&amp; tar -xf /tmp/libz.tar.xz -C /tmp/libz     &amp;&amp; mv /tmp/libz/usr/lib/libz.so* /usr/glibc-compat/lib     &amp;&amp; apk del --purge .build-deps glibc-i18n     &amp;&amp; rm -rf /tmp/*.apk /tmp/gcc /tmp/gcc-libs.tar.xz /tmp/libz /tmp/libz.tar.xz /var/cache/apk/*</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> f702ac6a4a05</span></span><br><span class="line">fetch http://mirrors.ustc.edu.cn/alpine/v3.11/main/x86_64/APKINDEX.tar.gz</span><br><span class="line">fetch http://mirrors.ustc.edu.cn/alpine/v3.11/community/x86_64/APKINDEX.tar.gz</span><br><span class="line">(1/8) Installing ca-certificates (20191127-r1)</span><br><span class="line">(2/8) Installing nghttp2-libs (1.40.0-r0)</span><br><span class="line">(3/8) Installing libcurl (7.67.0-r0)</span><br><span class="line">(4/8) Installing curl (7.67.0-r0)</span><br><span class="line">(5/8) Installing libgcc (9.2.0-r4)</span><br><span class="line">(6/8) Installing libstdc++ (9.2.0-r4)</span><br><span class="line">(7/8) Installing binutils (2.33.1-r0)</span><br><span class="line">(8/8) Installing .build-deps (20200509.020904)</span><br><span class="line">Executing busybox-1.31.1-r9.trigger</span><br><span class="line">Executing ca-certificates-20191127-r1.trigger</span><br><span class="line">OK: 18 MiB in 22 packages</span><br><span class="line">fetch http://mirrors.ustc.edu.cn/alpine/v3.11/main/x86_64/APKINDEX.tar.gz</span><br><span class="line">fetch http://mirrors.ustc.edu.cn/alpine/v3.11/community/x86_64/APKINDEX.tar.gz</span><br><span class="line">(1/1) Installing glibc (2.31-r0)</span><br><span class="line">OK: 27 MiB in 23 packages</span><br><span class="line">fetch http://mirrors.ustc.edu.cn/alpine/v3.11/main/x86_64/APKINDEX.tar.gz</span><br><span class="line">fetch http://mirrors.ustc.edu.cn/alpine/v3.11/community/x86_64/APKINDEX.tar.gz</span><br><span class="line">(1/1) Installing glibc-bin (2.31-r0)</span><br><span class="line">Executing glibc-bin-2.31-r0.trigger</span><br><span class="line">/usr/glibc-compat/sbin/ldconfig: /usr/glibc-compat/lib/ld-linux-x86-64.so.2 is not a symbolic link</span><br><span class="line"></span><br><span class="line">OK: 30 MiB in 24 packages</span><br><span class="line">fetch http://mirrors.ustc.edu.cn/alpine/v3.11/main/x86_64/APKINDEX.tar.gz</span><br><span class="line">fetch http://mirrors.ustc.edu.cn/alpine/v3.11/community/x86_64/APKINDEX.tar.gz</span><br><span class="line">(1/1) Installing glibc-i18n (2.31-r0)</span><br><span class="line">OK: 55 MiB in 25 packages</span><br><span class="line">failed to set locale!</span><br><span class="line">[warning] No definition for LC_PAPER category found</span><br><span class="line">failed to set locale!</span><br><span class="line">[warning] No definition for LC_NAME category found</span><br><span class="line">failed to set locale!</span><br><span class="line">[warning] No definition for LC_ADDRESS category found</span><br><span class="line">failed to set locale!</span><br><span class="line">[warning] No definition for LC_TELEPHONE category found</span><br><span class="line">failed to set locale!</span><br><span class="line">[warning] No definition for LC_MEASUREMENT category found</span><br><span class="line">failed to set locale!</span><br><span class="line">[warning] No definition for LC_IDENTIFICATION category found</span><br><span class="line">WARNING: Ignoring APKINDEX.5f57d7a5.tar.gz: No such file or directory</span><br><span class="line">WARNING: Ignoring APKINDEX.e1c8646f.tar.gz: No such file or directory</span><br><span class="line">(1/8) Purging .build-deps (20200509.020904)</span><br><span class="line">(2/8) Purging curl (7.67.0-r0)</span><br><span class="line">(3/8) Purging binutils (2.33.1-r0)</span><br><span class="line">(4/8) Purging glibc-i18n (2.31-r0)</span><br><span class="line">(5/8) Purging libcurl (7.67.0-r0)</span><br><span class="line">(6/8) Purging ca-certificates (20191127-r1)</span><br><span class="line">Executing ca-certificates-20191127-r1.post-deinstall</span><br><span class="line">(7/8) Purging nghttp2-libs (1.40.0-r0)</span><br><span class="line">(8/8) Purging libstdc++ (9.2.0-r4)</span><br><span class="line">Executing busybox-1.31.1-r9.trigger</span><br><span class="line">Executing glibc-bin-2.31-r0.trigger</span><br><span class="line">/usr/glibc-compat/sbin/ldconfig: /usr/glibc-compat/lib/ld-linux-x86-64.so.2 is not a symbolic link</span><br><span class="line"></span><br><span class="line">OK: 17 MiB in 17 packages</span><br><span class="line">Removing intermediate container f702ac6a4a05</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 06ea75045e4f</span></span><br><span class="line">Step 5/9 : ENV JAVA_VERSION jdk-11.0.7+10_openj9-0.20.0</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 1b52218826fb</span></span><br><span class="line">Removing intermediate container 1b52218826fb</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 10ac97e30305</span></span><br><span class="line">Step 6/9 : RUN set -eux;     sed -i 's/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g' /etc/apk/repositories;     URL_PREFIX="http://10.20.61.27:8887";     apk add --no-cache --virtual .fetch-deps curl;     curl -LfsSo /tmp/openjdk.tar.gz $&#123;URL_PREFIX&#125;/OpenJDK11U-jdk_x64_linux_openj9_11.0.7_10_openj9-0.20.0.tar.gz ;     mkdir -p /opt/java/openjdk;     cd /opt/java/openjdk;     tar -xf /tmp/openjdk.tar.gz --strip-components=1;     apk del --purge .fetch-deps;     rm -rf /var/cache/apk/*;     rm -rf /tmp/openjdk.tar.gz;</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 5a861f325886</span></span><br><span class="line">+ sed -i s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g /etc/apk/repositories</span><br><span class="line">+ URL_PREFIX=http://10.20.61.27:8887</span><br><span class="line">+ apk add --no-cache --virtual .fetch-deps curl</span><br><span class="line">fetch http://mirrors.ustc.edu.cn/alpine/v3.11/main/x86_64/APKINDEX.tar.gz</span><br><span class="line">fetch http://mirrors.ustc.edu.cn/alpine/v3.11/community/x86_64/APKINDEX.tar.gz</span><br><span class="line">(1/5) Installing ca-certificates (20191127-r1)</span><br><span class="line">(2/5) Installing nghttp2-libs (1.40.0-r0)</span><br><span class="line">(3/5) Installing libcurl (7.67.0-r0)</span><br><span class="line">(4/5) Installing curl (7.67.0-r0)</span><br><span class="line">(5/5) Installing .fetch-deps (20200509.020918)</span><br><span class="line">Executing busybox-1.31.1-r9.trigger</span><br><span class="line">Executing ca-certificates-20191127-r1.trigger</span><br><span class="line">Executing glibc-bin-2.31-r0.trigger</span><br><span class="line">/usr/glibc-compat/sbin/ldconfig: /usr/glibc-compat/lib/ld-linux-x86-64.so.2 is not a symbolic link</span><br><span class="line"></span><br><span class="line">OK: 18 MiB in 22 packages</span><br><span class="line">+ curl -LfsSo /tmp/openjdk.tar.gz http://10.20.61.27:8887/OpenJDK11U-jdk_x64_linux_openj9_11.0.7_10_openj9-0.20.0.tar.gz</span><br><span class="line">+ mkdir -p /opt/java/openjdk</span><br><span class="line">+ cd /opt/java/openjdk</span><br><span class="line">+ tar -xf /tmp/openjdk.tar.gz '--strip-components=1'</span><br><span class="line">+ apk del --purge .fetch-deps</span><br><span class="line">WARNING: Ignoring APKINDEX.5f57d7a5.tar.gz: No such file or directory</span><br><span class="line">WARNING: Ignoring APKINDEX.e1c8646f.tar.gz: No such file or directory</span><br><span class="line">(1/5) Purging .fetch-deps (20200509.020918)</span><br><span class="line">(2/5) Purging curl (7.67.0-r0)</span><br><span class="line">(3/5) Purging libcurl (7.67.0-r0)</span><br><span class="line">(4/5) Purging ca-certificates (20191127-r1)</span><br><span class="line">Executing ca-certificates-20191127-r1.post-deinstall</span><br><span class="line">(5/5) Purging nghttp2-libs (1.40.0-r0)</span><br><span class="line">Executing busybox-1.31.1-r9.trigger</span><br><span class="line">Executing glibc-bin-2.31-r0.trigger</span><br><span class="line">/usr/glibc-compat/sbin/ldconfig: /usr/glibc-compat/lib/ld-linux-x86-64.so.2 is not a symbolic link</span><br><span class="line"></span><br><span class="line">OK: 17 MiB in 17 packages</span><br><span class="line">+ rm -rf '/var/cache/apk/*'</span><br><span class="line">+ rm -rf /tmp/openjdk.tar.gz</span><br><span class="line">Removing intermediate container 5a861f325886</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 65d928ee55b8</span></span><br><span class="line">Step 7/9 : ENV JAVA_HOME=/opt/java/openjdk     PATH="/opt/java/openjdk/bin:$PATH"</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 587330f6603b</span></span><br><span class="line">Removing intermediate container 587330f6603b</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 4c723c83f5d4</span></span><br><span class="line">Step 8/9 : ENV JAVA_TOOL_OPTIONS="-XX:+IgnoreUnrecognizedVMOptions -XX:+UseContainerSupport -XX:+IdleTuningCompactOnIdle -XX:+IdleTuningGcOnIdle"</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 95957f1a2a21</span></span><br><span class="line">Removing intermediate container 95957f1a2a21</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 335adfbeeca0</span></span><br><span class="line">Step 9/9 : CMD ["jshell"]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> ffa361fa1540</span></span><br><span class="line">Removing intermediate container ffa361fa1540</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> cdd09d947ca9</span></span><br><span class="line">Successfully built cdd09d947ca9</span><br><span class="line">Successfully tagged openjdk:11.0-openj9</span><br></pre></td></tr></table></figure>

<h1 id="使用Jlink精简JDK"><a href="#使用Jlink精简JDK" class="headerlink" title="使用Jlink精简JDK"></a>使用Jlink精简JDK</h1><p>做了一下小服务，不需要乱七八糟的依赖，就需要<code>java.base和java.logging</code>就行了，所以上手jlink，干掉多余的东西。</p>
<h2 id="Jlink介绍"><a href="#Jlink介绍" class="headerlink" title="Jlink介绍"></a>Jlink介绍</h2><p>官方文档：<a href="https://docs.oracle.com/en/java/javase/11/tools/jlink.html" target="_blank" rel="noopener">jlink</a></p>
<p>JEP：<a href="https://openjdk.java.net/jeps/282" target="_blank" rel="noopener">JEP 282: jlink: The Java Linker</a></p>
<blockquote>
<p>您可以使用jlink工具将一组模块及其依赖项组装和优化为自定义运行时映像。</p>
<p>ps. 这也就是OpenJDK9+没有再提供jre的原因，这个比jre强多了好吗，想咋改就咋改。</p>
</blockquote>
<p>Jlink使用介绍：<a href="https://medium.com/azulsystems/using-jlink-to-build-java-runtimes-for-non-modular-applications-9568c5e70ef4" target="_blank" rel="noopener">Using jlink to Build Java Runtimes for non-Modular Applications</a></p>
<p><strong>注：</strong>如果想精简JDK镜像的话，先用<code>jdeps</code>查看下Jar包的依赖。做到心中有数。<a href="https://docs.oracle.com/en/java/javase/11/tools/jdeps.html" target="_blank" rel="noopener">jdeps link</a></p>
<h3 id="常用参数介绍"><a href="#常用参数介绍" class="headerlink" title="常用参数介绍"></a>常用参数介绍</h3><p><strong>–add-modules mod[,mod…]</strong></p>
<p>添加模块，后面加模块名的可变参数</p>
<p><strong>-c={0|1|2} or –compress={0|1|2}</strong></p>
<p>启用资源压缩</p>
<ul>
<li>0：不压缩</li>
<li>1：常量字符串共享</li>
<li>2：ZIP</li>
</ul>
<p><strong>–no-header-files</strong></p>
<p>排除头文件</p>
<p><strong>–no-man-pages</strong></p>
<p>排除用户手册</p>
<p><strong>–output</strong> <strong>path</strong></p>
<p>指定新JDK镜像位置</p>
<p><strong>–strip-debug</strong></p>
<p>不输出debug信息</p>
<h2 id="参数示例"><a href="#参数示例" class="headerlink" title="参数示例"></a>参数示例</h2><p>以我这边一个精简为例：</p>
<ul>
<li>去掉头文件；</li>
<li>去掉用户手册；</li>
<li>不压缩（直接使用）；</li>
<li>屏蔽debug信息；</li>
<li>添加指定模块： <code>java.base,java.logging,jdk.unsupported</code>；</li>
<li>输出到指定目录：<code>/opt/openjdk/jre</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jlink --no-header-files --no-man-pages --compress&#x3D;0 --strip-debug \</span><br><span class="line">--add-modules java.base,java.logging,jdk.unsupported \</span><br><span class="line">--output &#x2F;opt&#x2F;openjdk&#x2F;jre;</span><br></pre></td></tr></table></figure>

<p>基本上一个270Mb的HotSpot镜像，按照上面的需求精简完就40多Mb。</p>
<h1 id="精简OpenJ9"><a href="#精简OpenJ9" class="headerlink" title="精简OpenJ9"></a>精简OpenJ9</h1><p>用的命令和示例中相同，但是因为OpenJ9的JDK本来就大，所以精简完也会比HotSpot的大上10Mb左右。相较于内存节省的空间，在可接受范围内。</p>
<p>OpenJ9的精简基于前面构建的<code>openjdk:11.0-openj9</code>，通过Dockerfile的分层构建和基础镜像实现。具体思路如下：</p>
<ol>
<li>选择<code>openjdk:11.0-openj9</code>作为来源，精简其中的JDK，存放于指定目录。</li>
<li>重新拉取一个Alpine镜像作为底层，拷贝刚才制作的JDK镜像到新的Alpine中。</li>
<li>本地化配置</li>
</ol>
<p>精简所用的Dockerfile详见附录</p>
<h2 id="内存占用"><a href="#内存占用" class="headerlink" title="内存占用"></a>内存占用</h2><p>通过OpenJ9镜像创建一个现有服务镜像，长时间稳定运行后，和之前对比。</p>
<p>测试用的是一个Spring Boot的MVC小项目，通过docker stats 查看内存占用。</p>
<p>说明：以<code>client-demo</code>镜像为例，长时间运行（24H以上）后对比。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker stats &lt;service&#39;s-docker-name&gt;</span><br></pre></td></tr></table></figure>

<p>Hotspot：</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/docker/hotspot-mem-use.png" alt=""></p>
<p>OpenJ9：</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/docker/openj9-mem-use.png" alt=""></p>
<p>可以明显的看到，Hotspot JVM的内存占用远高于OpenJ9。具体原因未分析，先用着</p>
<h1 id="附：Docker-JVM本地化"><a href="#附：Docker-JVM本地化" class="headerlink" title="附：Docker JVM本地化"></a>附：Docker JVM本地化</h1><p>JVM的Docker版本都是官方原版的，所以有很多的配置都是通用配置，下面说下几个修改点。</p>
<h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p>时区是有JVM所在的基础镜像所控制的，如果没有在jar运行时手动配置，则会直接调用系统时区。所以为了一劳永逸，直接修改基础镜像的时区，这里以Alpine为例：</p>
<p>Alpine配置时区需要安装<code>tzdata</code>，首先替换仓库为中科大的镜像，然后安装<code>tzdata</code>，配置完后再删除即可。因为是在一条命令中执行的，所以构建好后只会有一层。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -eux; \</span></span><br><span class="line"><span class="bash">    sed -i <span class="string">'s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g'</span> /etc/apk/repositories; \</span></span><br><span class="line"><span class="bash">    apk add --no-cache --virtual .build-deps binutils tzdata; \</span></span><br><span class="line"><span class="bash">    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">"Asia/Shanghai"</span> &gt; /etc/timezone; \</span></span><br><span class="line"><span class="bash">    apk del tzdata .build-deps;</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>系统默认语言基本都是US，需要修改为CN才可以。这个其实在上面 <code>构建JDK</code> 的时候在输出中出现过了。主要就是设置下Dockerfile的 <code>ENV</code> 语法糖。然后配置下自启动配置就好了。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">ENV</span> LANG=<span class="string">"zh_CN.UTF-8"</span> LC_ALL=<span class="string">"zh_CN.UTF-8"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -eux; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">"export LANG=<span class="variable">$LANG</span>"</span> &gt; /etc/profile.d/locale.sh;</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h1 id="附：Dockerfile"><a href="#附：Dockerfile" class="headerlink" title="附：Dockerfile"></a>附：Dockerfile</h1><h2 id="OpenJ9-full"><a href="#OpenJ9-full" class="headerlink" title="OpenJ9-full"></a>OpenJ9-full</h2><ul>
<li>本地编译适配，修改URL等</li>
<li>替换语言环境变量为中文</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.11</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> Gsealy &lt;gsealy@outlook.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> LANG=<span class="string">"zh_CN.UTF-8"</span> LC_ALL=<span class="string">"zh_CN.UTF-8"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">'s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g'</span> /etc/apk/repositories \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk add --no-cache --virtual .build-deps curl binutils \</span></span><br><span class="line"><span class="bash">    &amp;&amp; GLIBC_VER=<span class="string">"2.31-r0"</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; URL_PREFIX=<span class="string">"http://10.20.61.27:8887"</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; GCC_LIBS_URL=<span class="string">"<span class="variable">$&#123;URL_PREFIX&#125;</span>/gcc-libs-9.1.0-2-x86_64.pkg.tar.xz"</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; ZLIB_URL=<span class="string">"<span class="variable">$&#123;URL_PREFIX&#125;</span>/zlib-1_1.2.11-3-x86_64.pkg.tar.xz"</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -LfsS <span class="variable">$&#123;URL_PREFIX&#125;</span>/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -LfsS <span class="variable">$&#123;URL_PREFIX&#125;</span>/glibc-<span class="variable">$&#123;GLIBC_VER&#125;</span>.apk &gt; /tmp/glibc-<span class="variable">$&#123;GLIBC_VER&#125;</span>.apk \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk add --no-cache /tmp/glibc-<span class="variable">$&#123;GLIBC_VER&#125;</span>.apk \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -LfsS <span class="variable">$&#123;URL_PREFIX&#125;</span>/glibc-bin-<span class="variable">$&#123;GLIBC_VER&#125;</span>.apk &gt; /tmp/glibc-bin-<span class="variable">$&#123;GLIBC_VER&#125;</span>.apk \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk add --no-cache /tmp/glibc-bin-<span class="variable">$&#123;GLIBC_VER&#125;</span>.apk \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -Ls <span class="variable">$&#123;URL_PREFIX&#125;</span>/glibc-i18n-<span class="variable">$&#123;GLIBC_VER&#125;</span>.apk &gt; /tmp/glibc-i18n-<span class="variable">$&#123;GLIBC_VER&#125;</span>.apk \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk add --no-cache /tmp/glibc-i18n-<span class="variable">$&#123;GLIBC_VER&#125;</span>.apk \</span></span><br><span class="line"><span class="bash">    &amp;&amp; /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 <span class="string">"<span class="variable">$LANG</span>"</span> || <span class="literal">true</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"export LANG=<span class="variable">$LANG</span>"</span> &gt; /etc/profile.d/locale.sh \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -LfsS <span class="variable">$&#123;GCC_LIBS_URL&#125;</span> -o /tmp/gcc-libs.tar.xz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mkdir /tmp/gcc \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar -xf /tmp/gcc-libs.tar.xz -C /tmp/gcc \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mv /tmp/gcc/usr/lib/libgcc* /tmp/gcc/usr/lib/libstdc++* /usr/glibc-compat/lib \</span></span><br><span class="line"><span class="bash">    &amp;&amp; strip /usr/glibc-compat/lib/libgcc_s.so.* /usr/glibc-compat/lib/libstdc++.so* \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -LfsS <span class="variable">$&#123;ZLIB_URL&#125;</span> -o /tmp/libz.tar.xz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mkdir /tmp/libz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar -xf /tmp/libz.tar.xz -C /tmp/libz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mv /tmp/libz/usr/lib/libz.so* /usr/glibc-compat/lib \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk del --purge .build-deps glibc-i18n \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /tmp/*.apk /tmp/gcc /tmp/gcc-libs.tar.xz /tmp/libz /tmp/libz.tar.xz /var/cache/apk/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_VERSION jdk-<span class="number">11.0</span>.<span class="number">7</span>+<span class="number">10</span>_openj9-<span class="number">0.20</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -eux; \</span></span><br><span class="line"><span class="bash">    sed -i <span class="string">'s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g'</span> /etc/apk/repositories; \</span></span><br><span class="line"><span class="bash">    URL_PREFIX=<span class="string">"http://10.20.61.27:8887"</span>; \</span></span><br><span class="line"><span class="bash">    apk add --no-cache --virtual .fetch-deps curl; \</span></span><br><span class="line"><span class="bash">    curl -LfsSo /tmp/openjdk.tar.gz <span class="variable">$&#123;URL_PREFIX&#125;</span>/OpenJDK11U-jdk_x64_linux_openj9_11.0.7_10_openj9-0.20.0.tar.gz ; \</span></span><br><span class="line"><span class="bash">    mkdir -p /opt/java/openjdk; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">cd</span> /opt/java/openjdk; \</span></span><br><span class="line"><span class="bash">    tar -xf /tmp/openjdk.tar.gz --strip-components=1; \</span></span><br><span class="line"><span class="bash">    apk del --purge .fetch-deps; \</span></span><br><span class="line"><span class="bash">    rm -rf /var/cache/apk/*; \</span></span><br><span class="line"><span class="bash">    rm -rf /tmp/openjdk.tar.gz;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=/opt/java/openjdk \</span><br><span class="line">    PATH=<span class="string">"/opt/java/openjdk/bin:$PATH"</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_TOOL_OPTIONS=<span class="string">"-XX:+IgnoreUnrecognizedVMOptions -XX:+UseContainerSupport -XX:+IdleTuningCompactOnIdle -XX:+IdleTuningGcOnIdle"</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"jshell"</span>]</span></span><br></pre></td></tr></table></figure>

<h2 id="Openj9-slim"><a href="#Openj9-slim" class="headerlink" title="Openj9-slim"></a>Openj9-slim</h2><ul>
<li>包括full所有修改</li>
<li>使用<code>jlink</code>精简jdk</li>
<li>设定时区为<code>Asia/shanghai</code></li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11.0</span>-openj9 as deps</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -eux; \</span></span><br><span class="line"><span class="bash">    jlink --no-header-files --no-man-pages --compress=0 --strip-debug \</span></span><br><span class="line"><span class="bash">    --add-modules java.base,java.logging,jdk.unsupported \</span></span><br><span class="line"><span class="bash">    --output /opt/openjdk/jre;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.11</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> Gsealy &lt;gsealy@outlook.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> LANG=<span class="string">"zh_CN.UTF-8"</span> LC_ALL=<span class="string">"zh_CN.UTF-8"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=deps /opt/openjdk/jre /opt/openjdk/jre</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">'s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g'</span> /etc/apk/repositories \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk add --no-cache --virtual .build-deps curl binutils \</span></span><br><span class="line"><span class="bash">    &amp;&amp; GLIBC_VER=<span class="string">"2.31-r0"</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; URL_PREFIX=<span class="string">"http://10.20.61.27:8887"</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; GCC_LIBS_URL=<span class="string">"<span class="variable">$&#123;URL_PREFIX&#125;</span>/gcc-libs-9.1.0-2-x86_64.pkg.tar.xz"</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; ZLIB_URL=<span class="string">"<span class="variable">$&#123;URL_PREFIX&#125;</span>/zlib-1_1.2.11-3-x86_64.pkg.tar.xz"</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -LfsS <span class="variable">$&#123;URL_PREFIX&#125;</span>/sgerrand.rsa.pub -o /etc/apk/keys/sgerrand.rsa.pub \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -LfsS <span class="variable">$&#123;URL_PREFIX&#125;</span>/glibc-<span class="variable">$&#123;GLIBC_VER&#125;</span>.apk &gt; /tmp/glibc-<span class="variable">$&#123;GLIBC_VER&#125;</span>.apk \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk add --no-cache /tmp/glibc-<span class="variable">$&#123;GLIBC_VER&#125;</span>.apk \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -LfsS <span class="variable">$&#123;URL_PREFIX&#125;</span>/glibc-bin-<span class="variable">$&#123;GLIBC_VER&#125;</span>.apk &gt; /tmp/glibc-bin-<span class="variable">$&#123;GLIBC_VER&#125;</span>.apk \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk add --no-cache /tmp/glibc-bin-<span class="variable">$&#123;GLIBC_VER&#125;</span>.apk \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -Ls <span class="variable">$&#123;URL_PREFIX&#125;</span>/glibc-i18n-<span class="variable">$&#123;GLIBC_VER&#125;</span>.apk &gt; /tmp/glibc-i18n-<span class="variable">$&#123;GLIBC_VER&#125;</span>.apk \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk add --no-cache /tmp/glibc-i18n-<span class="variable">$&#123;GLIBC_VER&#125;</span>.apk \</span></span><br><span class="line"><span class="bash">    &amp;&amp; /usr/glibc-compat/bin/localedef --force --inputfile POSIX --charmap UTF-8 <span class="string">"<span class="variable">$LANG</span>"</span> || <span class="literal">true</span> \</span></span><br><span class="line"><span class="bash">    &amp;&amp; <span class="built_in">echo</span> <span class="string">"export LANG=<span class="variable">$LANG</span>"</span> &gt; /etc/profile.d/locale.sh \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -LfsS <span class="variable">$&#123;GCC_LIBS_URL&#125;</span> -o /tmp/gcc-libs.tar.xz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mkdir /tmp/gcc \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar -xf /tmp/gcc-libs.tar.xz -C /tmp/gcc \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mv /tmp/gcc/usr/lib/libgcc* /tmp/gcc/usr/lib/libstdc++* /usr/glibc-compat/lib \</span></span><br><span class="line"><span class="bash">    &amp;&amp; strip /usr/glibc-compat/lib/libgcc_s.so.* /usr/glibc-compat/lib/libstdc++.so* \</span></span><br><span class="line"><span class="bash">    &amp;&amp; curl -LfsS <span class="variable">$&#123;ZLIB_URL&#125;</span> -o /tmp/libz.tar.xz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mkdir /tmp/libz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar -xf /tmp/libz.tar.xz -C /tmp/libz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; mv /tmp/libz/usr/lib/libz.so* /usr/glibc-compat/lib \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apk del --purge .build-deps glibc-i18n \</span></span><br><span class="line"><span class="bash">    &amp;&amp; rm -rf /tmp/*.apk /tmp/gcc /tmp/gcc-libs.tar.xz /tmp/libz /tmp/libz.tar.xz /var/cache/apk/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -eux; \</span></span><br><span class="line"><span class="bash">    sed -i <span class="string">'s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g'</span> /etc/apk/repositories; \</span></span><br><span class="line"><span class="bash">    apk add --no-cache --virtual .build-deps binutils tzdata; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">"export LANG=<span class="variable">$LANG</span>"</span> &gt; /etc/profile.d/locale.sh; \</span></span><br><span class="line"><span class="bash">    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">"Asia/Shanghai"</span> &gt; /etc/timezone; \</span></span><br><span class="line"><span class="bash">    apk del tzdata .build-deps;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=/opt/openjdk/jre \</span><br><span class="line">    PATH=/opt/openjdk/jre/bin:$PATH</span><br><span class="line"><span class="keyword">ENV</span> JAVA_TOOL_OPTIONS=<span class="string">"-XX:+IgnoreUnrecognizedVMOptions -XX:+UseContainerSupport -XX:+IdleTuningCompactOnIdle -XX:+IdleTuningGcOnIdle"</span></span><br></pre></td></tr></table></figure>

<h2 id="Hotspot-slim"><a href="#Hotspot-slim" class="headerlink" title="Hotspot-slim"></a>Hotspot-slim</h2><p>Alpine官方已经提供apk，直接精简就可以了</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.11</span> as deps</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -eux; \</span></span><br><span class="line"><span class="bash">    sed -i <span class="string">'s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g'</span> /etc/apk/repositories; \</span></span><br><span class="line"><span class="bash">    apk --no-cache add openjdk11-jdk openjdk11-jmods; \</span></span><br><span class="line"><span class="bash">    /usr/lib/jvm/java-11-openjdk/bin/jlink --no-header-files --no-man-pages --compress=0 --strip-debug \</span></span><br><span class="line"><span class="bash">    --add-modules java.base,java.logging,jdk.unsupported \</span></span><br><span class="line"><span class="bash">    --output /opt/openjdk/jre;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> alpine:<span class="number">3.11</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> Gsealy &lt;gsealy@outlook.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> LANG=<span class="string">"zh_CN.UTF-8"</span> LC_ALL=<span class="string">"zh_CN.UTF-8"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=deps /opt/openjdk/jre /opt/openjdk/jre</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">set</span> -eux; \</span></span><br><span class="line"><span class="bash">    sed -i <span class="string">'s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g'</span> /etc/apk/repositories; \</span></span><br><span class="line"><span class="bash">    apk add --no-cache --virtual .build-deps binutils tzdata; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">"export LANG=<span class="variable">$LANG</span>"</span> &gt; /etc/profile.d/locale.sh; \</span></span><br><span class="line"><span class="bash">    cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">"Asia/Shanghai"</span> &gt; /etc/timezone; \</span></span><br><span class="line"><span class="bash">    apk del tzdata .build-deps;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME=/opt/openjdk/jre \</span><br><span class="line">    PATH=<span class="string">"/opt/openjdk/jre/lib:/opt/openjdk/jre/bin:$PATH"</span></span><br></pre></td></tr></table></figure>

<p>总结：要是为了镜像大小的话，可以用OpenJDK官方的，因为支持musl-libc，所以会比OpenJ9的小几十MB。</p>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Java</tag>
        <tag>OpenJ9</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10 基于 Hyper-V 安装 Minikube</title>
    <url>/posts/1ef3876c/</url>
    <content><![CDATA[<blockquote>
<p>若相关文件无法下载，可以参考：</p>
<p><a href="https://cloud.189.cn/t/qEnA73VB3aAr（访问码：ukv4）" target="_blank" rel="noopener">https://cloud.189.cn/t/qEnA73VB3aAr（访问码：ukv4）</a></p>
</blockquote>
<h1 id="安装Minikube"><a href="#安装Minikube" class="headerlink" title="安装Minikube"></a>安装Minikube</h1><p>参考<a href="https://yq.aliyun.com/articles/221687" target="_blank" rel="noopener">https://yq.aliyun.com/articles/221687</a> 在Windows10上安装<code>minikube</code></p>
<ol>
<li><p>开启Hyper-V</p>
<p>在 控制面板 - 程序和功能 - 启用或关闭Windows功能 中勾上 Hyper-V，重启设备</p>
</li>
<li><p>下载<code>kubectl</code>和<code>minikube</code></p>
<p>参考<a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-on-windows" target="_blank" rel="noopener">install-kubectl-on-windows</a>下载kubectl</p>
<p>当前的Relsease版是1.9.2，<a href="https://github.com/kubernetes/minikube/releases/tag/v1.9.2" target="_blank" rel="noopener">link</a>。更改文件名为<code>minikube.exe</code></p>
<p>将上面两个文件放在同一个文件夹内，设置全局Path</p>
</li>
<li><p>Hyper-V创建虚拟交换机</p>
<p> 首先应该打开Hyper-V管理器创建一个外部虚拟交换机。</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/minikube/minikube_switch_1.png" alt=""></p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/minikube/minikube_switch_2.png" alt=""></p>
</li>
</ol>
<p>记住这里设置的交换机名称，后面创建minikube时需要使用。例如我图中的就是<code>MiniKubeSwitch</code>. </p>
<ol start="4">
<li><p>安装minikube</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">minikube.exe start --image-mirror-country cn --iso-url&#x3D;https:&#x2F;&#x2F;kubernetes.oss-cn-hangzhou.aliyuncs.com&#x2F;minikube&#x2F;iso&#x2F;minikube-v1.8.0.iso --registry-mirror&#x3D;https:&#x2F;&#x2F;o61gnsy8.mirror.aliyuncs.com --vm-driver&#x3D;&quot;hyperv&quot; --hyperv-virtual-switch&#x3D;&quot;MiniKubeSwitch&quot; --memory&#x3D;4096</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* Microsoft Windows 10 Pro 10.0.18362 Build 18362 上的 minikube v1.9.2</span><br><span class="line">* 根据用户配置使用 hyperv 驱动程序</span><br><span class="line">* 正在下载 VM boot image...</span><br><span class="line">    &gt; minikube-v1.8.0.iso: 173.56 MiB &#x2F; 173.56 MiB [-] 100.00% 7.43 MiB p&#x2F;s 23s</span><br><span class="line">* Starting control plane node m01 in cluster minikube</span><br><span class="line">* Downloading Kubernetes v1.18.0 preload ...</span><br><span class="line">    &gt; preloaded-images-k8s-v2-v1.18.0-docker-overlay2-amd64.tar.lz4: 542.91 MiB</span><br><span class="line">* Creating hyperv VM (CPUs&#x3D;2, Memory&#x3D;4096MB, Disk&#x3D;20000MB) ...</span><br><span class="line">* 找到的网络选项：</span><br><span class="line">  - NO_PROXY&#x3D;192.168.99.100</span><br><span class="line">  - no_proxy&#x3D;192.168.99.100</span><br><span class="line">! This VM is having trouble accessing https:&#x2F;&#x2F;k8s.gcr.io</span><br><span class="line">* To pull new external images, you may need to configure a proxy: https:&#x2F;&#x2F;minikube.sigs.k8s.io&#x2F;docs&#x2F;reference&#x2F;networking&#x2F;proxy&#x2F;</span><br><span class="line">* 正在 Docker 19.03.6 中准备 Kubernetes v1.18.0…</span><br><span class="line">  - env NO_PROXY&#x3D;192.168.99.100</span><br><span class="line">  - env NO_PROXY&#x3D;192.168.99.100</span><br><span class="line">    &gt; kubeadm.sha256: 65 B &#x2F; 65 B [--------------------------] 100.00% ? p&#x2F;s 0s</span><br><span class="line">    &gt; kubelet.sha256: 65 B &#x2F; 65 B [--------------------------] 100.00% ? p&#x2F;s 0s</span><br><span class="line">    &gt; kubectl.sha256: 65 B &#x2F; 65 B [--------------------------] 100.00% ? p&#x2F;s 0s</span><br><span class="line">    &gt; kubeadm: 37.96 MiB &#x2F; 37.96 MiB [-----------] 100.00% 386.80 KiB p&#x2F;s 1m40s&#x2F;s ETA 9m52s</span><br><span class="line">    &gt; kubectl: 41.98 MiB &#x2F; 41.98 MiB [-----------] 100.00% 399.64 KiB p&#x2F;s 1m48s</span><br><span class="line">    &gt; kubelet: 108.01 MiB &#x2F; 108.01 MiB [---------] 100.00% 832.75 KiB p&#x2F;s 2m13s</span><br><span class="line">* Enabling addons: default-storageclass, storage-provisioner</span><br><span class="line">* 完成！kubectl 已经配置至 &quot;minikube&quot;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h1 id="测试Minikube"><a href="#测试Minikube" class="headerlink" title="测试Minikube"></a>测试Minikube</h1><p>通过一个Kubernetes官方示例，启动Nginx来演示minikube的使用</p>
<h2 id="下载Yaml配置"><a href="#下载Yaml配置" class="headerlink" title="下载Yaml配置"></a>下载Yaml配置</h2><p>先下载几个yaml文件，可以直接从官方下载。也可以从我的网盘下载。</p>
<p>官方：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 部署Nginx</span><br><span class="line">https:&#x2F;&#x2F;k8s.io&#x2F;examples&#x2F;application&#x2F;deployment.yaml</span><br><span class="line"># 升级Nginx</span><br><span class="line">https:&#x2F;&#x2F;k8s.io&#x2F;examples&#x2F;application&#x2F;deployment-update.yaml</span><br><span class="line"># 扩容Nginx</span><br><span class="line">https:&#x2F;&#x2F;k8s.io&#x2F;examples&#x2F;application&#x2F;deployment-scale.yaml</span><br></pre></td></tr></table></figure>

<p>也可以用我上传的：</p>
<p><a href="https://cloud.189.cn/t/qEnA73VB3aAr（访问码：ukv4）" target="_blank" rel="noopener">https://cloud.189.cn/t/qEnA73VB3aAr（访问码：ukv4）</a></p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">λ kubectl.exe apply -f deployment.yaml</span><br><span class="line">deployment.apps&#x2F;nginx-deployment created</span><br></pre></td></tr></table></figure>

<p>deployment.yaml文件内容如下，部署脚本主要关注点就是Nginx的版本，后期会对<code>1.14.2</code>这个版本进行升级。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1 # for versions before 1.9.0 use apps&#x2F;v1beta2</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-deployment</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx</span><br><span class="line">  replicas: 2 # tells deployment to run 2 pods matching the template</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx:1.14.2</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure>

<h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">λ kubectl.exe apply -f deployment-update.yaml</span><br><span class="line">deployment.apps&#x2F;nginx-deployment configured</span><br></pre></td></tr></table></figure>

<p>查看nginx-deployment的详情，可以看到StrategyType为RollingUpdate，属于升级操作，而且镜像版本号变为了<code>1.16.1</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">λ kubectl.exe describe deployment nginx-deployment</span><br><span class="line">Name:                   nginx-deployment</span><br><span class="line">Namespace:              default</span><br><span class="line">CreationTimestamp:      Wed, 06 May 2020 11:08:55 +0800</span><br><span class="line">Labels:                 &lt;none&gt;</span><br><span class="line">Annotations:            deployment.kubernetes.io&#x2F;revision: 2</span><br><span class="line">Selector:               app&#x3D;nginx</span><br><span class="line">Replicas:               2 desired | 2 updated | 2 total | 2 available | 0 unavailable</span><br><span class="line">StrategyType:           RollingUpdate</span><br><span class="line">MinReadySeconds:        0</span><br><span class="line">RollingUpdateStrategy:  25% max unavailable, 25% max surge</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:  app&#x3D;nginx</span><br><span class="line">  Containers:</span><br><span class="line">   nginx:</span><br><span class="line">    Image:        nginx:1.16.1</span><br><span class="line">    Port:         80&#x2F;TCP</span><br><span class="line">    Host Port:    0&#x2F;TCP</span><br><span class="line">    Environment:  &lt;none&gt;</span><br><span class="line">    Mounts:       &lt;none&gt;</span><br><span class="line">  Volumes:        &lt;none&gt;</span><br><span class="line">Conditions:</span><br><span class="line">  Type           Status  Reason</span><br><span class="line">  ----           ------  ------</span><br><span class="line">  Available      True    MinimumReplicasAvailable</span><br><span class="line">  Progressing    True    NewReplicaSetAvailable</span><br><span class="line">OldReplicaSets:  &lt;none&gt;</span><br><span class="line">NewReplicaSet:   nginx-deployment-7b45d69949 (2&#x2F;2 replicas created)</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason             Age   From                   Message</span><br><span class="line">  ----    ------             ----  ----                   -------</span><br><span class="line">  Normal  ScalingReplicaSet  110s  deployment-controller  Scaled up replica set nginx-deployment-7b45d69949 to 1</span><br><span class="line">  Normal  ScalingReplicaSet  63s   deployment-controller  Scaled down replica set nginx-deployment-6b474476c4 to 1</span><br><span class="line">  Normal  ScalingReplicaSet  63s   deployment-controller  Scaled up replica set nginx-deployment-7b45d69949 to 2</span><br><span class="line">  Normal  ScalingReplicaSet  53s   deployment-controller  Scaled down replica set nginx-deployment-6b474476c4 to 0</span><br></pre></td></tr></table></figure>

<h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">λ kubectl.exe apply -f deployment-scale.yaml</span><br><span class="line">deployment.apps&#x2F;nginx-deployment configured</span><br></pre></td></tr></table></figure>

<p>查看nginx-deployment的详情，可以看到Replicas变为了4个。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">λ kubectl.exe describe deployment nginx-deployment</span><br><span class="line">Name:                   nginx-deployment</span><br><span class="line">Namespace:              default</span><br><span class="line">CreationTimestamp:      Wed, 06 May 2020 11:08:55 +0800</span><br><span class="line">Labels:                 &lt;none&gt;</span><br><span class="line">Annotations:            deployment.kubernetes.io&#x2F;revision: 3</span><br><span class="line">Selector:               app&#x3D;nginx</span><br><span class="line">Replicas:               4 desired | 4 updated | 4 total | 4 available | 0 unavailable</span><br><span class="line">StrategyType:           RollingUpdate</span><br><span class="line">MinReadySeconds:        0</span><br><span class="line">RollingUpdateStrategy:  25% max unavailable, 25% max surge</span><br><span class="line">Pod Template:</span><br><span class="line">  Labels:  app&#x3D;nginx</span><br><span class="line">  Containers:</span><br><span class="line">   nginx:</span><br><span class="line">    Image:        nginx:1.14.2</span><br><span class="line">    Port:         80&#x2F;TCP</span><br><span class="line">    Host Port:    0&#x2F;TCP</span><br><span class="line">    Environment:  &lt;none&gt;</span><br><span class="line">    Mounts:       &lt;none&gt;</span><br><span class="line">  Volumes:        &lt;none&gt;</span><br><span class="line">Conditions:</span><br><span class="line">  Type           Status  Reason</span><br><span class="line">  ----           ------  ------</span><br><span class="line">  Available      True    MinimumReplicasAvailable</span><br><span class="line">  Progressing    True    NewReplicaSetAvailable</span><br><span class="line">OldReplicaSets:  &lt;none&gt;</span><br><span class="line">NewReplicaSet:   nginx-deployment-6b474476c4 (4&#x2F;4 replicas created)</span><br><span class="line">Events:</span><br><span class="line">  Type    Reason             Age                  From                   Message</span><br><span class="line">  ----    ------             ----                 ----                   -------</span><br><span class="line">  Normal  ScalingReplicaSet  6m22s                deployment-controller  Scaled up replica set nginx-deployment-7b45d69949 to 1</span><br><span class="line">  Normal  ScalingReplicaSet  5m35s                deployment-controller  Scaled down replica set nginx-deployment-6b474476c4 to 1</span><br><span class="line">  Normal  ScalingReplicaSet  5m35s                deployment-controller  Scaled up replica set nginx-deployment-7b45d69949 to 2</span><br><span class="line">  Normal  ScalingReplicaSet  5m25s                deployment-controller  Scaled down replica set nginx-deployment-6b474476c4 to 0</span><br><span class="line">  Normal  ScalingReplicaSet  52s                  deployment-controller  Scaled up replica set nginx-deployment-6b474476c4 to 1</span><br><span class="line">  Normal  ScalingReplicaSet  52s                  deployment-controller  Scaled up replica set nginx-deployment-7b45d69949 to 4</span><br><span class="line">  Normal  ScalingReplicaSet  51s                  deployment-controller  Scaled down replica set nginx-deployment-7b45d69949 to 3</span><br><span class="line">  Normal  ScalingReplicaSet  50s (x2 over 3h17m)  deployment-controller  Scaled up replica set nginx-deployment-6b474476c4 to 2</span><br><span class="line">  Normal  ScalingReplicaSet  35s                  deployment-controller  Scaled down replica set nginx-deployment-7b45d69949 to 2</span><br><span class="line">  Normal  ScalingReplicaSet  17s (x4 over 34s)    deployment-controller  (combined from similar events): Scaled down replica set nginx-deployment-7b45d69949 to 0</span><br></pre></td></tr></table></figure>

<p>🔚</p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>RocketMQ Idle控制导致频繁打印closeChannel问题排查</title>
    <url>/posts/60b156cc/</url>
    <content><![CDATA[<h2 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h2><p>公司内部测试环境RocketMQ经常会打印关闭连接日志，具体如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO closeChannel: close the connection to remote address[xxx] result: true</span><br></pre></td></tr></table></figure>

<p>这是一个INFO级别的日志，我相信阿里最开始写的时候是想监控何时关闭了连接，所以把这个设为了<code>INFO</code>级别，但是因为我们内部使用时日志的吞吐量并不高，尤其是单独测试某一功能时，可能并没有审计日志入库操作。所以会出现连接被关闭的问题。</p>
<p>ps. 此问题不影响业务正常运行，就是看着恶心。</p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>排查方法如下：</p>
<ol>
<li>定位日志具体位置。</li>
<li>尝试屏蔽此日志输出，来达到眼不见心不烦。</li>
<li>尝试定位具体问题，若可以解决就解决该问题。</li>
</ol>
<h3 id="日志具体位置"><a href="#日志具体位置" class="headerlink" title="日志具体位置"></a>日志具体位置</h3><p>经全局搜索，日志是由<code>org.apache.rocketmq.remoting.common.RemotingUtil#closeChannel</code>方法打印的，具体如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeChannel</span><span class="params">(Channel channel)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String addrRemote = RemotingHelper.parseChannelRemoteAddr(channel);</span><br><span class="line">    channel.close().addListener(<span class="keyword">new</span> ChannelFutureListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operationComplete</span><span class="params">(ChannelFuture future)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            log.info(<span class="string">"closeChannel: close the connection to remote address[&#123;&#125;] result: &#123;&#125;"</span>, addrRemote,</span><br><span class="line">               future.isSuccess());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>断点打在上面的方法入口，等待Idle调用，具体调用链如下：</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/rocketmq/close_invoke_line.png" alt=""></p>
<p>可以看到是由<code>IdleStateHandler</code>触发的关闭连接操作。</p>
<p>其实针对Idle的猜测还是因为看了RocketMQ的日志，在<code>namesrv.log</code>日志文件内：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020-04-07 10:59:02 INFO NSScheduledThread1 - configTable SIZE: 0</span><br><span class="line">2020-04-07 11:06:15 WARN NettyServerCodecThread_3 - NETTY SERVER PIPELINE: IDLE exception [127.0.0.1:2414]</span><br><span class="line">2020-04-07 11:06:15 INFO NettyServerNIOSelector_3_3 - closeChannel: close the connection to remote address[127.0.0.1:2414] result: true</span><br><span class="line">2020-04-07 11:06:15 INFO NettyServerCodecThread_3 - NETTY SERVER PIPELINE: channelInactive, the channel[127.0.0.1:2414]</span><br><span class="line">2020-04-07 11:06:15 INFO NettyServerCodecThread_3 - NETTY SERVER PIPELINE: channelUnregistered, the channel[127.0.0.1:2414]</span><br><span class="line">2020-04-07 11:07:06 INFO NettyServerCodecThread_5 - NETTY SERVER PIPELINE: channelRegistered 127.0.0.1:2706</span><br><span class="line">2020-04-07 11:07:06 INFO NettyServerCodecThread_5 - NETTY SERVER PIPELINE: channelActive, the channel[127.0.0.1:2706]</span><br></pre></td></tr></table></figure>

<p>NameSrv因为Idle异常从而关闭了Channel。</p>
<p>本来还有一个疑问，就是Spring默认开的<code>INFO</code>级别的日志，发现就算执行到了，有的info日志也不会打印。发现客户端中可以修改日志的提供者（Provider）,就把提供者改为Slf4j。这样就可以在<code>application.properties</code>中通过<code>log.level</code>控制日志级别了。</p>
<p>通过修改<code>RocketmqRemoting</code>的Log级别为debug，可以看到具体的原因。也就找到了上面的调用链。</p>
<p>ps. 因为这个问题在Spring Binder下通过配置无法修改，所以可以通过关闭<code>RocketmqRemoting</code>日志解决。</p>
<h3 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h3><p>我们知道了是因为Idle监测导致的连接被关闭，所以查找在哪里注册的<code>IdleStateHandler</code>，因为这一功能是Netty提供的。在<code>org.apache.rocketmq.remoting.netty.NettyRemotingClient</code>类中的<code>start()</code>重载方法内，也就是Netty的启动方法 ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pipeline.addLast(</span><br><span class="line">    defaultEventExecutorGroup,</span><br><span class="line">    <span class="keyword">new</span> NettyEncoder(),</span><br><span class="line">    <span class="keyword">new</span> NettyDecoder(),</span><br><span class="line">    <span class="keyword">new</span> IdleStateHandler(<span class="number">0</span>, <span class="number">0</span>, nettyClientConfig.getClientChannelMaxIdleTimeSeconds()), <span class="comment">// pipeline增加IdleHandler</span></span><br><span class="line">    <span class="keyword">new</span> NettyConnectManageHandler(),</span><br><span class="line">    <span class="keyword">new</span> NettyClientHandler());</span><br></pre></td></tr></table></figure>



<p>其会从<code>nettyClientConfig</code>中获取All Idle的空闲时间（All Idle为读写任意idle超时就会触发，详见<code>io.netty.handler.timeout.IdleStateEvent</code>），知道了是从哪里来设置的。那就来看看是哪里设置进去的。</p>
<p><code>NettyClientConfig</code>这个类是在<code>org.apache.rocketmq.remoting.netty</code>包中，会在<code>org.apache.rocketmq.client.impl.factory.MQClientInstance#MQClientInstance()</code>中构建并使用，这个方法无法通过外部配置进行修改。方法内容具体如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="title">MQClientInstance</span><span class="params">(ClientConfig clientConfig, <span class="keyword">int</span> instanceIndex, String clientId, RPCHook rpcHook)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.clientConfig = clientConfig;</span><br><span class="line">	<span class="keyword">this</span>.instanceIndex = instanceIndex;</span><br><span class="line">	<span class="keyword">this</span>.nettyClientConfig = <span class="keyword">new</span> NettyClientConfig(); <span class="comment">// 构建NettyClientConfig对象</span></span><br><span class="line">   	<span class="keyword">this</span>.nettyClientConfig.setClientCallbackExecutorThreads(clientConfig.getClientCallbackExecutorThreads());</span><br><span class="line">	<span class="keyword">this</span>.nettyClientConfig.setUseTLS(clientConfig.isUseTLS());</span><br><span class="line">	<span class="keyword">this</span>.clientRemotingProcessor = <span class="keyword">new</span> ClientRemotingProcessor(<span class="keyword">this</span>);</span><br><span class="line">	<span class="keyword">this</span>.mQClientAPIImpl = <span class="keyword">new</span> MQClientAPIImpl(<span class="keyword">this</span>.nettyClientConfig, <span class="keyword">this</span>.clientRemotingProcessor, rpcHook, clientConfig);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>仅支持两项配置的修改，可以通过本地Merge，也可以通过提起PR进行修改。</p>
<h3 id="问题修复"><a href="#问题修复" class="headerlink" title="问题修复"></a>问题修复</h3><ol>
<li><p>暂时屏蔽</p>
<p>通过屏蔽<code>RocketmqRemoting</code>的日志进行屏蔽，同时也会屏蔽该命名下的其他Log。</p>
</li>
<li><p>一劳永逸</p>
<ul>
<li>可以直接把<code>NettyRemotingClient</code>中的Idle检测删除</li>
<li>可以通过修改<code>ClientConfig</code>和<code>MQClientInstance</code>中对应部分，扩展该方法。同时针对Spring Boot，也可扩展相应的properties配置。</li>
</ul>
</li>
</ol>
<p>🔚</p>
<hr>
]]></content>
      <tags>
        <tag>RocketMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>LDAPS: 必要证书扩展缺失导致SSL连接建立失败解决办法</title>
    <url>/posts/d64ac2e9/</url>
    <content><![CDATA[<blockquote>
<p>2020年4月1日 更新：</p>
<p>解决在OpenJDK11下Spring Boot FatJar抛出<code>ClassNotFoundException</code>的问题。详见<a href="#fix">Spring Boot Fat Jar 运行异常</a></p>
</blockquote>
<h2 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>AD由测试部署在Windows Server 2008上面，服务端证书也是Windows签发的<br>客户端：OpenJDK11（此问题在OpenJDK8+都会出现）</p>
<hr>
<p><strong><em>可以直接跳到后面的<code>解决方案</code>一节查看处理</em></strong></p>
<p>通过SSL连接LDAP时，会抛出如下异常（精简后）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javax.net.ssl|DEBUG|01|main|2020-01-05 13:14:47.338 CST|SSLCipher.java:437|jdk.tls.keyLimits:  entry &#x3D; AES&#x2F;GCM&#x2F;NoPadding KeyUpdate 2^37. AES&#x2F;GCM&#x2F;NOPADDING:KEYUPDATE &#x3D; 137438953472</span><br><span class="line">....省略</span><br><span class="line">Caused by: java.security.cert.CertificateException: No subject alternative names matching IP address 10.20.61.26 found</span><br><span class="line">	at java.base&#x2F;sun.security.util.HostnameChecker.matchIP(HostnameChecker.java:160)</span><br><span class="line">	at java.base&#x2F;sun.security.util.HostnameChecker.match(HostnameChecker.java:96)</span><br><span class="line">	at java.base&#x2F;sun.security.ssl.X509TrustManagerImpl.checkIdentity(X509TrustManagerImpl.java:463)</span><br><span class="line">	at java.base&#x2F;sun.security.ssl.X509TrustManagerImpl.checkIdentity(X509TrustManagerImpl.java:434)</span><br><span class="line">	at java.base&#x2F;sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:233)</span><br><span class="line">	at java.base&#x2F;sun.security.ssl.X509TrustManagerImpl.checkServerTrusted(X509TrustManagerImpl.java:129)</span><br><span class="line">	at java.base&#x2F;sun.security.ssl.CertificateMessage$T12CertificateConsumer.checkServerCerts(CertificateMessage.java:626)</span><br><span class="line">	... 26 more</span><br></pre></td></tr></table></figure>

<p>主要就是因为检查服务端证书的特定扩展失败，证书中没有对应的扩展。<code>LDAPS</code>对应的SSL证书需要验证IP或者DNS扩展才可以</p>
<p>再看下SSL流的追踪</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/protocol/ldaps_wrong_handshake.png" alt=""></p>
<p>最后显示<code>未知证书</code>，同时也印证了上面的异常堆栈信息。从而我们知道是证书出的问题</p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><p>证书检查异常，回过头去翻一下LDAPS的RFC文档，在<a href="https://tools.ietf.org/html/rfc4513#page-9" target="_blank" rel="noopener">RFC4519</a>第3.1.3.服务端身份认证一节，存在三种认证方式：</p>
<ul>
<li>比较DNS</li>
<li>比较IP</li>
<li>比较其他SN类型</li>
</ul>
<p>都是提取Extensions里面的<code>subjectAlternativeName</code>(oid: <code>2.5.29.17</code>)，主要涉及<code>GeneralName</code>的<code>DNSName</code>和<code>iPAddress</code>两种类型。当证书中不存在相应扩展，或者对应扩展的类型有误，都会校验失败</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>重新实现一个<code>SSLSocketFactory</code>，不验证证书等信息即可：</p>
<p>LdapsNoVerifySSLSocketFactory.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyManagementException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> java.security.Security;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertificateException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.X509Certificate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLEngine;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.TrustManager;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.X509ExtendedTrustManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Do not verify cert IP or DNS Extensions.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> &lt;a href="mailto:gsealy@outlook.com"&gt;Gsealy&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LdapsNoVerifySSLSocketFactory</span> <span class="keyword">extends</span> <span class="title">SSLSocketFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Security.setProperty(<span class="string">"ssl.SocketFactory.provider"</span>,</span><br><span class="line">                LdapsNoVerifySSLSocketFactory<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SSLContext sslContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SSLSocketFactory socketFactory;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LdapsNoVerifySSLSocketFactory</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchAlgorithmException, KeyManagementException </span>&#123;</span><br><span class="line">        NoVerificationTrustManager noVerificationTrustManager = <span class="keyword">new</span> NoVerificationTrustManager();</span><br><span class="line">        sslContext = SSLContext.getInstance(<span class="string">"TLS"</span>);</span><br><span class="line">        sslContext.init(<span class="keyword">null</span>, <span class="keyword">new</span> TrustManager[]&#123;noVerificationTrustManager&#125;, <span class="keyword">new</span> SecureRandom());</span><br><span class="line">        socketFactory = sslContext.getSocketFactory();</span><br><span class="line">        SSLContext.setDefault(sslContext);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getDefaultCipherSuites() &#123;</span><br><span class="line">        <span class="keyword">return</span> socketFactory.getDefaultCipherSuites();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getSupportedCipherSuites() &#123;</span><br><span class="line">        <span class="keyword">return</span> socketFactory.getSupportedCipherSuites();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">createSocket</span><span class="params">(Socket s, String host, <span class="keyword">int</span> port, <span class="keyword">boolean</span> autoClose)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> socketFactory.createSocket(s, host, port, autoClose);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">createSocket</span><span class="params">(String host, <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">			SSLSocketFactory socketFactory = sslContext.getSocketFactory();</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.socketFactory.createSocket(host, port);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">createSocket</span><span class="params">(String host, <span class="keyword">int</span> port, InetAddress localHost, <span class="keyword">int</span> localPort)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, UnknownHostException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> socketFactory.createSocket(host, port, localHost, localPort);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">createSocket</span><span class="params">(InetAddress host, <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> socketFactory.createSocket(host, port);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">createSocket</span><span class="params">(InetAddress address, <span class="keyword">int</span> port, InetAddress localAddress,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> localPort)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> socketFactory.createSocket(address, port, localAddress, localPort);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NoVerificationTrustManager</span> <span class="keyword">extends</span> <span class="title">X509ExtendedTrustManager</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] x509Certificates, String authType,</span></span></span><br><span class="line"><span class="function"><span class="params">            Socket socket)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] x509Certificates, String authType,</span></span></span><br><span class="line"><span class="function"><span class="params">            SSLEngine engine)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] x509Certificates, String authType,</span></span></span><br><span class="line"><span class="function"><span class="params">            Socket socket)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] x509Certificates, String authType,</span></span></span><br><span class="line"><span class="function"><span class="params">            SSLEngine engine)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] x509Certificates, String s)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] x509Certificates, String s)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JNDI连接LDAP示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.ldap.InitialLdapContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.ldap.LdapContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.directory.api.ldap.model.constants.JndiPropertyConstants;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.ldap.LdapCtxFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LdapsJNDITest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hashtable&lt;String, String&gt; env = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">        String ldapURL = <span class="string">"ldaps://10.20.61.26:636"</span>;</span><br><span class="line">        String adminName = <span class="string">"CN=Administrator,CN=Users,DC=aaa,DC=com"</span>;</span><br><span class="line">        String adminPassword = <span class="string">"11111111"</span>;</span><br><span class="line">        env.put(Context.INITIAL_CONTEXT_FACTORY, LdapCtxFactory<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">        env.put(Context.SECURITY_PRINCIPAL, adminName);</span><br><span class="line">        env.put(Context.SECURITY_CREDENTIALS, adminPassword);</span><br><span class="line">        env.put(JndiPropertyConstants.JNDI_FACTORY_SOCKET, LdapsNoVerifySSLSocketFactory<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;env.put(Context.PROVIDER_URL, ldapURL);</span><br><span class="line">			LdapContext ctx = <span class="keyword">new</span> InitialLdapContext(env, <span class="keyword">null</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (NamingException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="附：JNDI-LDAP连接流程"><a href="#附：JNDI-LDAP连接流程" class="headerlink" title="附：JNDI LDAP连接流程"></a>附：JNDI LDAP连接流程</h2><p>先创建一个配置的Map，这里用的是<code>HashTable</code>，因为上下文初始化的方法签名是<code>hashtable</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化的方法签名</span></span><br><span class="line">javax.naming.InitialContext#InitialContext(java.util.Hashtable&lt;?,?&gt;)</span><br></pre></td></tr></table></figure>

<p>若选择LDAPS，最少需要如下参数</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化上下文工厂类, javax内部类</span></span><br><span class="line"><span class="meta">Context.INITIAL_CONTEXT_FACTORY</span>=<span class="string">LdapCtxFactory.class.getName()</span></span><br><span class="line"><span class="comment"># 用户名</span></span><br><span class="line"><span class="attr">Context.SECURITY_PRINCIPAL</span></span><br><span class="line"><span class="comment"># 口令</span></span><br><span class="line"><span class="attr">Context.SECURITY_CREDENTIALS</span></span><br><span class="line"><span class="comment"># SSL Socket工厂类</span></span><br><span class="line"><span class="attr">JndiPropertyConstants.JNDI_FACTORY_SOCKET</span></span><br><span class="line"><span class="comment"># ldaps地址</span></span><br><span class="line"><span class="attr">Context.PROVIDER_URL</span></span><br></pre></td></tr></table></figure>

<p>其他参数都是可以不传，因为内部有相应的判断，可以省去部分的配置，如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// LdapCtx.java L2723-2742</span></span><br><span class="line"><span class="keyword">if</span> (envprops != <span class="keyword">null</span>) &#123;</span><br><span class="line">	user = (String)envprops.get(Context.SECURITY_PRINCIPAL);</span><br><span class="line">	passwd = envprops.get(Context.SECURITY_CREDENTIALS);</span><br><span class="line">	ver = (String)envprops.get(VERSION);</span><br><span class="line">	<span class="comment">// 这里的useSsl全局变量是在前面就已经判断过了，先判断链接，也就是&#123;@code Context.PROVIDER_URL&#125;的scheme是什么，如果是ldaps，就会使用ssl;</span></span><br><span class="line">    <span class="comment">// 还存在冗余判断，当端口号是636时，默认也使用SSL</span></span><br><span class="line">	secProtocol =</span><br><span class="line">		useSsl ? <span class="string">"ssl"</span> : (String)envprops.get(Context.SECURITY_PROTOCOL);</span><br><span class="line">	socketFactory = (String)envprops.get(SOCKET_FACTORY);</span><br><span class="line">	authMechanism =</span><br><span class="line">		(String)envprops.get(Context.SECURITY_AUTHENTICATION);</span><br><span class="line">	usePool = <span class="string">"true"</span>.equalsIgnoreCase((String)envprops.get(ENABLE_POOL));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当&#123;@code JndiPropertyConstants.JNDI_FACTORY_SOCKET&#125;没有配置，且使用SSL时，使用默认Sun的SSL</span></span><br><span class="line"><span class="keyword">if</span> (socketFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">	socketFactory =</span><br><span class="line">	<span class="string">"ssl"</span>.equals(secProtocol) ? DEFAULT_SSL_FACTORY : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 身份认证方式， 通过判断是否有用户名来确定</span></span><br><span class="line"><span class="keyword">if</span> (authMechanism == <span class="keyword">null</span>) &#123;</span><br><span class="line">	authMechanism = (user == <span class="keyword">null</span>) ? <span class="string">"none"</span> : <span class="string">"simple"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在创建SSLSocket时，是在<code>Connection.java</code>中，方法签名如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.sun.jndi.ldap.Connection#createSocket(String host, int port, String socketFactory,</span><br><span class="line">            <span class="keyword">int</span> connectTimeout)</span><br></pre></td></tr></table></figure>

<p>不能通过OOP的方式建立<code>SSLSocket</code>，因为会通过反射的方式创建SSL</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Connection.java L273-L278</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="comment">// 这里的socketFactory就是我们自定义的socket工厂类</span></span><br><span class="line">Class&lt;? extends SocketFactory&gt; socketFactoryClass =</span><br><span class="line">	(Class&lt;? extends SocketFactory&gt;)Obj.helper.loadClass(socketFactory);</span><br><span class="line"><span class="comment">// 通过反射的方式获取默认的SSL引擎</span></span><br><span class="line">Method getDefault =	socketFactoryClass.getMethod(<span class="string">"getDefault"</span>, <span class="keyword">new</span> Class&lt;?&gt;[]&#123;&#125;);</span><br><span class="line">SocketFactory factory = (SocketFactory) getDefault.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>SSLSocketFactory内会创建默认的SSLSocket，除非我们指定SSLSocketFactory</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SSLSocketFactory L95</span></span><br><span class="line">String clsName = getSecurityProperty(<span class="string">"ssl.SocketFactory.provider"</span>);</span><br><span class="line">... 初始化操作</span><br></pre></td></tr></table></figure>

<p>所以我们在LdapsNoVerifySSLSocketFactory里面通过静态代码块初始化配置了需要加载的类</p>
<h2 id="另一种实现"><a href="#另一种实现" class="headerlink" title="另一种实现"></a>另一种实现</h2><p>所以这里引出另一种实现方式，可以减少代码量。但是耦合度较高，那就是在JNDI初始化前，初始化SSLContext，并设置为默认</p>
<p>注：还是需要NoVerificationTrustManager.class(定义在了LdapsNoVerifySSLSocketFactory内部)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.ldap.InitialLdapContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.ldap.LdapContext;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.TrustManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jndi.ldap.LdapCtxFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.com.LdapsNoVerifySSLSocketFactory.NoVerificationTrustManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LdapsJNDIV2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		NoVerificationTrustManager noVerificationTrustManager = <span class="keyword">new</span> NoVerificationTrustManager();</span><br><span class="line">		SSLContext sslContext = SSLContext.getInstance(<span class="string">"TLS"</span>);</span><br><span class="line">		sslContext.init(<span class="keyword">null</span>, <span class="keyword">new</span> TrustManager[]&#123;noVerificationTrustManager&#125;, <span class="keyword">new</span> SecureRandom());</span><br><span class="line">		SSLContext.setDefault(sslContext);</span><br><span class="line">		Hashtable&lt;String, String&gt; env = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">		String ldapURL = <span class="string">"ldaps://10.20.61.26:636"</span>;</span><br><span class="line">		String adminName = <span class="string">"CN=Administrator,CN=Users,DC=aaa,DC=com"</span>;</span><br><span class="line">		String adminPassword = <span class="string">"11111111"</span>;</span><br><span class="line">		env.put(Context.INITIAL_CONTEXT_FACTORY, LdapCtxFactory<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">		env.put(Context.SECURITY_PRINCIPAL, adminName);</span><br><span class="line">		env.put(Context.SECURITY_CREDENTIALS, adminPassword);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;env.put(Context.PROVIDER_URL, ldapURL);</span><br><span class="line">			LdapContext ctx = <span class="keyword">new</span> InitialLdapContext(env, <span class="keyword">null</span>);</span><br><span class="line">			System.out.println(ctx.getEnvironment());</span><br><span class="line">		&#125; <span class="keyword">catch</span> (NamingException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两种方式都可，选择适合自己的就可以啦！🔚</p>
<h2 id = "fix">[Bug Fix] Spring Boot Fat Jar 运行异常</h2>

<p>抛出问题如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javax.naming.CommunicationException: <span class="number">10.20</span><span class="number">.70</span><span class="number">.72</span>:<span class="number">636</span> [Root exception is java.net.SocketException: java.lang.ClassNotFoundException: io.gsealy.LdapsNoVerifySSLSocketFactory]</span><br><span class="line">        at java.naming/com.sun.jndi.ldap.Connection.&lt;init&gt;(Connection.java:<span class="number">237</span>)</span><br><span class="line">        at java.naming/com.sun.jndi.ldap.LdapClient.&lt;init&gt;(LdapClient.java:<span class="number">137</span>)</span><br><span class="line">        at java.naming/com.sun.jndi.ldap.LdapClient.getInstance(LdapClient.java:<span class="number">1616</span>)</span><br><span class="line">        at java.naming/com.sun.jndi.ldap.LdapCtx.connect(LdapCtx.java:<span class="number">2752</span>)</span><br><span class="line">        at java.naming/com.sun.jndi.ldap.LdapCtx.&lt;init&gt;(LdapCtx.java:<span class="number">320</span>)</span><br><span class="line">        at java.naming/com.sun.jndi.ldap.LdapCtxFactory.getUsingURL(LdapCtxFactory.java:<span class="number">192</span>)</span><br><span class="line">        at java.naming/com.sun.jndi.ldap.LdapCtxFactory.getUsingURLs(LdapCtxFactory.java:<span class="number">210</span>)</span><br><span class="line">        at java.naming/com.sun.jndi.ldap.LdapCtxFactory.getLdapCtxInstance(LdapCtxFactory.java:<span class="number">153</span>)</span><br><span class="line">        at java.naming/com.sun.jndi.ldap.LdapCtxFactory.getInitialContext(LdapCtxFactory.java:<span class="number">83</span>)</span><br><span class="line">        at java.naming/javax.naming.spi.NamingManager.getInitialContext(NamingManager.java:<span class="number">730</span>)</span><br><span class="line">        at java.naming/javax.naming.InitialContext.getDefaultInitCtx(InitialContext.java:<span class="number">305</span>)</span><br><span class="line">        at java.naming/javax.naming.InitialContext.init(InitialContext.java:<span class="number">236</span>)</span><br><span class="line">        at java.naming/javax.naming.ldap.InitialLdapContext.&lt;init&gt;(InitialLdapContext.java:<span class="number">154</span>)</span><br><span class="line">        at io.gsealy.Test.main(Test.java:<span class="number">39</span>)</span><br><span class="line">        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">        at java.base/java.lang.reflect.Method.invoke(Method.java:<span class="number">566</span>)</span><br><span class="line">        at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:<span class="number">47</span>)</span><br><span class="line">        at org.springframework.boot.loader.Launcher.launch(Launcher.java:<span class="number">86</span>)</span><br><span class="line">        at org.springframework.boot.loader.Launcher.launch(Launcher.java:<span class="number">50</span>)</span><br><span class="line">        at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:<span class="number">51</span>)</span><br><span class="line">Caused by: java.net.SocketException: java.lang.ClassNotFoundException: io.gsealy.LdapsNoVerifySSLSocketFactory</span><br><span class="line">        at java.base/javax.net.ssl.DefaultSSLSocketFactory.throwException(SSLSocketFactory.java:<span class="number">263</span>)</span><br><span class="line">        at java.base/javax.net.ssl.DefaultSSLSocketFactory.createSocket(SSLSocketFactory.java:<span class="number">277</span>)</span><br><span class="line">        at java.naming/com.sun.jndi.ldap.Connection.createSocket(Connection.java:<span class="number">306</span>)</span><br><span class="line">        at java.naming/com.sun.jndi.ldap.Connection.&lt;init&gt;(Connection.java:<span class="number">216</span>)</span><br><span class="line">        ... <span class="number">21</span> more</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: io.gsealy.LdapsNoVerifySSLSocketFactory</span><br><span class="line">        at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:<span class="number">582</span>)</span><br><span class="line">        at java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:<span class="number">178</span>)</span><br><span class="line">        at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">521</span>)</span><br><span class="line">        at java.base/javax.net.ssl.SSLSocketFactory.getDefault(SSLSocketFactory.java:<span class="number">105</span>)</span><br><span class="line">        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">        at java.base/java.lang.reflect.Method.invoke(Method.java:<span class="number">566</span>)</span><br><span class="line">        at java.naming/com.sun.jndi.ldap.Connection.createSocket(Connection.java:<span class="number">278</span>)</span><br><span class="line">        ... <span class="number">22</span> more</span><br></pre></td></tr></table></figure>

<p>首先见到<code>ClassNotFoundException</code>就在想是不是因为类没有打进去，排查后，这种情况不存在。又试了直接打包，运行正常。本以为是Spring Boot在打包Fat Jar时候的锅，因为其特殊的打包方式，改变了正常包位置，比如说我们这里面的<code>io.gsealy.LdapsNoVerifySSLSocketFactory</code>类，其实是放在<code>BOOT-INF/classes/</code>目录下，包名也就改成了<code>BOOT-INF.classes.io.gsealy.LdapsNoVerifySSLSocketFactory</code>，此时我就认为是Spring Boot的锅了。</p>
<p>上面是完整的异常堆栈信息，具体关注这个地方：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">at java.base/javax.net.ssl.DefaultSSLSocketFactory.createSocket(SSLSocketFactory.java:<span class="number">277</span>)</span><br><span class="line">at java.naming/com.sun.jndi.ldap.Connection.createSocket(Connection.java:<span class="number">306</span>)</span><br></pre></td></tr></table></figure>

<p>因为ClassLoader的不同，JNDI在反射创建<code>SSLSocketFactory</code>时，因为安全检查的问题，无法通过反射调用方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Connection.java L273-L278</span></span><br><span class="line">Class&lt;? extends SocketFactory&gt; socketFactoryClass =</span><br><span class="line">		(Class&lt;? extends SocketFactory&gt;)Obj.helper.loadClass(socketFactory);</span><br><span class="line">Method getDefault = socketFactoryClass.getMethod(<span class="string">"getDefault"</span>, <span class="keyword">new</span> Class&lt;?&gt;[]&#123;&#125;);</span><br><span class="line">SocketFactory factory = (SocketFactory) getDefault.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[]&#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>在上面的代码中。会调用<code>getDefault()</code>方法。因为<code>getDefault()</code>是一个静态方法，方法签名如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SocketFactory <span class="title">getDefault</span><span class="params">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>不是重载方法，所以最开始继承<code>SSLSocketFactory</code>的时候，没有修改这个方法实现，他还是会去调用<code>SSLSocketFactory</code>的<code>getDefault()</code>，也就是默认实现。默认实现是不能略过客户端证书验证的。所以会报错。</p>
<p>重新添加<code>getDefault()</code>方法即可，就可以删除静态代码块中的参数绑定了，原来的连接代码也要恢复为正常的，不需要使用<strong>另一种实现</strong>中说的实现。</p>
<p>修改好的文件地址：<a href="https://gist.github.com/Gsealy/e4b7adb21518a259d8a6967301128dbc" target="_blank" rel="noopener">Gist Link</a></p>
<hr>
]]></content>
      <tags>
        <tag>LDAP</tag>
        <tag>workaroud</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Gateway使用进阶</title>
    <url>/posts/71acf729/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Spring Cloud Gateway（下称SCG）涉及几个最近使用上的问题，自己感觉还挺典型的。所以罗列出来。</p>
<ul>
<li>缓存请求体会二次过滤</li>
<li>服务端响应头删除</li>
</ul>
<p>当前环境版本：</p>
<ul>
<li>Spring Boot 2.1.6.RELEASE</li>
<li>Spring Cloud Greenwich.SR3<ul>
<li>对应SCG版本2.1.3.RELEASE</li>
</ul>
</li>
</ul>
<h2 id="缓存请求体会二次过滤"><a href="#缓存请求体会二次过滤" class="headerlink" title="缓存请求体会二次过滤"></a>缓存请求体会二次过滤</h2><blockquote>
<p>这是一个bug，官方已经在2019.10.2修复，但是因为本地环境所限，无法直接升级版本</p>
</blockquote>
<p>SCG就缓存请求体这一需求，社区很早就已经给出了解决方案，但是方案不是很完美。所以经过了几次的修改，我自己使用上，觉得现在的版本用着还可以。</p>
<h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><p>工程详见：<a href="https://gsealy.coding.net/public/error-cache-body/error-cache-body/git/files" target="_blank" rel="noopener">error-cache-body</a></p>
<p>直接下载运行，post请求<code>:8080/post</code>即可，执行：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">http post :<span class="number">8080</span>/post foo=bar</span><br></pre></td></tr></table></figure>

<p>Log如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-11-18 18:07:32.899 TRACE 64684 --- [ctor-http-nio-2] o.s.c.g.f.WeightCalculatorWebFilter      : Weights attr: &#123;&#125;</span><br><span class="line">2019-11-18 18:07:32.913 DEBUG 64684 --- [ctor-http-nio-2] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition httpbin_route applying &#123;_genkey_0&#x3D;&#x2F;post&#125; to Path</span><br><span class="line">2019-11-18 18:07:32.914 DEBUG 64684 --- [ctor-http-nio-2] o.s.c.g.r.RouteDefinitionRouteLocator    : RouteDefinition matched: httpbin_route</span><br><span class="line">2019-11-18 18:07:32.921 TRACE 64684 --- [ctor-http-nio-2] o.s.c.g.h.p.RoutePredicateFactory        : Pattern &quot;&#x2F;post&quot; matches against value &quot;&#x2F;post&quot;</span><br><span class="line">2019-11-18 18:07:32.922 DEBUG 64684 --- [ctor-http-nio-2] o.s.c.g.h.RoutePredicateHandlerMapping   : Route matched: httpbin_route</span><br><span class="line">2019-11-18 18:07:32.922 DEBUG 64684 --- [ctor-http-nio-2] o.s.c.g.h.RoutePredicateHandlerMapping   : Mapping [Exchange: POST http:&#x2F;&#x2F;localhost:8080&#x2F;post] to Route&#123;id&#x3D;&#39;httpbin_route&#39;, uri&#x3D;http:&#x2F;&#x2F;httpbin.org:80, order&#x3D;0, predicate&#x3D;Paths: [&#x2F;post], match trailing slash: true, gatewayFilters&#x3D;[]&#125;</span><br><span class="line">2019-11-18 18:07:32.922 DEBUG 64684 --- [ctor-http-nio-2] o.s.c.g.h.RoutePredicateHandlerMapping   : [0a25a24b] Mapped to org.springframework.cloud.gateway.handler.FilteringWebHandler@54bb8e8f</span><br><span class="line">2019-11-18 18:07:32.924 DEBUG 64684 --- [ctor-http-nio-2] o.s.c.g.handler.FilteringWebHandler      : Sorted gatewayFilterFactories: [[GatewayFilterAdapter&#123;delegate&#x3D;org.springframework.cloud.gateway.filter.RemoveCachedBodyFilter@5a08efdc&#125;, order &#x3D; -2147483648], [GatewayFilterAdapter&#123;delegate&#x3D;io.gsealy.cachebody.filter.CacheRequestGlobalFilter@625dfff3&#125;, order &#x3D; -2147482648], [GatewayFilterAdapter&#123;delegate&#x3D;org.springframework.cloud.gateway.filter.AdaptCachedBodyGlobalFilter@72fd8a3c&#125;, order &#x3D; -2147482648], [GatewayFilterAdapter&#123;delegate&#x3D;io.gsealy.cachebody.filter.AccessLogGlobalFilter@5cf3157b&#125;, order &#x3D; -2147463648], [GatewayFilterAdapter&#123;delegate&#x3D;org.springframework.cloud.gateway.filter.NettyWriteResponseFilter@1e9469b8&#125;, order &#x3D; -1], [GatewayFilterAdapter&#123;delegate&#x3D;org.springframework.cloud.gateway.filter.ForwardPathFilter@648d0e6d&#125;, order &#x3D; 0], [GatewayFilterAdapter&#123;delegate&#x3D;org.springframework.cloud.gateway.filter.RouteToRequestUrlFilter@57272109&#125;, order &#x3D; 10000], [GatewayFilterAdapter&#123;delegate&#x3D;org.springframework.cloud.gateway.config.GatewayNoLoadBalancerClientAutoConfiguration$NoLoadBalancerClientFilter@17273273&#125;, order &#x3D; 10100], [GatewayFilterAdapter&#123;delegate&#x3D;org.springframework.cloud.gateway.filter.WebsocketRoutingFilter@79e66b2f&#125;, order &#x3D; 2147483646], [GatewayFilterAdapter&#123;delegate&#x3D;org.springframework.cloud.gateway.filter.NettyRoutingFilter@26350ea2&#125;, order &#x3D; 2147483647], [GatewayFilterAdapter&#123;delegate&#x3D;org.springframework.cloud.gateway.filter.ForwardRoutingFilter@59696551&#125;, order &#x3D; 2147483647]]</span><br><span class="line">2019-11-18 18:07:32.942 TRACE 64684 --- [ctor-http-nio-2] o.s.c.g.support.ServerWebExchangeUtils   : retaining body in exchange attribute</span><br><span class="line">2019-11-18 18:07:32.944 TRACE 64684 --- [ctor-http-nio-2] i.g.c.filter.AccessLogGlobalFilter       : access 1 times.</span><br><span class="line">2019-11-18 18:07:32.946 TRACE 64684 --- [ctor-http-nio-2] o.s.c.g.filter.RouteToRequestUrlFilter   : RouteToRequestUrlFilter start</span><br><span class="line">2019-11-18 18:07:33.246 TRACE 64684 --- [ctor-http-nio-6] o.s.c.gateway.filter.NettyRoutingFilter  : outbound route: 6867371b, inbound: [0a25a24b] </span><br><span class="line">2019-11-18 18:07:34.265 TRACE 64684 --- [ctor-http-nio-6] o.s.c.g.filter.NettyWriteResponseFilter  : NettyWriteResponseFilter start inbound: 6867371b, outbound: [0a25a24b] </span><br><span class="line">2019-11-18 18:07:34.276 TRACE 64684 --- [ctor-http-nio-2] i.g.c.filter.AccessLogGlobalFilter       : access 2 times.</span><br><span class="line">2019-11-18 18:07:34.276 TRACE 64684 --- [ctor-http-nio-2] o.s.c.g.filter.RouteToRequestUrlFilter   : RouteToRequestUrlFilter start</span><br><span class="line">2019-11-18 18:07:34.277 TRACE 64684 --- [ctor-http-nio-2] o.s.c.g.filter.NettyWriteResponseFilter  : NettyWriteResponseFilter start inbound: 6867371b, outbound: [0a25a24b] </span><br><span class="line">2019-11-18 18:07:34.279 TRACE 64684 --- [ctor-http-nio-6] o.s.c.g.filter.RemoveCachedBodyFilter    : releasing cached body in exchange attribute</span><br></pre></td></tr></table></figure>

<p>上面的是一个完整的请求，开启了<code>org.springframework.cloud.gateway</code>的<code>trace</code>日志。其中可以看到<code>AccessLogGlobalFilter</code>访问了两次，提取出来，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i.g.c.filter.AccessLogGlobalFilter       : access 1 times.</span><br><span class="line">i.g.c.filter.AccessLogGlobalFilter       : access 2 times.</span><br></pre></td></tr></table></figure>

<p>第二次在请求在走filter的时候，其实第一次的请求已经向后端提交了，所以二次请求无效。对响应内容也没有影响，二次请求不会打印<code>retaining body in exchange attribute</code>，所以可以断定重新过的时候，body被删除或者清空了，所以没有缓存的操作，其他的请求内容就会使用一些<strong>不可变</strong>对象封装请求，例如：请求头会使用<code>org.springframework.http.ReadOnlyHttpHeaders</code>对象封装，无法操作请求Header。</p>
<p>相关Issues：<a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/1315" target="_blank" rel="noopener">gh-1315</a>，PR：<a href="https://github.com/spring-cloud/spring-cloud-gateway/commit/856a2417b6535d54d8f07625dfb48bc5080e87fe" target="_blank" rel="noopener"> 856a2417b6535d54d8f07625dfb48bc5080e87fe </a></p>
<h3 id="问题解析"><a href="#问题解析" class="headerlink" title="问题解析"></a>问题解析</h3><p>官方的PR解决了整个二次请求的问题，<code>This allows the AdaptCahcedBodyGlobalFilter to not worry about handling empty.</code>现在就可以处理空请求体了。可以直接升级到<code>2.2.0.RC2</code>版本来生效，或者直接把相关代码拷贝到当前实现类中即可。下面这个<code>BodyUtils</code>可以拆掉请求体外部封装并转为Map或String等形式，供后面Filter使用。</p>
<p>包含如下方法：</p>
<ul>
<li>BodyUtils#toRaw(DataBuffer body) - 获取body内的String</li>
<li>BodyUtils#toFormDataMap(ServerHttpRequest httpRequest, DataBuffer body) - body转为FormData, 针对content-type为<code>application/x-www-form-urlencoded</code></li>
<li>BodyUtils#cacheRequestBody - 缓存Body，ServerWebExchangeUtils中的完整拷贝</li>
</ul>
<p><strong>NOTE：</strong>Reactive Streams中不推荐做这种转换</p>
<p>地址：<a href="https://gist.github.com/ccb1fe95e03fd854deb53fd4f474d5db" target="_blank" rel="noopener">BodyUtils Gist</a></p>
<h2 id="服务端响应头删除"><a href="#服务端响应头删除" class="headerlink" title="服务端响应头删除"></a>服务端响应头删除</h2><p>在用<code>httpbin.org</code>做报文请求响应测试时，服务端会添加一系列的响应头，比如一些安全请求头，但是网关本身就开了<code>SecureHeader</code>的Filter，会出现重复</p>
<h3 id="问题复现-1"><a href="#问题复现-1" class="headerlink" title="问题复现"></a>问题复现</h3><p>当Body缓存没有修复时，执行不到这一步就会抛出异常，因为二次请求会报针对只读请求头的写操作异常（UnsupportedOperationException），当前问题和Body缓存也无关，可以抛开缓存来看。</p>
<p>工程详见：<a href="https://gsealy.coding.net/public/multi-response-header/multi-response-header/git" target="_blank" rel="noopener">multi-response-header</a></p>
<p>所有配置都在<code>application.properties</code>中，包括：</p>
<ul>
<li>安全头配置 - 全局配置，只开启<code>x-frame-options</code>，值为<code>SAMEORIGIN</code></li>
<li>转发配置 - 转发至httpbin.org</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.cloud.gateway.filter.secure-headers.frame-options</span>=<span class="string">SAMEORIGIN</span></span><br><span class="line"><span class="meta">spring.cloud.gateway.filter.secure-headers.disable</span>=<span class="string">x-xss-protection,strict-transport-security,x-content-type-options,referrer-policy,content-security-policy,x-download-options,x-permitted-cross-domain-policies</span></span><br><span class="line"><span class="meta">spring.cloud.gateway.default-filters</span>=<span class="string">SecureHeaders</span></span><br></pre></td></tr></table></figure>

<p>执行如下请求：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">λ http post :<span class="number">8080</span>/post <span class="literal">-v</span></span><br><span class="line">POST /post HTTP/<span class="number">1.1</span></span><br><span class="line">Accept: */*</span><br><span class="line">Accept<span class="literal">-Encoding</span>: gzip, deflate</span><br><span class="line">Connection: keep<span class="literal">-alive</span></span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">0</span></span><br><span class="line">Host: localhost:<span class="number">8080</span></span><br><span class="line">User<span class="literal">-Agent</span>: HTTPie/<span class="number">1.0</span>.<span class="number">3</span></span><br><span class="line"></span><br><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">Access<span class="literal">-Control</span><span class="literal">-Allow</span><span class="literal">-Credentials</span>: true</span><br><span class="line">Access<span class="literal">-Control</span><span class="literal">-Allow</span><span class="literal">-Origin</span>: *</span><br><span class="line">Content<span class="literal">-Encoding</span>: gzip</span><br><span class="line">Content<span class="literal">-Length</span>: <span class="number">281</span></span><br><span class="line">Content<span class="literal">-Type</span>: application/json</span><br><span class="line">Date: Wed, <span class="number">20</span> Nov <span class="number">2019</span> <span class="number">09</span>:<span class="number">11</span>:<span class="number">38</span> GMT</span><br><span class="line">Referrer<span class="literal">-Policy</span>: no<span class="literal">-referrer</span><span class="literal">-when</span><span class="literal">-downgrade</span></span><br><span class="line">Server: nginx</span><br><span class="line">X<span class="literal">-Content</span><span class="literal">-Type</span><span class="literal">-Options</span>: nosniff</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: SAMEORIGIN</span><br><span class="line">X<span class="literal">-Frame</span><span class="literal">-Options</span>: DENY</span><br><span class="line">X<span class="literal">-XSS</span><span class="literal">-Protection</span>: <span class="number">1</span>; mode=block</span><br></pre></td></tr></table></figure>

<p>可以看上面的响应头，有两个<code>X-Frame-Options</code>安全头，<code>SAMEORIGIN</code>是网关添加的，而<code>DENY</code>是httpbin.org响应的请求头。（可以做一个直接请求httpbin的作为对比）</p>
<h3 id="问题解析-1"><a href="#问题解析-1" class="headerlink" title="问题解析"></a>问题解析</h3><p>这里我们以当前最新的<code>2.1.4.RELEASE</code>版本的SCG为例，<code>SecureHeadersGatewayFilterFactory</code>会在响应前把所需的返回客户端的头写进Exchange的Response中，这不影响Request的发送。但是在处理响应时，会将预先的设置好的头放到完整响应中，具体在<code>NettyRoutingFilter.java</code>的<a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/2f7fc76933a6da43048ac94a39a3db83e417ac6e/spring-cloud-gateway-core/src/main/java/org/springframework/cloud/gateway/filter/NettyRoutingFilter.java#L188" target="_blank" rel="noopener">118行</a>，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NettyRoutingFilter.java</span></span><br><span class="line"></span><br><span class="line">ServerHttpResponse response = exchange.getResponse();</span><br><span class="line">.....</span><br><span class="line"><span class="keyword">if</span> (!filteredResponseHeaders.containsKey(HttpHeaders.TRANSFER_ENCODING)</span><br><span class="line">	&amp;&amp; filteredResponseHeaders.containsKey(HttpHeaders.CONTENT_LENGTH)) &#123;</span><br><span class="line">	response.getHeaders().remove(HttpHeaders.TRANSFER_ENCODING);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exchange.getAttributes().put(CLIENT_RESPONSE_HEADER_NAMES,</span><br><span class="line">	filteredResponseHeaders.keySet());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应头整合</span></span><br><span class="line">response.getHeaders().putAll(filteredResponseHeaders);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Mono.just(res);</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<p>在整合之前，会有一个请求头过滤的操作，包含转发头的过滤等，为了去掉后端发回来的相同头，需要先删除响应中的头。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NettyRoutingFilter.java</span></span><br><span class="line"><span class="comment">// 响应头过滤操作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// make sure headers filters run after setting status so it is</span></span><br><span class="line"><span class="comment">// available in response</span></span><br><span class="line">HttpHeaders filteredResponseHeaders = HttpHeadersFilter</span><br><span class="line">	.filter(getHeadersFilters(), headers, exchange, Type.RESPONSE);</span><br></pre></td></tr></table></figure>

<p>SCG提供了<code>HttpHeadersFilter</code>，用于过滤请求/响应头，先解析一下这个类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpHeadersFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 针对下面的filter方法的封装，主要用于过滤Request请求</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> HttpHeaders <span class="title">filterRequest</span><span class="params">(List&lt;HttpHeadersFilter&gt; filters,</span></span></span><br><span class="line"><span class="function"><span class="params">			ServerWebExchange exchange)</span> </span>&#123;</span><br><span class="line">		HttpHeaders headers = exchange.getRequest().getHeaders();</span><br><span class="line">		<span class="keyword">return</span> filter(filters, headers, exchange, Type.REQUEST);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用java stream的filter做过滤</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> filters header filter集合</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> input 需要过滤的headers</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> exchange ServerWebExchange</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> type 请求/响应，定义在内部枚举类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">	<span class="function"><span class="keyword">static</span> HttpHeaders <span class="title">filter</span><span class="params">(List&lt;HttpHeadersFilter&gt; filters, HttpHeaders input,</span></span></span><br><span class="line"><span class="function"><span class="params">			ServerWebExchange exchange, Type type)</span> </span>&#123;</span><br><span class="line">		HttpHeaders response = input;</span><br><span class="line">		<span class="keyword">if</span> (filters != <span class="keyword">null</span>) &#123;</span><br><span class="line">			HttpHeaders reduce = filters.stream()</span><br><span class="line">					.filter(headersFilter -&gt; headersFilter.supports(type)).reduce(input,</span><br><span class="line">							(headers, filter) -&gt; filter.filter(headers, exchange),</span><br><span class="line">							(httpHeaders, httpHeaders2) -&gt; &#123;</span><br><span class="line">								httpHeaders.addAll(httpHeaders2);</span><br><span class="line">								<span class="keyword">return</span> httpHeaders;</span><br><span class="line">							&#125;);</span><br><span class="line">			<span class="keyword">return</span> reduce;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> response;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 需要实现的自定义逻辑</span></span><br><span class="line"><span class="comment">	 * Filters a set of Http Headers.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> input Http Headers</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> exchange a &#123;<span class="doctag">@link</span> ServerWebExchange&#125; that should be filtered</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> filtered Http Headers</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">HttpHeaders <span class="title">filter</span><span class="params">(HttpHeaders input, ServerWebExchange exchange)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Type type)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> type.equals(Type.REQUEST);</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="keyword">enum</span> Type &#123;</span><br><span class="line">		REQUEST, RESPONSE</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现一个<code>HttpHeadersFilter</code>，加上自定义逻辑就可以了。ps. 如果要操作响应的话，记得实现一下default方法support()，针对安全头过滤的实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除上游响应的安全请求头, 添加网关默认安全请求头</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Gsealy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveSecureHeaderFilter</span> <span class="keyword">implements</span> <span class="title">HttpHeadersFilter</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 可以添加需要删除的安全请求头, 这里只删除X-Frame-Options</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; secureHeaders = <span class="keyword">new</span> HashSet&lt;&gt;(Arrays.asList(<span class="string">"x-frame-options"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpHeaders <span class="title">filter</span><span class="params">(HttpHeaders input, ServerWebExchange exchange)</span> </span>&#123;</span><br><span class="line">        HttpHeaders filtered = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        input.entrySet().stream()</span><br><span class="line">                .filter(entry -&gt; !<span class="keyword">this</span>.secureHeaders.contains(entry.getKey().toLowerCase()))</span><br><span class="line">                .forEach(entry -&gt; filtered.addAll(entry.getKey(), entry.getValue()));</span><br><span class="line">        <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">            log.trace(<span class="string">"filtered headers: &#123;&#125;"</span>, filtered);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filtered;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Type type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type.equals(Type.RESPONSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结束！🔚</p>
<hr>
]]></content>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Gateway</tag>
      </tags>
  </entry>
  <entry>
    <title>根据系统变量修改Log4j2存储位置</title>
    <url>/posts/81f201e1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在某些特定环境下，需要指定<code>log</code>的存储位置，所以在启动前需要动态的更改<code>log.home</code>这一自定义参数， 例：生产环境直接部署jar包，因为<code>log4j2.xml</code>配置文件设置了默认的log存储，需要通过系统参数修改文件位置。位置经查，Log4j是支持部分自定义参数的。</p>
<h1 id="查看官方文档"><a href="#查看官方文档" class="headerlink" title="查看官方文档"></a>查看官方文档</h1><p>在<code>Log4j2</code>的<a href="http://logging.apache.org/log4j/2.x/manual/configuration.html#PropertySubstitution" target="_blank" rel="noopener">Property Substitution</a>一节，有相关描述</p>
<blockquote>
<p>Log4j 2 supports the ability to specify tokens in the configuration as references to properties defined elsewhere. Some of these properties will be resolved when the configuration file is interpreted while others may be passed to components where they will be evaluated at runtime. To accomplish this, Log4j uses variations of <a href="https://commons.apache.org/proper/commons-lang/" target="_blank" rel="noopener">Apache Commons Lang</a>‘s <a href="http://logging.apache.org/log4j/2.x/log4j-core/apidocs/org/apache/logging/log4j/core/lookup/StrSubstitutor.html" target="_blank" rel="noopener">StrSubstitutor</a> and <a href="http://logging.apache.org/log4j/2.x/log4j-core/apidocs/org/apache/logging/log4j/core/lookup/StrLookup.html" target="_blank" rel="noopener">StrLookup</a> classes. In a manner similar to Ant or Maven, this allows variables declared as <code>${name}</code> to be resolved using properties declared in the configuration itself. For example, the following example shows the filename for the rolling file appender being declared as a property.</p>
</blockquote>
<p>基本意思就是可以通过指定的引用标记做属性替换，具体属性如下：</p>
<p>在表中，<code>sys</code>参数能够解决当前问题，按照示例的格式修改配置文件，指定默认的位置是<code>logs</code>文件夹，同时也支持系统参数指定</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span>&gt;</span>$&#123;sys:log.home:-logs&#125;<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后在jar启动的时候通过<code>-D</code>传入即可， 例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; java -jar xxx-fat.jar -Dlog.home&#x3D;newlogs</span><br></pre></td></tr></table></figure>

<p>到同级目录就会看到<code>newlogs</code>目录和其中的log文件</p>
<h1 id="完整模板"><a href="#完整模板" class="headerlink" title="完整模板"></a>完整模板</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">"error"</span>&gt;</span>  <span class="tag">&lt;<span class="name">Properties</span>&gt;</span>    </span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">"error"</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">Properties</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span>&gt;</span>$&#123;sys:log.home:-logs&#125;<span class="tag">&lt;/<span class="name">Property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ERROR_LOG_FILE_NAME"</span>&gt;</span>$&#123;LOG_HOME&#125;/error<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"WARN_LOG_FILE_NAME"</span>&gt;</span>$&#123;LOG_HOME&#125;/warn<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"INFO_LOG_FILE_NAME"</span>&gt;</span>$&#123;LOG_HOME&#125;/info<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"DEBUG_LOG_FILE_NAME"</span>&gt;</span>$&#123;LOG_HOME&#125;/debug<span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"PATTERN"</span>&gt;</span>[%d&#123;yyyy-MM-dd HH:mm:ss&#125;] [%t] %-5p [%c] %L - %m%n<span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">Properties</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">appenders</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span> </span><br><span class="line">      <span class="comment">&lt;!--只接受程序中DEBUG级别的日志进行处理, 下同 --&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"$&#123;PATTERN&#125;"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">Console</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">fileName</span>=<span class="string">"$&#123;DEBUG_LOG_FILE_NAME&#125;.log"</span> <span class="attr">filePattern</span>=<span class="string">"logs/$$&#123;date:yyyy-MM&#125;/debug-%d&#123;yyyy-MM-dd&#125;-%i.log.gz"</span> <span class="attr">name</span>=<span class="string">"RollingFileDebug"</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">Filters</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"INFO"</span> <span class="attr">onMatch</span>=<span class="string">"DENY"</span> <span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span>/&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"$&#123;PATTERN&#125;"</span>/&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">Policies</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"50 MB"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span>  </span><br><span class="line">      <span class="comment">&lt;!-- max:同一文件夹下最多文件数 --&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"10"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">Delete</span> <span class="attr">basePath</span>=<span class="string">"$&#123;LOG_HOME&#125;"</span> <span class="attr">maxDepth</span>=<span class="string">"2"</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">IfFileName</span> <span class="attr">glob</span>=<span class="string">"*/debug*"</span>&gt;</span> </span><br><span class="line">            <span class="comment">&lt;!-- 保存天数 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">IfLastModified</span> <span class="attr">age</span>=<span class="string">"10d"</span>&gt;</span> </span><br><span class="line">              <span class="tag">&lt;<span class="name">IfAny</span>&gt;</span> </span><br><span class="line">                <span class="tag">&lt;<span class="name">IfAccumulatedFileSize</span> <span class="attr">exceeds</span>=<span class="string">"100 MB"</span>/&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">IfAccumulatedFileCount</span> <span class="attr">exceeds</span>=<span class="string">"10"</span>/&gt;</span> </span><br><span class="line">              <span class="tag">&lt;/<span class="name">IfAny</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">IfLastModified</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;/<span class="name">IfFileName</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">Delete</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">DefaultRolloverStrategy</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">fileName</span>=<span class="string">"$&#123;INFO_LOG_FILE_NAME&#125;.log"</span> <span class="attr">filePattern</span>=<span class="string">"logs/$$&#123;date:yyyy-MM&#125;/info-%d&#123;yyyy-MM-dd&#125;-%i.log.gz"</span> <span class="attr">name</span>=<span class="string">"RollingFileInfo"</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">Filters</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"INFO"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"WARN"</span> <span class="attr">onMatch</span>=<span class="string">"DENY"</span> <span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span>/&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"$&#123;PATTERN&#125;"</span>/&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">Policies</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"50 MB"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">fileName</span>=<span class="string">"$&#123;WARN_LOG_FILE_NAME&#125;.log"</span> <span class="attr">filePattern</span>=<span class="string">"logs/$$&#123;date:yyyy-MM&#125;/warn-%d&#123;yyyy-MM-dd&#125;-%i.log.gz"</span> <span class="attr">name</span>=<span class="string">"RollingFileWarn"</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">Filters</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"WARN"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> <span class="attr">onMatch</span>=<span class="string">"DENY"</span> <span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span>/&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"$&#123;PATTERN&#125;"</span>/&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">Policies</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"50 MB"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">fileName</span>=<span class="string">"$&#123;ERROR_LOG_FILE_NAME&#125;.log"</span> <span class="attr">filePattern</span>=<span class="string">"logs/$$&#123;date:yyyy-MM&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log.gz"</span> <span class="attr">name</span>=<span class="string">"RollingFileError"</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"ERROR"</span>/&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"$&#123;PATTERN&#125;"</span>/&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">Policies</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"50 MB"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">loggers</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">includeLocation</span>=<span class="string">"true"</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileInfo"</span>/&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileWarn"</span>/&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileError"</span>/&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileDebug"</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结束！🔚</p>
<hr>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Log4j2</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker重启异常 - 找不到SSL相关文件</title>
    <url>/posts/4cff467a/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天想把一台docker虚机配置一下Log的大小和DNS等信息，在<code>daemon.json</code>配置好以后，重启报错，死活就是起不来了，配置如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://o61gnsy8.mirror.aliyuncs.com"</span>,</span><br><span class="line">	<span class="string">"https://dockerhub.azk8s.cn"</span>,</span><br><span class="line">	<span class="string">"https://reg-mirror.qiniu.com"</span></span><br><span class="line">	],</span><br><span class="line"><span class="attr">"log-driver"</span>:<span class="string">"json-file"</span>,</span><br><span class="line"><span class="attr">"log-opts"</span>: &#123;<span class="attr">"max-size"</span>:<span class="string">"100m"</span>, <span class="attr">"max-file"</span>:<span class="string">"3"</span>&#125;,</span><br><span class="line"><span class="attr">"dns"</span>: [<span class="string">"223.5.5.5"</span>, <span class="string">"223.6.6.6"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h2><p>上面的都不重要，和本次问题无关。当我们重启Docker时，发现启动失败！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@docker04 docker]<span class="comment"># systemctl start docker</span></span><br><span class="line">Job <span class="keyword">for</span> docker.service failed because the control process exited with error code. See <span class="string">"systemctl status docker.service"</span> and <span class="string">"journalctl -xe"</span> <span class="keyword">for</span> details.</span><br><span class="line">[root@docker04 docker]<span class="comment"># systemctl status docker</span></span><br><span class="line">● docker.service - Docker Application Container Engine</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/docker.service; enabled; vendor preset: disabled)</span><br><span class="line">  Drop-In: /etc/systemd/system/docker.service.d</span><br><span class="line">           └─10-machine.conf</span><br><span class="line">   Active: failed (Result: start-limit) since 四 2019-09-05 11:59:13 CST; 1min 6s ago</span><br><span class="line">     Docs: https://docs.docker.com</span><br><span class="line"> Main PID: 3894 (code=exited, status=1/FAILURE)</span><br><span class="line"></span><br><span class="line">9月 05 11:59:11 docker04 systemd[1]: docker.service: main process exited, code=exited, status=1/FAILURE</span><br><span class="line">9月 05 11:59:11 docker04 systemd[1]: Failed to start Docker Application Container Engine.</span><br><span class="line">9月 05 11:59:11 docker04 systemd[1]: Unit docker.service entered failed state.</span><br><span class="line">9月 05 11:59:11 docker04 systemd[1]: docker.service failed.</span><br><span class="line">9月 05 11:59:13 docker04 systemd[1]: docker.service holdoff time over, scheduling restart.</span><br><span class="line">9月 05 11:59:13 docker04 systemd[1]: Stopped Docker Application Container Engine.</span><br><span class="line">9月 05 11:59:13 docker04 systemd[1]: start request repeated too quickly <span class="keyword">for</span> docker.service</span><br><span class="line">9月 05 11:59:13 docker04 systemd[1]: Failed to start Docker Application Container Engine.</span><br><span class="line">9月 05 11:59:13 docker04 systemd[1]: Unit docker.service entered failed state.</span><br><span class="line">9月 05 11:59:13 docker04 systemd[1]: docker.service failed.</span><br></pre></td></tr></table></figure>

<p>这里能看到的问题就是<code>start request repeated too quickly for docker.service</code>，启动请求重复的太快，这关我屁事啊。再去看看推荐的<code>journalctl -xe</code>，下面的应该是一个完整的记录，但是也没有指出什么问题，还是之前的问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9月 05 14:39:36 docker04 systemd[1]: start request repeated too quickly for docker.service</span><br><span class="line">9月 05 14:39:36 docker04 systemd[1]: Failed to start Docker Application Container Engine.</span><br><span class="line">-- Subject: Unit docker.service has failed</span><br><span class="line">-- Defined-By: systemd</span><br><span class="line">-- Support: http:&#x2F;&#x2F;lists.freedesktop.org&#x2F;mailman&#x2F;listinfo&#x2F;systemd-devel</span><br><span class="line">-- </span><br><span class="line">-- Unit docker.service has failed.</span><br><span class="line">-- </span><br><span class="line">-- The result is failed.</span><br><span class="line">9月 05 14:39:36 docker04 systemd[1]: Unit docker.service entered failed state.</span><br><span class="line">9月 05 14:39:36 docker04 systemd[1]: docker.service failed.</span><br><span class="line">9月 05 14:40:01 docker04 systemd[1]: Started Session 28 of user root.</span><br><span class="line">-- Subject: Unit session-28.scope has finished start-up</span><br><span class="line">-- Defined-By: systemd</span><br><span class="line">-- Support: http:&#x2F;&#x2F;lists.freedesktop.org&#x2F;mailman&#x2F;listinfo&#x2F;systemd-devel</span><br><span class="line">-- </span><br><span class="line">-- Unit session-28.scope has finished starting up.</span><br><span class="line">-- </span><br><span class="line">-- The start-up result is done.</span><br></pre></td></tr></table></figure>

<p>这就邪了门了，啥都没有啊，这提示拿到Google一搜，没有一个能解决我的问题的。</p>
<h4 id="第一次尝试：dockerd"><a href="#第一次尝试：dockerd" class="headerlink" title="第一次尝试：dockerd"></a>第一次尝试：dockerd</h4><p>但是有人指出，可以试试用<code>dockerd</code>，那就来试试吧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">... 无关log ...</span><br><span class="line">API listen on &#x2F;var&#x2F;run&#x2F;docker.sock</span><br></pre></td></tr></table></figure>

<p>它就会一直卡在这里，也过不去，尝试了好几次。有时候得强制退出才可以，这时候就得手动去清了下pid了。</p>
<h4 id="第二次尝试：系统日志"><a href="#第二次尝试：系统日志" class="headerlink" title="第二次尝试：系统日志"></a>第二次尝试：系统日志</h4><p>想着还是回到系统日志，看看有没有什么漏下的，又去查了下<code>journalctl</code>的用法，可以显示指定单元的日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">9月 05 14:39:34 docker04 systemd[1]: Stopped Docker Application Container Engine.</span><br><span class="line">9月 05 14:39:34 docker04 systemd[1]: Starting Docker Application Container Engine...</span><br><span class="line">9月 05 14:39:34 docker04 dockerd[4683]: time=<span class="string">"2019-09-05T14:39:34.789689391+08:00"</span> level=info msg=<span class="string">"Starting up"</span></span><br><span class="line">9月 05 14:39:34 docker04 dockerd[4683]: failed to create API server: could not <span class="built_in">read</span> CA certificate <span class="string">"/etc/docker/ca.pem"</span>: open /etc/docker/ca.pem: no such file or directory</span><br><span class="line">9月 05 14:39:34 docker04 systemd[1]: docker.service: main process exited, code=exited, status=1/FAILURE</span><br><span class="line">9月 05 14:39:34 docker04 systemd[1]: Failed to start Docker Application Container Engine.</span><br><span class="line">9月 05 14:39:34 docker04 systemd[1]: Unit docker.service entered failed state.</span><br><span class="line">9月 05 14:39:34 docker04 systemd[1]: docker.service failed.</span><br><span class="line">9月 05 14:39:36 docker04 systemd[1]: docker.service holdoff time over, scheduling restart.</span><br><span class="line">9月 05 14:39:36 docker04 systemd[1]: Stopped Docker Application Container Engine.</span><br><span class="line">9月 05 14:39:36 docker04 systemd[1]: start request repeated too quickly <span class="keyword">for</span> docker.service</span><br><span class="line">9月 05 14:39:36 docker04 systemd[1]: Failed to start Docker Application Container Engine.</span><br><span class="line">9月 05 14:39:36 docker04 systemd[1]: Unit docker.service entered failed state.</span><br><span class="line">9月 05 14:39:36 docker04 systemd[1]: docker.service failed.</span><br></pre></td></tr></table></figure>

<p>欸！在这里发现了我们想要的信息：<code>failed to create API server: could not read CA certificate &quot;/etc/docker/ca.pem&quot;: open /etc/docker/ca.pem: no such file or directory</code></p>
<p>没有SSL的证书和密钥，但是查看了一下别的docker，在同级目录都没有相关文件啊。难道和这个无关？</p>
<h2 id="“死马当活马医”"><a href="#“死马当活马医”" class="headerlink" title="“死马当活马医”"></a>“死马当活马医”</h2><h4 id="证书路径"><a href="#证书路径" class="headerlink" title="证书路径"></a>证书路径</h4><p>突然想起来，之前在做集群的时候，用了三剑客之一的<code>docker-machine</code>，猜测可能是在做远程连接的时候使用的SSL，但是去管理主机一看，不但没有这些文件，连同级目录都没有！</p>
<p>现在起码知道了时因为没有SSL证书和密钥的问题，其实我又去查了如何绕过SSL启动Docker，查半天也没啥进展，还是接着查证书吧。</p>
<p>在<a href="https://forums.docker.com/t/missing-server-pem-file-while-booting-up-docker-host-on-vsphere-using-machine/3757" target="_blank" rel="noopener">Missing server.pem file while booting up docker host on vsphere using machine</a>一贴的回复中，看到了曙光！回复如下：</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/docker/docker-machine.png" alt=""></p>
<p>OK！立马去查看相应的地址，居然被删了！对应主机名的文件夹都没了….</p>
<p>但是其他的机子目录下还是有的，基本内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@manager docker03]# ll</span><br><span class="line">总用量 32</span><br><span class="line">-rw-r--r--. 1 root root 1029 8月   1 18:12 ca.pem</span><br><span class="line">-rw-r--r--. 1 root root 1070 8月   1 18:12 cert.pem</span><br><span class="line">-rw-------. 1 root root 2276 8月   1 18:12 config.json</span><br><span class="line">-rw-------. 1 root root  411 8月   1 18:12 id_ed25519</span><br><span class="line">-rw-------. 1 root root  101 8月   1 18:12 id_ed25519.pub</span><br><span class="line">-rw-------. 1 root root 1679 8月   1 18:12 key.pem</span><br><span class="line">-rw-------. 1 root root 1679 8月   1 18:12 server-key.pem</span><br><span class="line">-rw-r--r--. 1 root root 1107 8月   1 18:12 server.pem</span><br></pre></td></tr></table></figure>

<p>也不知道这个能不能用，死马当活马医吧，直接把所有pem文件都拷贝到docker04（问题机器）的<code>/etc/docker</code>目录下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@docker04 docker]# systemctl reset-failed docker.service </span><br><span class="line">[root@docker04 docker]# systemctl start docker.service</span><br></pre></td></tr></table></figure>

<p>启动成功！</p>
<h4 id="重新添加管理"><a href="#重新添加管理" class="headerlink" title="重新添加管理"></a>重新添加管理</h4><p>重新创新docker04，轻松创建成功。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@manager docker03]<span class="comment"># docker-machine create --driver generic --generic-ip-address=10.20.88.35 docker04</span></span><br><span class="line">Running pre-create checks...</span><br><span class="line">Creating machine...</span><br><span class="line">(docker04) No SSH key specified. Assuming an existing key at the default location.</span><br><span class="line">Waiting <span class="keyword">for</span> machine to be running, this may take a few minutes...</span><br><span class="line">Detecting operating system of created instance...</span><br><span class="line">Waiting <span class="keyword">for</span> SSH to be available...</span><br><span class="line">Detecting the provisioner...</span><br><span class="line">Provisioning with centos...</span><br><span class="line">Copying certs to the <span class="built_in">local</span> machine directory...</span><br><span class="line">Copying certs to the remote machine...</span><br><span class="line">Setting Docker configuration on the remote daemon...</span><br><span class="line">Checking connection to Docker...</span><br><span class="line">Docker is up and running!</span><br><span class="line">To see how to connect your Docker Client to the Docker Engine running on this virtual machine, run: docker-machine env docker04</span><br></pre></td></tr></table></figure>

<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><ol>
<li>针对系统日志的分析不足，当无法从表面的日志查询到有用信息时，需要深入查看具体单元日志。</li>
<li>从大量垃圾信息中，查询到自己想到的信息，不是简简单单的🔍就可以的</li>
</ol>
<p>🔚</p>
<hr>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux配置Let&#39;s Encrypt CA证书</title>
    <url>/posts/ee7a062/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p> 当访问HTTPS网站出现如下两种错误</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.unable to access &#39;your git url&#39;: Peer&#39;s Certificate issuer is not recognized.</span><br><span class="line">2.SSL certificate problem: unable to get local issuer certificate</span><br></pre></td></tr></table></figure>

<p>或者，内网环境<code>Gitlab</code>上了Let’s Encrypt的证书，但是在使用<code>Git</code>or<code>curl</code>等工具访问gitlab时，无法验证证书链。CentOS自带证书没有Let‘s Encrypt的CA证书，需要自己导入。</p>
<p>使用自签证书也可以使用如下方法。</p>
<p><strong>ps.</strong>不推荐采用如下配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global http.sslVerify false</span><br></pre></td></tr></table></figure>

<h3 id="下载CA证书"><a href="#下载CA证书" class="headerlink" title="下载CA证书"></a>下载CA证书</h3><p>我这边使用的证书的根CA是<code>DST Root CA X3</code>，所以去下这个根证签的二级CA：<a href="https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem.txt" target="_blank" rel="noopener">地址</a></p>
<p>地址可以直接下，也可以拷贝下面的PEM格式证书</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIEkjCCA3qgAwIBAgIQCgFBQgAAAVOFc2oLheynCDANBgkqhkiG9w0BAQsFADA&#x2F;</span><br><span class="line">MSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT</span><br><span class="line">DkRTVCBSb290IENBIFgzMB4XDTE2MDMxNzE2NDA0NloXDTIxMDMxNzE2NDA0Nlow</span><br><span class="line">SjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUxldCdzIEVuY3J5cHQxIzAhBgNVBAMT</span><br><span class="line">GkxldCdzIEVuY3J5cHQgQXV0aG9yaXR5IFgzMIIBIjANBgkqhkiG9w0BAQEFAAOC</span><br><span class="line">AQ8AMIIBCgKCAQEAnNMM8FrlLke3cl03g7NoYzDq1zUmGSXhvb418XCSL7e4S0EF</span><br><span class="line">q6meNQhY7LEqxGiHC6PjdeTm86dicbp5gWAf15Gan&#x2F;PQeGdxyGkOlZHP&#x2F;uaZ6WA8</span><br><span class="line">SMx+yk13EiSdRxta67nsHjcAHJyse6cF6s5K671B5TaYucv9bTyWaN8jKkKQDIZ0</span><br><span class="line">Z8h&#x2F;pZq4UmEUEz9l6YKHy9v6Dlb2honzhT+Xhq+w3Brvaw2VFn3EK6BlspkENnWA</span><br><span class="line">a6xK8xuQSXgvopZPKiAlKQTGdMDQMc2PMTiVFrqoM7hD8bEfwzB&#x2F;onkxEz0tNvjj</span><br><span class="line">&#x2F;PIzark5McWvxI0NHWQWM6r6hCm21AvA2H3DkwIDAQABo4IBfTCCAXkwEgYDVR0T</span><br><span class="line">AQH&#x2F;BAgwBgEB&#x2F;wIBADAOBgNVHQ8BAf8EBAMCAYYwfwYIKwYBBQUHAQEEczBxMDIG</span><br><span class="line">CCsGAQUFBzABhiZodHRwOi8vaXNyZy50cnVzdGlkLm9jc3AuaWRlbnRydXN0LmNv</span><br><span class="line">bTA7BggrBgEFBQcwAoYvaHR0cDovL2FwcHMuaWRlbnRydXN0LmNvbS9yb290cy9k</span><br><span class="line">c3Ryb290Y2F4My5wN2MwHwYDVR0jBBgwFoAUxKexpHsscfrb4UuQdf&#x2F;EFWCFiRAw</span><br><span class="line">VAYDVR0gBE0wSzAIBgZngQwBAgEwPwYLKwYBBAGC3xMBAQEwMDAuBggrBgEFBQcC</span><br><span class="line">ARYiaHR0cDovL2Nwcy5yb290LXgxLmxldHNlbmNyeXB0Lm9yZzA8BgNVHR8ENTAz</span><br><span class="line">MDGgL6AthitodHRwOi8vY3JsLmlkZW50cnVzdC5jb20vRFNUUk9PVENBWDNDUkwu</span><br><span class="line">Y3JsMB0GA1UdDgQWBBSoSmpjBH3duubRObemRWXv86jsoTANBgkqhkiG9w0BAQsF</span><br><span class="line">AAOCAQEA3TPXEfNjWDjdGBX7CVW+dla5cEilaUcne8IkCJLxWh9KEik3JHRRHGJo</span><br><span class="line">uM2VcGfl96S8TihRzZvoroed6ti6WqEBmtzw3Wodatg+VyOeph4EYpr&#x2F;1wXKtx8&#x2F;</span><br><span class="line">wApIvJSwtmVi4MFU5aMqrSDE6ea73Mj2tcMyo5jMd6jmeWUHK8so&#x2F;joWUoHOUgwu</span><br><span class="line">X4Po1QYz+3dszkDqMp4fklxBwXRsW10KXzPMTZ+sOPAveyxindmjkW8lGy+QsRlG</span><br><span class="line">PfZ+G6Z6h7mjem0Y+iWlkYcV4PIWL1iwBi8saCbGS5jN2p8M+X+Q7UNKEkROb3N6</span><br><span class="line">KOqkqm57TH2H3eDJAkSnh6&#x2F;DNFu0Qg&#x3D;&#x3D;</span><br><span class="line">-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure>

<p>我们就需要导入上面这个根证书到Linux中</p>
<h3 id="导入CA证书"><a href="#导入CA证书" class="headerlink" title="导入CA证书"></a>导入CA证书</h3><p>复制CA证书到<code>/etc/pki/ca-trust/source/anchors</code>目录下，文件名可以随意取，扩展名以<code>pem</code>结尾，比如我的就如下所示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; &#x2F;etc&#x2F;pki&#x2F;ca-trust&#x2F;source&#x2F;anchors&#x2F;letsx3.pem</span><br></pre></td></tr></table></figure>

<p>然后执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> update-ca-trust</span></span><br></pre></td></tr></table></figure>

<p>当提示没有这条命令时，请安装<code>ca-certificates</code>后，再重试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; yum install ca-certificates -y</span><br></pre></td></tr></table></figure>

<p>现在应该就可以使用了，也可以到<code>/etc/pki/tls/certs</code>目录下，搜索是否已经导入成功，随便证书中一段进行搜索，有返回值即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; grep -rn &quot;uM2VcGfl96S8TihRzZvoroed6ti6WqEBmtzw3Wodatg+VyOeph4EYpr&#x2F;1wXKtx8&#x2F;&quot; *</span><br><span class="line">ca-bundle.crt:56:uM2VcGfl96S8TihRzZvoroed6ti6WqEBmtzw3Wodatg+VyOeph4EYpr&#x2F;1wXKtx8&#x2F;</span><br><span class="line">ca-bundle.trust.crt:57:uM2VcGfl96S8TihRzZvoroed6ti6WqEBmtzw3Wodatg+VyOeph4EYpr&#x2F;1wXKtx8&#x2F;</span><br></pre></td></tr></table></figure>

<p>再去访访问相应的HTTPS网址即可🔚</p>
<hr>
]]></content>
  </entry>
  <entry>
    <title>和Spring Cloud相关的Consul ACL配置</title>
    <url>/posts/ef685081/</url>
    <content><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>基于Spring Cloud构建的应用如果需要跨Agent调用，还需要配置不同的规则，在这里记录下踩坑。</p>
<h2 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h2><p>创建一个应用，起名<code>cloud-service-two</code>， 只需要注册<code>cloud-service-two</code>即可，相关配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">cloud-service-two</span></span><br><span class="line"><span class="meta">spring.cloud.consul.host</span>=<span class="string">10.20.88.35</span></span><br><span class="line"><span class="meta">spring.cloud.consul.port</span>=<span class="string">8500</span></span><br><span class="line"><span class="meta">spring.cloud.consul.discovery.instance-id</span>=<span class="string">$&#123;spring.application.name&#125;-$&#123;spring.cloud.consul.discovery.ip-address&#125;-$&#123;server.port&#125;</span></span><br><span class="line"><span class="meta">spring.cloud.consul.discovery.prefer-ip-address</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">spring.cloud.consul.discovery.acl-token</span>=<span class="string">e0db129f-8123-2b0d-f265-c4a6f19fb850</span></span><br><span class="line"><span class="meta">spring.cloud.consul.discovery.ip-address</span>=<span class="string">10.20.61.24</span></span><br></pre></td></tr></table></figure>

<h2 id="ACL配置"><a href="#ACL配置" class="headerlink" title="ACL配置"></a>ACL配置</h2><ol>
<li>service two 配置</li>
</ol>
<p>因为service需要注册，所以需要Agent的写权限。创建一个<code>services-write</code>的策略</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service &quot;cloud-service-two&quot; &#123; policy &#x3D; &quot;write&quot; &#125;</span><br></pre></td></tr></table></figure>

<p>然后分配token，填写在配置文件里面，这样应用就可以去向Consul注册了</p>
<ol start="2">
<li>service one配置</li>
</ol>
<p><strong>注意</strong>：这里就是踩坑点，本以为给配置对应node和service的<code>read</code>策略就可以，远没有想象的那么简单。</p>
<p>先看下<code>ConsulDiscoveryClient</code>类，当前类会实现<code>DiscoveryClient</code>接口，当有操作需要做服务发现调用时，直接使用这个接口即可。（这里可能理解有误，欢迎指正！），调用关系如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">getInstances() -&gt; addInstancesToList()</span><br></pre></td></tr></table></figure>

<p>通过传入<code>应用名（serviceName）</code>来获取对应服务的IP端口集合，具体代码如下所示:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addInstancesToList</span><span class="params">(List&lt;ServiceInstance&gt; instances, String serviceId,</span></span></span><br><span class="line"><span class="function"><span class="params">			QueryParams queryParams)</span> </span>&#123;</span><br><span class="line">	String aclToken = <span class="keyword">this</span>.properties.getAclToken();</span><br><span class="line">	Response&lt;List&lt;HealthService&gt;&gt; services;</span><br><span class="line">	<span class="keyword">if</span> (StringUtils.hasText(aclToken)) &#123;</span><br><span class="line">		services = <span class="keyword">this</span>.client.getHealthServices(serviceId,                 <span class="comment">// 1</span></span><br><span class="line">							<span class="keyword">this</span>.properties.getDefaultQueryTag(),</span><br><span class="line">							<span class="keyword">this</span>.properties.isQueryPassing(), queryParams, aclToken);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		services = <span class="keyword">this</span>.client.getHealthServices(serviceId,</span><br><span class="line">							<span class="keyword">this</span>.properties.getDefaultQueryTag(),</span><br><span class="line">							<span class="keyword">this</span>.properties.isQueryPassing(), queryParams);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (HealthService service : services.getValue()) &#123;</span><br><span class="line">		String host = findHost(service);</span><br><span class="line">		Map&lt;String, String&gt; metadata = getMetadata(service);</span><br><span class="line">		Boolean secure = <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (metadata.containsKey(<span class="string">"secure"</span>)) &#123;</span><br><span class="line">			secure = Boolean.parseBoolean(metadata.get(<span class="string">"secure"</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		instances.add(<span class="keyword">new</span> DefaultServiceInstance(service.getService().getId(),</span><br><span class="line">							serviceId, host, service.getService().getPort(), secure, metadata));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>1</code>处指出，Spring Cloud是通过健康检查服务（地址：<code>/v1/health/service/:serviceName</code>）去获取当前服务名下注册的所有服务，具体请看：<a href="https://www.consul.io/api/health.html#list-nodes-for-service" target="_blank" rel="noopener">List Nodes for Service接口详解</a></p>
<p>从官方文档可以看到，这里ACL需要<strong>节点可读，服务可读</strong>，所以我们的策略也应该这么去写。（之前就是只给了单独服务的可读权限一直就获取不到），策略如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 安全性低, 所有节点和服务名都可以暴露，基本等同于Mater Token</span><br><span class="line">node_prefix &quot;&quot; &#123; policy &#x3D; &quot;read&quot; &#125;</span><br><span class="line">service_prefix &quot;&quot; &#123; policy &#x3D; &quot;read&quot; &#125;</span><br><span class="line"></span><br><span class="line"># 仅开放相关node和service的可读权限</span><br><span class="line">node &quot;client-node-1&quot; &#123; policy &#x3D; &quot;read&quot; &#125;</span><br><span class="line">service &quot;cloud-service-two&quot; &#123; policy &#x3D; &quot;read&quot; &#125;</span><br></pre></td></tr></table></figure>

<p>使用这个策略生成一个Token，测试一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> http :8500/v1/health/service/cloud-service-two X-Consul-Token:55aacb1b-8d85-0289-8c13-d85c cf55fd2e</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 741</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Thu, 08 Aug 2019 06:18:34 GMT</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Consul-Effective-Consistency: leader</span><br><span class="line">X-Consul-Index: 27007</span><br><span class="line">X-Consul-Knownleader: true</span><br><span class="line">X-Consul-Lastcontact: 0</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        "Checks": [</span><br><span class="line">            &#123;</span><br><span class="line">                "....": "...",</span><br><span class="line">                      .</span><br><span class="line">                      .</span><br><span class="line">                      .</span><br><span class="line">                "....": "...."</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                ....</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        "Node": &#123;</span><br><span class="line">            ....</span><br><span class="line">        &#125;,</span><br><span class="line">        "Service": &#123;</span><br><span class="line">            ....</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>顺利通过！</p>
<h2 id="相关官方文档"><a href="#相关官方文档" class="headerlink" title="相关官方文档"></a>相关官方文档</h2><p>[1] ACL Rules：<a href="https://www.consul.io/docs/acl/acl-rules.html" target="_blank" rel="noopener">https://www.consul.io/docs/acl/acl-rules.html</a></p>
<p>[2] ACL System: <a href="https://www.consul.io/docs/acl/acl-system.html" target="_blank" rel="noopener">https://www.consul.io/docs/acl/acl-system.html</a></p>
<p>[3] Configuration: <a href="https://www.consul.io/docs/agent/options.html" target="_blank" rel="noopener">https://www.consul.io/docs/agent/options.html</a></p>
<p>[4] Authentication: <a href="https://www.consul.io/api/index.html#authentication" target="_blank" rel="noopener">https://www.consul.io/api/index.html#authentication</a></p>
<p>结束！🔚</p>
<hr>
]]></content>
      <tags>
        <tag>ACL</tag>
        <tag>Spring Cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker集群部署Consul 1.5.x</title>
    <url>/posts/2d577c40/</url>
    <content><![CDATA[<blockquote>
<p>前提：</p>
<p>基于esxi, 已经虚出4台Centos 7.6，三台作为Server，一台作为Client。都安装了Docker</p>
</blockquote>
<h1 id="所用环境"><a href="#所用环境" class="headerlink" title="所用环境"></a>所用环境</h1><table>
<thead>
<tr>
<th align="center"></th>
<th align="center">类型</th>
<th align="center">IP</th>
</tr>
</thead>
<tbody><tr>
<td align="center">docker01</td>
<td align="center">Server</td>
<td align="center">10.20.88.32</td>
</tr>
<tr>
<td align="center">docker02</td>
<td align="center">Server</td>
<td align="center">10.20.88.33</td>
</tr>
<tr>
<td align="center">docker03</td>
<td align="center">Server</td>
<td align="center">10.20.88.34</td>
</tr>
<tr>
<td align="center">docker04</td>
<td align="center">Client</td>
<td align="center">10.20.88.35</td>
</tr>
<tr>
<td align="center">本机</td>
<td align="center">Client</td>
<td align="center">10.20.61.24</td>
</tr>
</tbody></table>
<p><code>docker04</code>和本机都拿来做客户端，测试不同Agent间的调用。</p>
<h1 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h1><p>​        首先需要编写一个<code>json</code>格式的配置文件，其实在这里直接用命令行也是可以配置的，就是太过于繁杂。都整理到一个配置文件里面。</p>
<p>不同环境的配置文件有所区别。配置文件具体参数可以查看：<a href="https://www.consul.io/docs/agent/options.html" target="_blank" rel="noopener">地址</a></p>
<ul>
<li>Server端配置文件</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"datacenter"</span>: <span class="string">"beijing"</span>,</span><br><span class="line">  <span class="attr">"data_dir"</span>: <span class="string">"/consul/data"</span>,</span><br><span class="line">  <span class="attr">"log_level"</span>: <span class="string">"INFO"</span>,</span><br><span class="line">  <span class="attr">"bind_addr"</span>: <span class="string">"10.20.88.32"</span>,</span><br><span class="line">  <span class="attr">"node_name"</span>: <span class="string">"server-node-1"</span>,</span><br><span class="line">  <span class="attr">"encrypt"</span>: <span class="string">"O2GZwciIEl13cZxvHmVPuw=="</span>,</span><br><span class="line">  <span class="attr">"server"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"bootstrap_expect"</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">"client_addr"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">  <span class="attr">"retry_join"</span>: [<span class="string">"10.20.88.32"</span>,<span class="string">"10.20.88.33"</span>,<span class="string">"10.20.88.34"</span>],</span><br><span class="line">  <span class="attr">"disable_host_node_id"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"acl"</span> : &#123;</span><br><span class="line">    <span class="attr">"enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"default_policy"</span>: <span class="string">"deny"</span>,</span><br><span class="line">    <span class="attr">"down_policy"</span>: <span class="string">"extend-cache"</span>,</span><br><span class="line">    <span class="attr">"enable_token_persistence"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"tokens"</span>: &#123;</span><br><span class="line">        <span class="attr">"master"</span>: <span class="string">"fc2047f4-6466-42e9-bf55-f36e3217829c"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"disable_update_check"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Client端配置文件</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"datacenter"</span>: <span class="string">"beijing"</span>,</span><br><span class="line">  <span class="attr">"data_dir"</span>: <span class="string">"/consul/data"</span>,</span><br><span class="line">  <span class="attr">"log_level"</span>: <span class="string">"INFO"</span>,</span><br><span class="line">  <span class="attr">"bind_addr"</span>: <span class="string">"10.20.61.24"</span>,</span><br><span class="line">  <span class="attr">"node_name"</span>: <span class="string">"client-node-2"</span>,</span><br><span class="line">  <span class="attr">"encrypt"</span>: <span class="string">"O2GZwciIEl13cZxvHmVPuw=="</span>,</span><br><span class="line">  <span class="attr">"client_addr"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">  <span class="attr">"ui"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"retry_join"</span>: [<span class="string">"10.20.88.32"</span>],</span><br><span class="line">  <span class="attr">"disable_host_node_id"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"acl"</span> : &#123;</span><br><span class="line">    <span class="attr">"enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"down_policy"</span>: <span class="string">"extend-cache"</span>,</span><br><span class="line">    <span class="attr">"enable_token_persistence"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"tokens"</span>: &#123;</span><br><span class="line">        <span class="attr">"master"</span>: <span class="string">"fc2047f4-6466-42e9-bf55-f36e3217829c"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"disable_update_check"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>tip1</strong>. 不同机子只需要修改IP和节点名称即可，其他项都相同</p>
<p><strong>tip2</strong>. Client上有几个参数是不需要配置的，请注意</p>
<h1 id="集群化部署"><a href="#集群化部署" class="headerlink" title="集群化部署"></a>集群化部署</h1><ol>
<li>先在每台机子上创建一个文件夹，作为Consul容器的Volumes，用来存放数据和配置文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> mkdir -p /opt/consul/config</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>docker01~docker03上传Server的配置文件<code>config.json</code>， 启动consul容器</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Server 1</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> docker run -d --name consul-server-1 --rm -v /opt/consul/:/consul/ --hostname consul1 --network host consul:1.5.3 consul agent -config-file=/consul/config/config.json</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Server 2</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> docker run -d --name consul-server-2 --rm -v /opt/consul/:/consul/ --hostname consul2 --network host consul:1.5.3 consul agent -config-file=/consul/config/config.json</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Server 3</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> docker run -d --name consul-server-3 --rm -v /opt/consul/:/consul/ --hostname consul3 --network host consul:1.5.3 consul agent -config-file=/consul/config/config.json</span></span><br></pre></td></tr></table></figure>

<p>这里就指定配置文件地址就可以，不需要大长串的cli配置了，因为有<code>retry_join</code>的配置，所以启动后，会自动加入集群，不需要<code>consul join</code>命令再去手动操作。</p>
<ol start="3">
<li>启动Client</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker04</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> docker run --rm --name client-1 -v /opt/consul/:/consul/ --hostname consul4 --network host consul:1.5.3 consul agent -config-file=/consul/config/config.json</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 本机（无Docker环境）</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> consul.exe agent -config-file=path\to\consul\config\config.json</span></span><br></pre></td></tr></table></figure>

<p>至此，集群启动完成，可能查看log会报警告，暂时先不管，因为此时ACL已经生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[WARN] agent: Coordinate update blocked by ACLs</span><br></pre></td></tr></table></figure>

<h3 id="配置ACL"><a href="#配置ACL" class="headerlink" title="配置ACL"></a>配置ACL</h3><p>Consul官方给了在线学习地址，有能力最好直接看官方教学，我自己实践上可能会有一些区别：<a href="https://learn.hashicorp.com/consul/security-networking/production-acls" target="_blank" rel="noopener">地址</a></p>
<p>ps. 之前google的时候还给了配置过程的摘要，这回就找不到了。。</p>
<p>打开<code>10.20.61.24:8500</code>，选择ACL，先使用Master token登录UI， 就是配置文件里面的<code>fc2047f4-6466-42e9-bf55-f36e3217829c</code></p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/consul/config-ACL.png" alt=""></p>
<p>成功进入以后，可以看到三个tab，分别是tokens、roles、policies。</p>
<ol>
<li>先创建node同步权限</li>
</ol>
<p>创建一个新的权限，命名为<code>agent-token</code>，规则如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node &quot;server-node-1&quot; &#123; policy &#x3D; &quot;write&quot; &#125;</span><br><span class="line">node &quot;server-node-2&quot; &#123; policy &#x3D; &quot;write&quot; &#125;</span><br><span class="line">node &quot;server-node-3&quot; &#123; policy &#x3D; &quot;write&quot; &#125;</span><br><span class="line">node &quot;client-node-1&quot; &#123; policy &#x3D; &quot;write&quot; &#125;</span><br><span class="line">node &quot;client-node-2&quot; &#123; policy &#x3D; &quot;write&quot; &#125;</span><br></pre></td></tr></table></figure>

<p>所有节点都给写权限，也可以写成如下方式，匹配前置字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node_prefix &quot;server-node&quot; &#123; policy &#x3D; &quot;write&quot; &#125;</span><br><span class="line">node_prefix &quot;client-node&quot; &#123; policy &#x3D; &quot;write&quot; &#125;</span><br></pre></td></tr></table></figure>

<p>ps. 这里使用的是consul推荐的<code>HCL</code>格式，也可以使用json格式创建，都可以支持。</p>
<ol start="2">
<li>创建token</li>
</ol>
<p>在token选项卡创建一个新的token，policies选择刚才创建的<code>agent-token</code>权限</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/consul/create-token.png" alt=""> </p>
<ol start="3">
<li>更新任意server节点的配置文件，添加重启或者reload配置</li>
</ol>
<p>复制刚才创建的token</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/consul/ues-token.png" alt=""></p>
<p>添加到配置文件里面，然后重启server，我们这里修改<code>server-node-2</code>的配置，然后重启服务。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"acl" : &#123;</span><br><span class="line">    "enabled": true,</span><br><span class="line">    "default_policy": "deny",</span><br><span class="line">    "down_policy": "extend-cache",</span><br><span class="line">    "enable_token_persistence": true,</span><br><span class="line">    "tokens": &#123;</span><br><span class="line">        "master": "fc2047f4-6466-42e9-bf55-f36e3217829c",</span><br><span class="line">        "agent": "05b0ac2b-89b9-422d-bb9c-5317ced0689e"                  // &lt;---- add</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>更新其他节点的token（使用HTTP API）</li>
</ol>
<p>给每个服务都PUT agent token，注意Header中要存放Master Token，否则不会执行成功的。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl --request PUT \</span><br><span class="line">  --url http://10.20.61.24:8500/v1/agent/token/acl_agent_token \</span><br><span class="line">  --header 'Content-Type: application/json' \</span><br><span class="line">  --header 'X-Consul-Token: fc2047f4-6466-42e9-bf55-f36e3217829c' \</span><br><span class="line">  --data '&#123;"Token": "8b63b7c1-fee3-a0e5-9537-ad981baa447e"&#125;'</span><br></pre></td></tr></table></figure>

<p>执行成功后，会返回一个空响应，但是可以查看log，是否更新成功，会有如下提示，node直接也可以正常同步信息了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[INFO] agent: Updated agent&#39;s ACL token &quot;acl_agent_token&quot;</span><br></pre></td></tr></table></figure>

<p>至此，集群间正常运行！</p>
<p>结束！🔚</p>
<hr>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Consul</tag>
        <tag>ACL</tag>
      </tags>
  </entry>
  <entry>
    <title>内网部署Harbor并启用SSL</title>
    <url>/posts/1d848727/</url>
    <content><![CDATA[<h2 id="申请SSL证书"><a href="#申请SSL证书" class="headerlink" title="申请SSL证书"></a>申请SSL证书</h2><blockquote>
<p>Let’s Encrypt记录了很多的<a href="https://letsencrypt.org/docs/client-options/" target="_blank" rel="noopener">ACME客户端实现</a>，网上搜到的很多帖子都是用的官方推荐的<code>Certbot</code>,我在这里使用的<code>acme.sh</code></p>
</blockquote>
<p>基本的安装和申请查看官方文档就可以。</p>
<p>地址：<a href="https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">🔗安装&amp;申请证书🔗</a></p>
<p>因为我是在阿里云买的域名，所以直接使用DNS模式，申请一个泛域名证书，可以看这个 -&gt; <a href="https://github.com/Neilpang/acme.sh/wiki/dnsapi#11-use-aliyun-domain-api-to-automatically-issue-cert" target="_blank" rel="noopener">🔗阿里云DNS自动申请🔗</a></p>
<p>原文给出的获取access key链接失效，会跳转到RAM（权限控制）页面，也推荐使用子账户的access key去做这个操作。</p>
<ol>
<li><p>登录RAM：<a href="https://ram.console.aliyun.com/overview" target="_blank" rel="noopener">地址</a></p>
</li>
<li><p>创建一个新的用户，获取Access Key</p>
<p>新建用户 -&gt; 填入相关信息，勾选<strong>编程访问</strong> -&gt; 保存Access Key（CSV or 复制）</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/harbor/create-user-1.png" alt=""></p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/harbor/create-user-2.png" alt=""></p>
</li>
<li><p>配置新用户的权限</p>
<p>给当前用户添加<code>管理云解析(DNS)的权限</code>即可，因为需要做DNS验证。</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/harbor/add-dns-ram.png" alt=""></p>
</li>
</ol>
<p><strong>配置Access Key</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export Ali_Key="sdfsdfsdfljlbjkljlkjsdfoiwje"</span><br><span class="line">export Ali_Secret="jlsdflanljkljlfdsaklkjflsa"</span><br></pre></td></tr></table></figure>

<p><strong>申请证书</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --issue --dns dns_ali -d gsealy.net -d *.gsealy.net</span><br></pre></td></tr></table></figure>

<p>申请成功后，CA证书、csr、key、证书和证书链都会在指定目录下。比如我的就在<code>/root/.acme.sh/gsealy.net</code>，申请的同时会自动配置定时任务，到既定时间会更新证书。</p>
<p><strong>复制证书</strong></p>
<p>我的机子不支持验证Let’s Encrypt的证书，所以需要导入CA证书到Docker目录。先通过<code>install-cert</code>复制证书到一个常用目录</p>
<p>注：-d 就是申请的域名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">acme.sh --install-cert -d gsealy.net --install-cert --cert-file /opt/ssl/gsealy.net/gsealy.net.cer --ca-file /opt/ssl/gsealy.net/ca.cer --key-file /opt/ssl/gsealy.net/gsealy.net.key --fullchain-file /opt/ssl/gsealy.net/fullchain.cer</span><br></pre></td></tr></table></figure>

<p>这样就把所有的证书都安装在指定目录了</p>
<h2 id="部署Harbor"><a href="#部署Harbor" class="headerlink" title="部署Harbor"></a>部署Harbor</h2><blockquote>
<p>需要先安装Docker</p>
</blockquote>
<h3 id="首次安装"><a href="#首次安装" class="headerlink" title="首次安装"></a>首次安装</h3><p>直接在Github下载最新的离线安装包，<a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">地址</a></p>
<p><strong>修改harbor.yml</strong></p>
<p>主要是修改hostname和https</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 二级域名，DNS配置A类型解析为内网IP</span></span><br><span class="line"><span class="attr">hostname:</span> <span class="string">harbor.gsealy.net</span></span><br><span class="line"><span class="attr">https:</span></span><br><span class="line">  <span class="comment"># https port for harbor, default is 443</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">  <span class="comment"># The path of cert and key files for nginx</span></span><br><span class="line">  <span class="attr">certificate:</span> <span class="string">/opt/ssl/gsealy.net/gsealy.net.cer</span></span><br><span class="line">  <span class="attr">private_key:</span> <span class="string">/opt/ssl/gsealy.net/gsealy.net.key</span></span><br></pre></td></tr></table></figure>

<p>执行<code>./prepare</code>，然后执行<code>install.sh</code>即可</p>
<p>浏览器访问<code>harbor.gsealy.net</code>，可以看到已经启用https，查看证书也是有效的，证书链也可以显示。</p>
<p>***** 但是在Docker中，需要配置CA证书，否则验证不通过</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost /]# docker login harbor.gsealy.net</span><br><span class="line">Username: xxxxxxx</span><br><span class="line">Password: </span><br><span class="line">Error response from daemon: Get https://harbor.gsealy.net/v2/: x509: certificate signed by unknown authority</span><br></pre></td></tr></table></figure>

<p>此时需要复制CA证书到Docker目录，此种方法不需要重启Docker daemon</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost /]# cp /opt/ssl/gsealy.net/ca.cer /etc/docker/certs.d/harbor.gsealy.net</span><br><span class="line">[root@localhost /]# cp /opt/ssl/gsealy.net/gsealy.net.cer /etc/docker/certs.d/harbor.gsealy.net/</span><br><span class="line">[root@localhost /]# cp /opt/ssl/gsealy.net/gsealy.net.key /etc/docker/certs.d/harbor.gsealy.net/</span><br></pre></td></tr></table></figure>



<h3 id="HTTP升级"><a href="#HTTP升级" class="headerlink" title="HTTP升级"></a>HTTP升级</h3><p><strong>关闭所有运行harbor镜像</strong></p>
<p>ps. 不会删除数据，只是清理镜像</p>
<p>进入到harbor的工作目录（包含docker-compose.yml文件的目录），停止所有harbor运行镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose down -v</span><br></pre></td></tr></table></figure>

<p>可选：<strong>修改daemon.json</strong></p>
<p>若前期使用HTTP，在json中添加了<code>insecure-registries</code>配置，需要删除并重启docker服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例：</span><br><span class="line">&quot;insecure-registries&quot;:[&quot;10.20.90.97:6145&quot;]</span><br></pre></td></tr></table></figure>

<p>按照<strong>首次安装</strong>进行部署</p>
<p>结束！🔚</p>
<hr>
]]></content>
      <tags>
        <tag>Docker</tag>
        <tag>Harbor</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Swarm下Consul多DC部署</title>
    <url>/posts/d3a977f2/</url>
    <content><![CDATA[<p>在前一篇中完成了swarm的搭建和测试，继续使用上一个的overlay网桥。<a href="https://gsealy.github.io/posts/187e5652/" target="_blank" rel="noopener">Docker集群搭建及网络互通配置</a></p>
<h2 id="consul集群"><a href="#consul集群" class="headerlink" title="consul集群"></a>consul集群</h2><p>使用前一个配置好的网卡地址<code>prod-overlay</code></p>
<p>查看一下overlay网卡分配的网段，第一个是网段，第二个是网关</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon consul]<span class="comment"># docker network inspect --format &#123;&#123;.IPAM.Config&#125;&#125; prod-overlay</span></span><br><span class="line">[&#123;10.0.0.0/24  10.0.0.1 map[]&#125;]</span><br></pre></td></tr></table></figure>

<p>直接上compose文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="comment"># 配置此网桥名</span></span><br><span class="line">  <span class="attr">prod-overlay:</span></span><br><span class="line">    <span class="comment"># true表示网桥存在，false代表网桥不存在，启动容器并创建</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">consul1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">consul:1.4.4</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">"consul1"</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">"dc1consul1"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8500</span><span class="string">:8500</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="comment"># 指定overlay的网桥名</span></span><br><span class="line">      <span class="attr">prod-overlay:</span></span><br><span class="line">        <span class="comment"># 需要指定当前镜像的IP</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.10</span></span><br><span class="line">    <span class="comment"># 然后在consul的命令中指定-bind ip, 因为都是内网，所以不用配置-advertise-wan</span></span><br><span class="line">    <span class="comment"># 指定一下数据中心, 也就是现在的VM-1</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">"agent -server -bootstrap-expect 3 -ui -client 0.0.0.0 -bind 10.0.0.10 -node servernode1 -datacenter dc1"</span></span><br><span class="line">  <span class="attr">consul2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">consul:1.4.4</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">"consul2"</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">"dc1consul2"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">prod-overlay:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.11</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">"agent -server -join consul1 -disable-host-node-id -client 0.0.0.0 -bind 10.0.0.11 -node servernode2 -datacenter dc1"</span></span><br><span class="line">    <span class="attr">depends_on:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">consul1</span></span><br><span class="line">  <span class="attr">consul3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">consul:1.4.4</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">"consul3"</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">"dc1consul3"</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">prod-overlay:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.12</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">"agent -server -join consul1 -disable-host-node-id -client 0.0.0.0 -bind 10.0.0.12 -node servernode3 -datacenter dc1"</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">consul1</span></span><br><span class="line">  <span class="attr">consul4:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">consul:1.4.4</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">"consul4"</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">"dc1consul4"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9500</span><span class="string">:8500</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">prod-overlay:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.13</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">"agent -join consul1 -disable-host-node-id -client 0.0.0.0 -bind 10.0.0.13 -node clientnode1 -datacenter dc1"</span></span><br><span class="line">  <span class="attr">consul5:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">consul:1.4.4</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">"consul5"</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">"dc1consul5"</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10500</span><span class="string">:8500</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="attr">prod-overlay:</span></span><br><span class="line">        <span class="attr">ipv4_address:</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.14</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">"agent -join consul1 -disable-host-node-id -client 0.0.0.0 -bind 10.0.0.14 -node clientnode2 -datacenter dc1"</span></span><br></pre></td></tr></table></figure>

<p>在这里是启动了3个Server，2个Client，所有状态正常，可以映射Client端口做服务注册</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/docker/nodes.png" alt=""></p>
<p>在<code>VM-2</code>上，使用相同compose文件，修改数据中心为<code>dc2</code>，更改所有IP就行了。</p>
<p>在任意数据中心的Server上，执行join就可以相互连接了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/ <span class="comment"># consul join -wan 10.0.0.10</span></span><br><span class="line">Successfully joined cluster by contacting 1 nodes.</span><br><span class="line">/ <span class="comment"># consul members -wan</span></span><br><span class="line">Node             Address         Status  Type    Build  Protocol  DC   Segment</span><br><span class="line">servernode1.dc1  10.0.0.10:8302  alive   server  1.4.4  2         dc1  &lt;all&gt;</span><br><span class="line">servernode1.dc2  10.0.0.20:8302  alive   server  1.4.4  2         dc2  &lt;all&gt;</span><br><span class="line">servernode2.dc1  10.0.0.11:8302  alive   server  1.4.4  2         dc1  &lt;all&gt;</span><br><span class="line">servernode2.dc2  10.0.0.21:8302  alive   server  1.4.4  2         dc2  &lt;all&gt;</span><br><span class="line">servernode3.dc1  10.0.0.12:8302  alive   server  1.4.4  2         dc1  &lt;all&gt;</span><br><span class="line">servernode3.dc2  10.0.0.22:8302  alive   server  1.4.4  2         dc2  &lt;all&gt;</span><br></pre></td></tr></table></figure>

<p>访问两个dc任意一个服务端的页面，都可以看到两个dc的信息</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/docker/different-dc.png" alt=""></p>
<p><strong>注：</strong>网际间gossip协议加密后期再考虑</p>
<p>结束！🔚</p>
<hr>
]]></content>
      <tags>
        <tag>consul</tag>
        <tag>swarm</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker集群搭建及网络互通配置</title>
    <url>/posts/187e5652/</url>
    <content><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>现在手头有两个虚机，都内建了docker，但是在搭建<a href="https://www.consul.io/" target="_blank" rel="noopener">consul</a>的时候想试试其多dc的特性，所以就得保证两个docker能互相访问。</p>
<h2 id="创建docker集群"><a href="#创建docker集群" class="headerlink" title="创建docker集群"></a>创建docker集群</h2><p>默认已经分别安装docker，现在docker内置有<code>swarm</code>，直接使用就可以</p>
<p>两台虚机配置如下：</p>
<table>
<thead>
<tr>
<th></th>
<th>VM-1</th>
<th>VM-2</th>
</tr>
</thead>
<tbody><tr>
<td>ip</td>
<td>10.20.30.97</td>
<td>10.20.90.104</td>
</tr>
<tr>
<td>防火墙</td>
<td>关闭</td>
<td>关闭</td>
</tr>
<tr>
<td>selinux</td>
<td>关闭</td>
<td>关闭</td>
</tr>
</tbody></table>
<p>docker版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Client:</span><br><span class="line"> Version:           18.09.5</span><br><span class="line"> API version:       1.39</span><br><span class="line"> Go version:        go1.10.8</span><br><span class="line"> Git commit:        e8ff056</span><br><span class="line"> Built:             Thu Apr 11 04:43:34 2019</span><br><span class="line"> OS&#x2F;Arch:           linux&#x2F;amd64</span><br><span class="line"> Experimental:      false</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.09.5</span><br><span class="line">  API version:      1.39 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.8</span><br><span class="line">  Git commit:       e8ff056</span><br><span class="line">  Built:            Thu Apr 11 04:13:40 2019</span><br><span class="line">  OS&#x2F;Arch:          linux&#x2F;amd64</span><br><span class="line">  Experimental:     false</span><br></pre></td></tr></table></figure>

<h3 id="初始化swarm"><a href="#初始化swarm" class="headerlink" title="初始化swarm"></a>初始化swarm</h3><p>在<code>VM-1</code>上初始化，默认是manager节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon consul]<span class="comment"># docker swarm init</span></span><br><span class="line">Swarm initialized: current node (ggszd5frpg8wt7vfovh229xun) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-3ww9xfy1w8opdd5rcn0a3s4ye3s4evnllyki9kne7oo1dpi2ia-4z7mvmuni39wp2bya7u4cynt8 10.20.90.97:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run <span class="string">'docker swarm join-token manager'</span> and follow the instructions.</span><br></pre></td></tr></table></figure>

<p>然后将上面那个命令粘到<code>VM-2</code>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon consul]<span class="comment"># docker swarm join --token SWMTKN-1-3ww9xfy1w8opdd5rcn0a3s4ye3s4evnllyki9kne7oo1dpi2ia-4z7mvmuni39wp2bya7u4cynt8 10.20.90.97:2377</span></span><br><span class="line">This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure>

<p>添加成功后，就可以看到节点信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon consul]<span class="comment"># docker node ls</span></span><br><span class="line">ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION</span><br><span class="line">ggszd5frpg8wt7vfovh229xun *   bogon               Ready               Active              Leader              18.09.5</span><br><span class="line">sh6tw0eyx9lbei1y8d1vbetps     bogon               Ready               Active                                  18.09.6</span><br></pre></td></tr></table></figure>

<h3 id="创建overlay"><a href="#创建overlay" class="headerlink" title="创建overlay"></a>创建overlay</h3><p>到manager节点上创建attachable的overlay network，名字叫做prod-overlay，同时可以检查网络列表</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon consul]<span class="comment"># docker network create -d overlay --attachable prod-overlay</span></span><br><span class="line">8pa6ndbius26x0j9u9m1sfldw</span><br><span class="line">[root@bogon consul]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">bd80de1917f8        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">4a740c45a02b        docker_gwbridge     bridge              <span class="built_in">local</span></span><br><span class="line">b156a97d7d2d        host                host                <span class="built_in">local</span></span><br><span class="line">8pa6ndbius26        prod-overlay        overlay             swarm</span><br></pre></td></tr></table></figure>

<p>此时在<code>VM-2</code>上是看不到这个网络的，执行完后面的命令会自动添加（？生成）进去</p>
<p>在<code>VM-1</code>上创建容器<code>testc1</code>，挂到<code>prod-overlay</code> network上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon consul]<span class="comment"># docker run --name testc1 --network prod-overlay -itd busybox</span></span><br></pre></td></tr></table></figure>

<p>在<code>VM-2</code>上创建容器<code>testc2</code>，挂到<code>prod-overlay</code> network上：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon consul]<span class="comment"># docker run --name testc2 --network prod-overlay -itd busybox</span></span><br></pre></td></tr></table></figure>

<h3 id="访问验证"><a href="#访问验证" class="headerlink" title="访问验证"></a>访问验证</h3><p>查看<code>VM-2</code>docker的network，现在应该可以查看到了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon consul]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID          NAME                     DRIVER              SCOPE</span><br><span class="line">0c968a179326        bridge                   bridge              <span class="built_in">local</span></span><br><span class="line">26c07c4bd000        host                     host                <span class="built_in">local</span></span><br><span class="line">y6kdngxun2a3        ingress                  overlay             swarm</span><br><span class="line">8pa6ndbius26        prod-overlay             overlay             swarm</span><br></pre></td></tr></table></figure>

<h3 id="互ping测试"><a href="#互ping测试" class="headerlink" title="互ping测试"></a>互ping测试</h3><p><code>VM-1</code>ping<code>VM-2</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon consul]<span class="comment"># docker exec testc1 ping -c 2 testc2</span></span><br><span class="line">PING testc2 (10.0.0.5): 56 data bytes</span><br><span class="line">64 bytes from 10.0.0.5: seq=0 ttl=64 time=0.391 ms</span><br><span class="line">64 bytes from 10.0.0.5: seq=1 ttl=64 time=0.620 ms</span><br><span class="line"></span><br><span class="line">--- testc2 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max = 0.391/0.505/0.620 ms</span><br></pre></td></tr></table></figure>

<p><code>VM-2</code>ping<code>VM-1</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@bogon consul]<span class="comment"># docker exec testc2 ping -c 2 testc1</span></span><br><span class="line">PING testc1 (10.0.0.2): 56 data bytes</span><br><span class="line">64 bytes from 10.0.0.2: seq=0 ttl=64 time=0.402 ms</span><br><span class="line">64 bytes from 10.0.0.2: seq=1 ttl=64 time=0.363 ms</span><br><span class="line"></span><br><span class="line">--- testc1 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 packets received, 0% packet loss</span><br><span class="line">round-trip min/avg/max = 0.363/0.382/0.402 ms</span><br></pre></td></tr></table></figure>



<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://chanjarster.github.io/post/docker-overlay-network/" target="_blank" rel="noopener">一种生产环境Docker Overlay Network的配置方案</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_ad5322e70102x1ex.html" target="_blank" rel="noopener">docker swarm 和compose部署服务，解决跨主机网路问题和ip不固定问题（一）</a></li>
</ol>
<p>结束！🔚</p>
<hr>
]]></content>
      <tags>
        <tag>consul</tag>
        <tag>swarm</tag>
        <tag>docker</tag>
        <tag>cluster</tag>
      </tags>
  </entry>
  <entry>
    <title>SC-Gateway数据可视化监控</title>
    <url>/posts/dcd7d36b/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>想把SC-Gateway的Metrics监控用起来，做到可视化监控。辅助日志监控。但是Spring官方的文档不适合刚上手Grafana的人。自己鼓捣了半天才知道咋整，记录一下。</p>
<blockquote>
<p>当前版本：</p>
<p>Spring Boot：2.1.3.RELEASE</p>
<p>Grafana：6.0.2</p>
<p>Prometheus：2.8.0</p>
</blockquote>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>先要下载Grafana和Prometheus，直接去官网下最新版就行了。docker的话也直接pull least版本就行。</p>
<p>网址：<a href="https://grafana.com/" target="_blank" rel="noopener">Grafana</a> <a href="https://prometheus.io/" target="_blank" rel="noopener">Prometheus</a></p>
<p>Docker: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; docker pull grafana/grafana</span><br><span class="line">&gt; docker pull prom/prometheus</span><br></pre></td></tr></table></figure>

<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>Grafana启动bin目录下的<code>grafana-server</code>，在conf中可以自定义数据库、应用端口等内容，可以自己去看看。</p>
<p>Prometheus直接在根目录启动<code>prometheus</code>即可，也是可以通过<code>prometheus.yml</code>修改配置</p>
<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>Grafana默认访问<code>3000</code>端口，Prometheus默认访问<code>9090</code>端口就能看到网页。</p>
<p>tip. 但Grafana第一次启动需要建库建表可能需要点时间，如果刷新不管用的话，可以在启动的cli中回车一下。</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>1、配置Spring项目</p>
<p>先在pom中添加dependency：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>暴露Endpoint：</p>
<p>ps. 按需暴露端点，在这里图省事就全暴露了</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure>

<p>2、配置Prometheus</p>
<p>修改prometheus.yml文件，就在最后加一个新的job即可，主要关注job_name、metrics_path和targets，分别是任务名，metrics路径和需要监控的IP</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">global:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'prometheus'</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">'/actuator/prometheus'</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['127.0.0.1:12305']</span></span><br></pre></td></tr></table></figure>

<p>重启Prometheus，访问：<a href="http://127.0.0.1:9090/targets" target="_blank" rel="noopener">127.0.0.1:9090/targets</a> 就可以看到端点和状态</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/github/promethea_target.png" alt=""></p>
<p>3、配置Grafana</p>
<p>先访问<a href="http://127.0.0.1:3000/" target="_blank" rel="noopener">http://127.0.0.1:3000</a>，使用默认的账号admin/admin，登录系统，可以改密也可以先跳过，然后就会定位到如下页面，选择Prometheus数据源</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/github/grafana_configuration.png" alt=""></p>
<p>配置数据源，Name要和prometheus.yml中的job_name相同，url就是prometheus的地址，其他不用配置，点击<code>Save&amp;Test</code>，成功的话就可以进行下一步了。</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/github/grafana_datasource.png" alt=""></p>
<p>这里直接使用SC-Gateway提供的json模板，所以不按照步骤进行下一步，直接跳过配置panel。点选import</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/github/grafana_import_1.png" alt=""></p>
<p>模板地址: <a href="https://raw.githubusercontent.com/spring-cloud/spring-cloud-gateway/master/docs/src/main/asciidoc/gateway-grafana-dashboard.json" target="_blank" rel="noopener">link</a></p>
<p>点选配置好的prometheus数据源，选择合适的文件夹导入就可以了</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/github/grafana_import_3.png" alt=""></p>
<p>当你的数据源没有问题的时候，dashboard所有信息都会展示出来。如果有什么东西有问题的话，比如数据源配置有错，就需要重新检查数据源配置。</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/github/grafana_dashboard.png" alt=""></p>
<p>结束！🔚</p>
<hr>
]]></content>
      <tags>
        <tag>Spring Boot 2</tag>
        <tag>Grafana</tag>
        <tag>Prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring 5 WebFlux使用Swagger2作为API管理工具</title>
    <url>/posts/d1dfb98a/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>找了一圈， 大家在Spring boot 2搭配Spring 5使用的时候。还是使用的Spring MVC的形式，没有直接上WebFlux的形式。正巧看到Springfox也发了快照版本支持WebFlux，今儿我就把这些整理一下。</p>
<blockquote>
<p>使用工具和版本：</p>
<p>IntelliJ IDEA 2018.3.5 (Ultimate Edition)</p>
<p>JDK 1.8</p>
<p>Windows 10</p>
<p>Spring boot: 2.1.3.RELEASE</p>
<p>Springfox: 3.0.0.SNAPSHOT</p>
</blockquote>
<h3 id="上手"><a href="#上手" class="headerlink" title="上手"></a>上手</h3><p>可以直接去<a href="https://start.spring.io" target="_blank" rel="noopener">start.spring.io</a>快速构建一个程序，也可以看我的Github：<a href="https://github.com/Gsealy/some-webflux-extensions" target="_blank" rel="noopener">link</a></p>
<h4 id="一、POM"><a href="#一、POM" class="headerlink" title="一、POM"></a>一、POM</h4><p>不去概述<code>Swagger</code>的作用了，直接上手。先在pom中引入以下依赖（需要先添加下Springfox快照所在的maven库）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-spring-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>oss-snapshot<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>OSS Snapshot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://oss.jfrog.org/oss-snapshot-local<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>全部都使用3.0.0的快照版本，因为只有在当前版本支持了WebFlux，包含<code>@EnableSwagger2WebFlux</code>的注解。</p>
<h4 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h4><p>启用swagger，在main方法中添加<code>@EnableSwagger2WebFlux</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableSwagger</span>2WebFlux</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boot2WithSwaggerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(Boot2WithSwaggerApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Configuration</strong></p>
<p>创建一个<code>Docket</code>bean来配置Swagger，一个<code>Docket</code>实例为API配置提供默认设置和便捷的配置方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">swaggerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Docket <span class="title">swaggerApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2).apiInfo(swaggerApiInfo()).select() </span><br><span class="line"> .apis(RequestHandlerSelectors.basePackage(<span class="string">"io.github.gsealy.boot2withswagger.controller"</span>)) </span><br><span class="line">        .paths(PathSelectors.any())</span><br><span class="line">        .build();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">swaggerApiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder().title(<span class="string">"webflux-swagger2 API doc"</span>)</span><br><span class="line">        .description(<span class="string">"how to use this"</span>)</span><br><span class="line">        .termsOfServiceUrl(<span class="string">"https://github.com/Gsealy"</span>)</span><br><span class="line">        .contact(<span class="keyword">new</span> Contact(<span class="string">"Gsealy"</span>, <span class="string">"https://gsealy.github.io"</span>, <span class="string">"gsealy@gmail.com"</span>)) </span><br><span class="line">        .version(<span class="string">"1.0"</span>)</span><br><span class="line">        .build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Controller</strong></p>
<p>在Controller上就可以直接使用Swagger提供的注解了，但是不清楚现在是不是支持Webflux的Handler写法。</p>
<p>下面给了一个包含主要四个HTTP方法的Controller示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/apis"</span>)</span><br><span class="line"><span class="meta">@Api</span>(value = <span class="string">"Swagger test Controller"</span>, description = <span class="string">"learn how to use swagger"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span></span><br><span class="line">  <span class="meta">@ApiOperation</span>(value = <span class="string">"GET Method"</span>, response = String<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">Mono</span>&lt;<span class="title">String</span>&gt; <span class="title">get</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Mono.just(<span class="string">"this is GET Met"</span> + <span class="string">"hod."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping</span></span><br><span class="line">  <span class="meta">@ApiOperation</span>(value = <span class="string">"POST Method"</span>, response = String<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">Mono</span>&lt;<span class="title">String</span>&gt; <span class="title">post</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Mono.just(<span class="string">"this is POST Method."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PutMapping</span></span><br><span class="line">  <span class="meta">@ApiOperation</span>(value = <span class="string">"PUT Method"</span>, response = String<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">Mono</span>&lt;<span class="title">String</span>&gt; <span class="title">put</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Mono.just(<span class="string">"this is PUT Method."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@DeleteMapping</span></span><br><span class="line">  <span class="meta">@ApiOperation</span>(value = <span class="string">"DELETE Method"</span>, response = String<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">Mono</span>&lt;<span class="title">String</span>&gt; <span class="title">delete</span>() </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Mono.just(<span class="string">"this is DELETE Method."</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>启动程序后，访问<code>http://localhost:8080/swagger-ui.html/</code>，看下页面显示</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/spring/swagger-ui.png" alt=""></p>
<p>就是标准的Swagger-ui页面了，具体swagger使用方法可以去官网看看doc</p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p><a href="https://dzone.com/articles/spring-boot-2-restful-api-documentation-with-swagg" target="_blank" rel="noopener">Spring Boot 2 RESTful API Documentation With Swagger 2 Tutorial</a></p>
<p><a href="http://springfox.github.io/springfox/docs/snapshot/" target="_blank" rel="noopener">Springfox Reference Documentation</a></p>
<p>结束！🔚</p>
<hr>
]]></content>
      <tags>
        <tag>WebFlux</tag>
        <tag>Swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA不能更新Spring快照版本</title>
    <url>/posts/4980ebc2/</url>
    <content><![CDATA[<blockquote>
<p>IDEA 版本：IntelliJ IDEA 2018.3.4 (Ultimate Edition)</p>
<p>Maven版本：3.5.2</p>
<p>Java版本：1.8</p>
</blockquote>
<p>注：应该是所有版本都可以试用，但是IDEA的设置页面不保证完全不变。</p>
<p>从<code>Git</code>上克隆了 <code>Spring Cloud Gateway</code>，但是在IDEA里面构建项目的时候犯了难。因为都是快照版本的，拉取不下来。网上找了一圈，都是让勾选下图的<code>Always update snapshots</code>就行了。</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/spring/IDEA-Setting.png" alt=""></p>
<p>但是我勾选之后，再<code>Reimport</code>就好了。但是对于我来说，一点用都没有。</p>
<p>重新查资料以后，我发现，因为没有拉取<code>maven-metadata.xml</code>到本地，所以无法下载jar，使用命令强制更新就好，但是会出Error，不用管它。再去IDEA重新<code>Reimport</code>就可以拉取jar了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; mvn -U</span><br><span class="line">[INFO] Scanning for projects...</span><br><span class="line">Downloading from spring-snapshots: https:&#x2F;&#x2F;repo.spring.io&#x2F;libs-snapshot-local&#x2F;org&#x2F;springframework&#x2F;cloud&#x2F;spring-cloud-build&#x2F;2.0.5.BUILD-SNAPSHOT&#x2F;maven-met</span><br><span class="line">adata.xml</span><br><span class="line">Downloaded from spring-snapshots: https:&#x2F;&#x2F;repo.spring.io&#x2F;libs-snapshot-local&#x2F;org&#x2F;springframework&#x2F;cloud&#x2F;spring-cloud-build&#x2F;2.0.5.BUILD-SNAPSHOT&#x2F;maven-meta</span><br><span class="line">data.xml (636 B at 740 B&#x2F;s)</span><br><span class="line">Downloading from spring-snapshots: https:&#x2F;&#x2F;repo.spring.io&#x2F;libs-snapshot-local&#x2F;org&#x2F;springframework&#x2F;cloud&#x2F;spring-cloud-dependencies-parent&#x2F;2.0.5.BUILD-SNAP</span><br><span class="line">SHOT&#x2F;maven-metadata.xml</span><br><span class="line">Downloaded from spring-snapshots: https:&#x2F;&#x2F;repo.spring.io&#x2F;libs-snapshot-local&#x2F;org&#x2F;springframework&#x2F;cloud&#x2F;spring-cloud-dependencies-parent&#x2F;2.0.5.BUILD-SNAPS</span><br><span class="line">HOT&#x2F;maven-metadata.xml (650 B at 1.3 kB&#x2F;s)</span><br><span class="line">Downloading from spring-snapshots: https:&#x2F;&#x2F;repo.spring.io&#x2F;libs-snapshot-local&#x2F;org&#x2F;springframework&#x2F;cloud&#x2F;spring-cloud-commons-dependencies&#x2F;2.0.1.BUILD-SNA</span><br><span class="line">PSHOT&#x2F;maven-metadata.xml</span><br><span class="line">Downloaded from spring-snapshots: https:&#x2F;&#x2F;repo.spring.io&#x2F;libs-snapshot-local&#x2F;org&#x2F;springframework&#x2F;cloud&#x2F;spring-cloud-commons-dependencies&#x2F;2.0.1.BUILD-SNAP</span><br><span class="line">SHOT&#x2F;maven-metadata.xml (651 B at 1.3 kB&#x2F;s)</span><br><span class="line">Downloading from spring-snapshots: https:&#x2F;&#x2F;repo.spring.io&#x2F;libs-snapshot-local&#x2F;org&#x2F;springframework&#x2F;cloud&#x2F;spring-cloud-dependencies-parent&#x2F;2.0.2.BUILD-SNAP</span><br><span class="line">SHOT&#x2F;maven-metadata.xml</span><br><span class="line">Downloaded from spring-snapshots: https:&#x2F;&#x2F;repo.spring.io&#x2F;libs-snapshot-local&#x2F;org&#x2F;springframework&#x2F;cloud&#x2F;spring-cloud-dependencies-parent&#x2F;2.0.2.BUILD-SNAPS</span><br><span class="line">HOT&#x2F;maven-metadata.xml (650 B at 1.3 kB&#x2F;s)</span><br><span class="line">Downloading from spring-snapshots: https:&#x2F;&#x2F;repo.spring.io&#x2F;libs-snapshot-local&#x2F;org&#x2F;springframework&#x2F;cloud&#x2F;spring-cloud-netflix-dependencies&#x2F;2.0.1.BUILD-SNA</span><br><span class="line">PSHOT&#x2F;maven-metadata.xml</span><br><span class="line">Downloaded from spring-snapshots: https:&#x2F;&#x2F;repo.spring.io&#x2F;libs-snapshot-local&#x2F;org&#x2F;springframework&#x2F;cloud&#x2F;spring-cloud-netflix-dependencies&#x2F;2.0.1.BUILD-SNAP</span><br><span class="line">SHOT&#x2F;maven-metadata.xml (651 B at 1.3 kB&#x2F;s)</span><br><span class="line">Downloading from spring-snapshots: https:&#x2F;&#x2F;repo.spring.io&#x2F;libs-snapshot-local&#x2F;org&#x2F;springframework&#x2F;cloud&#x2F;spring-cloud-dependencies-parent&#x2F;2.0.3.BUILD-SNAP</span><br><span class="line">SHOT&#x2F;maven-metadata.xml</span><br><span class="line">Downloaded from spring-snapshots: https:&#x2F;&#x2F;repo.spring.io&#x2F;libs-snapshot-local&#x2F;org&#x2F;springframework&#x2F;cloud&#x2F;spring-cloud-dependencies-parent&#x2F;2.0.3.BUILD-SNAPS</span><br><span class="line">HOT&#x2F;maven-metadata.xml (650 B at 1.3 kB&#x2F;s)</span><br><span class="line">Downloading from spring-snapshots: https:&#x2F;&#x2F;repo.spring.io&#x2F;libs-snapshot-local&#x2F;org&#x2F;springframework&#x2F;cloud&#x2F;spring-cloud-build-dependencies&#x2F;2.0.5.BUILD-SNAPS</span><br><span class="line">HOT&#x2F;maven-metadata.xml</span><br><span class="line">Downloaded from spring-snapshots: https:&#x2F;&#x2F;repo.spring.io&#x2F;libs-snapshot-local&#x2F;org&#x2F;springframework&#x2F;cloud&#x2F;spring-cloud-build-dependencies&#x2F;2.0.5.BUILD-SNAPSH</span><br><span class="line">OT&#x2F;maven-metadata.xml (649 B at 833 B&#x2F;s)</span><br><span class="line">[WARNING]</span><br><span class="line">[WARNING] Some problems were encountered while building the effective model for org.springframework.cloud:spring-cloud-gateway-core:jar:2.0.3.BUILD-SNAPS</span><br><span class="line">HOT</span><br><span class="line">[WARNING] &#39;build.plugins.plugin.version&#39; for org.apache.maven.plugins:maven-compiler-plugin is missing. @ org.springframework.cloud:spring-cloud-gateway-</span><br><span class="line">core:[unknown-version], D:\Git\spring-cloud-gateway\spring-cloud-gateway-core\pom.xml, line 157, column 12</span><br><span class="line">[WARNING] &#39;build.plugins.plugin.version&#39; for org.jetbrains.kotlin:kotlin-maven-plugin is missing. @ org.springframework.cloud:spring-cloud-gateway-core:[</span><br><span class="line">unknown-version], D:\Git\spring-cloud-gateway\spring-cloud-gateway-core\pom.xml, line 127, column 12</span><br><span class="line">[WARNING]</span><br><span class="line">[WARNING] Some problems were encountered while building the effective model for org.springframework.cloud:spring-cloud-gateway-sample:jar:2.0.3.BUILD-SNA</span><br><span class="line">PSHOT</span><br><span class="line">[WARNING] &#39;build.plugins.plugin.version&#39; for org.apache.maven.plugins:maven-compiler-plugin is missing. @ org.springframework.cloud:spring-cloud-gateway-</span><br><span class="line">sample:[unknown-version], D:\Git\spring-cloud-gateway\spring-cloud-gateway-sample\pom.xml, line 127, column 12</span><br><span class="line">[WARNING] &#39;build.plugins.plugin.version&#39; for org.jetbrains.kotlin:kotlin-maven-plugin is missing. @ org.springframework.cloud:spring-cloud-gateway-sample</span><br><span class="line">:[unknown-version], D:\Git\spring-cloud-gateway\spring-cloud-gateway-sample\pom.xml, line 89, column 12</span><br><span class="line">[WARNING] &#39;build.plugins.plugin.version&#39; for org.apache.maven.plugins:maven-deploy-plugin is missing. @ org.springframework.cloud:spring-cloud-gateway-sa</span><br><span class="line">mple:[unknown-version], D:\Git\spring-cloud-gateway\spring-cloud-gateway-sample\pom.xml, line 162, column 12</span><br><span class="line">[WARNING]</span><br><span class="line">[WARNING] Some problems were encountered while building the effective model for org.springframework.cloud:spring-cloud-gateway-docs:pom:2.0.3.BUILD-SNAPS</span><br><span class="line">HOT</span><br><span class="line">[WARNING] &#39;build.plugins.plugin.version&#39; for org.apache.maven.plugins:maven-deploy-plugin is missing. @ org.springframework.cloud:spring-cloud-gateway-do</span><br><span class="line">cs:[unknown-version], D:\Git\spring-cloud-gateway\docs\pom.xml, line 21, column 12</span><br><span class="line">[WARNING]</span><br><span class="line">[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.</span><br><span class="line">[WARNING]</span><br><span class="line">[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.</span><br><span class="line">[WARNING]</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Reactor Build Order:</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] spring-cloud-gateway-dependencies</span><br><span class="line">[INFO] Spring Cloud Gateway</span><br><span class="line">[INFO] spring-cloud-gateway-mvc</span><br><span class="line">[INFO] spring-cloud-gateway-webflux</span><br><span class="line">[INFO] Spring Cloud Gateway Core</span><br><span class="line">[INFO] spring-cloud-starter-gateway</span><br><span class="line">[INFO] Spring Cloud Gateway Sample</span><br><span class="line">[INFO] Spring Cloud Gateway Docs</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Reactor Summary:</span><br><span class="line">[INFO]</span><br><span class="line">[INFO] spring-cloud-gateway-dependencies .................. SKIPPED</span><br><span class="line">[INFO] Spring Cloud Gateway ............................... SKIPPED</span><br><span class="line">[INFO] spring-cloud-gateway-mvc ........................... SKIPPED</span><br><span class="line">[INFO] spring-cloud-gateway-webflux ....................... SKIPPED</span><br><span class="line">[INFO] Spring Cloud Gateway Core .......................... SKIPPED</span><br><span class="line">[INFO] spring-cloud-starter-gateway ....................... SKIPPED</span><br><span class="line">[INFO] Spring Cloud Gateway Sample ........................ SKIPPED</span><br><span class="line">[INFO] Spring Cloud Gateway Docs .......................... SKIPPED</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD FAILURE</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total time: 10.046 s</span><br><span class="line">[INFO] Finished at: 2019-02-19T13:50:51+08:00</span><br><span class="line">[INFO] Final Memory: 17M&#x2F;160M</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[ERROR] No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format &lt;plugin-prefix&gt;:&lt;goal&gt; or &lt;plugin-g</span><br><span class="line">roup-id&gt;:&lt;plugin-artifact-id&gt;[:&lt;plugin-version&gt;]:&lt;goal&gt;. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generat</span><br><span class="line">e-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, t</span><br><span class="line">est-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy</span><br><span class="line">, pre-clean, clean, post-clean, pre-site, site, post-site, site-deploy. -&gt; [Help 1]</span><br><span class="line">[ERROR]</span><br><span class="line">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class="line">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class="line">[ERROR]</span><br><span class="line">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span><br><span class="line">[ERROR] [Help 1] http:&#x2F;&#x2F;cwiki.apache.org&#x2F;confluence&#x2F;display&#x2F;MAVEN&#x2F;NoGoalSpecifiedException</span><br></pre></td></tr></table></figure>

<p>结束！🔚</p>
<hr>
]]></content>
      <tags>
        <tag>Maven</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>学习笔记|数据结构与算法之递归</title>
    <url>/posts/3692f6e2/</url>
    <content><![CDATA[<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p><strong>递归需要满足的三个条件</strong></p>
<ol>
<li><p>一个问题的解可以分解为几个子问题的解</p>
</li>
<li><p>这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样</p>
</li>
<li><p>存在递归终止条件</p>
</li>
</ol>
<p><strong>总结：</strong></p>
<p><em>写递归代码的关键就是找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后再推敲终止条件，最后将递推公式和终止条件翻译成代码</em></p>
<p>注意：</p>
<p>递归要警惕堆栈溢出，当递归次数过大时，超出JVM内部堆栈。便会抛出<code>Exception in thread &quot;main&quot; java.lang.StackOverflowError</code></p>
<p>避免堆栈溢出就需要限制最大递归深度</p>
<p>警惕重复计算，递归一般会出现二叉树形式的计算链，每次都往<code>Map</code>中存储当前计算结果，从而避免重复计算。</p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>基于BC的SM2公钥压缩与解压缩</title>
    <url>/posts/a0ea3988/</url>
    <content><![CDATA[<blockquote>
<p><code>ECC</code>的公钥是支持压缩的，<code>SM2椭圆曲线公钥密码算法</code>中也给出了压缩的方法，这里就不讨论如何计算了，直接看看BC是如何实现的。</p>
</blockquote>
<h3 id="编码压缩"><a href="#编码压缩" class="headerlink" title="编码压缩"></a>编码压缩</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* encode EC PublicKey</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> publicKey EC公钥</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 压缩的公钥</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> InvalidKeySpecException 不是EC公钥，抛出异常</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encodePoint(PublicKey publicKey) <span class="keyword">throws</span> InvalidKeySpecException &#123;</span><br><span class="line">	<span class="keyword">if</span> (publicKey <span class="keyword">instanceof</span> ECPublicKey) &#123;</span><br><span class="line">		BCECPublicKey bcPubKey = (BCECPublicKey) publicKey;</span><br><span class="line">		<span class="keyword">return</span> bcPubKey.getQ().getEncoded(<span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> InvalidKeySpecException(<span class="string">"cannot identify EC public key."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解码解压"><a href="#解码解压" class="headerlink" title="解码解压"></a>解码解压</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* decode 16进制的Point X</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> compressedKey</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> curveName</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> InvalidKeySpecException</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PublicKey <span class="title">decodePoint</span><span class="params">(String compressedKey, String curveName)</span></span></span><br><span class="line"><span class="function">		<span class="keyword">throws</span> NoSuchAlgorithmException, InvalidKeySpecException </span>&#123;</span><br><span class="line">	X9ECParameters spec = ECNamedCurveTable.getByName(curveName);</span><br><span class="line">	<span class="comment">// 根据X恢复点Y</span></span><br><span class="line">	ECPoint W = spec.getCurve().decodePoint(Hex.decode(compressedKey));</span><br><span class="line">	<span class="keyword">return</span> toAsn1PublicKey(W, curveName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用的方法在Gist上，给出了一个EC 工具包，包含计算公钥，格式转换等：<a href="https://gist.github.com/Gsealy/778efb420d325582541a1ec67a98b73e" target="_blank" rel="noopener">EC Utils</a>🔚</p>
<hr>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>BC</tag>
        <tag>SM2</tag>
        <tag>EC</tag>
      </tags>
  </entry>
  <entry>
    <title>Github同步远程仓库代码</title>
    <url>/posts/a07a809d/</url>
    <content><![CDATA[<blockquote>
<p>最近提了自己第一个PR，总体也是磕磕绊绊。先记录下fork代码的更新吧。</p>
</blockquote>
<p><strong>参考：</strong><a href="https://gaohaoyang.github.io/2015/04/12/Syncing-a-fork/" target="_blank" rel="noopener">同步一个 fork</a></p>
<h3 id="Fork"><a href="#Fork" class="headerlink" title="Fork"></a>Fork</h3><p>第一步当然是先<code>fork</code>人家的项目了。</p>
<p>以Github上面的<code>hutool</code>为例,在人家的项目页面点右上角的<code>Fork</code>即可：</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/github/fork.png" alt="fork"></p>
<p>然后克隆<code>fork</code>到自己仓库的项目到本地就可以了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; git <span class="built_in">clone</span> https://github.com/Gsealy/hutool.git</span><br></pre></td></tr></table></figure>

<h3 id="远程仓库有新的提交"><a href="#远程仓库有新的提交" class="headerlink" title="远程仓库有新的提交"></a>远程仓库有新的提交</h3><p>当远程仓库有新的提交变动的时候，需要同步更新一下，要不然容易产生冲突。</p>
<p><strong>Configuring a remote for a fork</strong></p>
<ul>
<li>给 fork 配置一个 remote</li>
<li>主要使用 <code>git remote -v</code> 查看远程状态</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  https://github.com/Gsealy/hutool.git (fetch)</span><br><span class="line">origin  https://github.com/Gsealy/hutool.git (push)</span><br></pre></td></tr></table></figure>

<ul>
<li>添加一个将被同步给 fork 远程的上游仓库</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add upstream https://github.com/looly/hutool.git</span><br></pre></td></tr></table></figure>

<ul>
<li>再次查看状态确认是否配置成功</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin  https://github.com/Gsealy/hutool.git (fetch)</span><br><span class="line">origin  https://github.com/Gsealy/hutool.git (push)</span><br><span class="line">upstream        https://github.com/looly/hutool.git (fetch)</span><br><span class="line">upstream        https://github.com/looly/hutool.git (push)</span><br></pre></td></tr></table></figure>

<p><strong>Syncing a fork</strong></p>
<ul>
<li>从上游仓库 fetch 分支和提交点，传送到本地，并会被存储在一个本地分支 <code>upstream/v4-master</code>，(这块因为做过同步了，所以在网上找的，大概改了下)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git fetch upstream</span><br><span class="line"><span class="comment"># remote: Counting objects: 75, done.</span></span><br><span class="line"><span class="comment"># remote: Compressing objects: 100% (53/53), done.</span></span><br><span class="line"><span class="comment"># remote: Total 62 (delta 27), reused 44 (delta 9)</span></span><br><span class="line"><span class="comment"># Unpacking objects: 100% (62/62), done.</span></span><br><span class="line"><span class="comment"># From https://github.com/looly/hutool</span></span><br><span class="line"><span class="comment">#  * [new branch]      v4-master     -&gt; upstream/v4-master</span></span><br><span class="line"><span class="comment">#  * [new branch]      v4-dev     -&gt; upstream/v4-dev</span></span><br></pre></td></tr></table></figure>

<ol>
<li>改变本地分支为<code>v4-master</code></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout v4-master</span><br><span class="line">Switched to branch <span class="string">'v4-master'</span></span><br><span class="line">Your branch is up to date with <span class="string">'origin/v4-master'</span>.</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>合并<code>v4-master</code>代码</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git merge upstream/v4-master</span><br><span class="line">Updating 6a5e2e3d..84be6d34</span><br><span class="line">Fast-forward</span><br><span class="line">....</span><br><span class="line">42 files changed, 396 insertions(+), 136 deletions(-)</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>同步到自己的仓库</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push origin v4-master</span><br><span class="line">Enumerating objects: 436, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (311/311), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 8 threads.</span><br><span class="line">Compressing objects: 100% (56/56), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (169/169), 16.81 KiB | 1.29 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 169 (delta 67), reused 164 (delta 64)</span><br><span class="line">remote: Resolving deltas: 100% (67/67), completed with 51 <span class="built_in">local</span> objects.</span><br><span class="line">To https://github.com/Gsealy/hutool.git</span><br><span class="line">   6a5e2e3d..84be6d34  v4-master -&gt; v4-master</span><br></pre></td></tr></table></figure>

<p><strong>注：</strong>其他分支按照1-3步从新做一遍就好了🔚</p>
<hr>
]]></content>
      <tags>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring WebFlux获取Body和访问IP</title>
    <url>/posts/34712fd6/</url>
    <content><![CDATA[<blockquote>
<p>当通过<code>subscribe</code>获取body体的时候，总是报null。</p>
<p>Spring Boot版本：2.1.1.RELEASE</p>
</blockquote>
<h3 id="官方样例"><a href="#官方样例" class="headerlink" title="官方样例"></a>官方样例</h3><p><code>Spring</code>官方有一个样例：<a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples/spring-boot-sample-webflux" target="_blank" rel="noopener">spring-boot-sample-webflux</a></p>
<p>包含一个启动类、2个Controller和一个Handler。</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/spring/class.png" alt=""></p>
<p><code>Controller</code>是两个基本的基于<code>@RestController</code>注解的Controller类，与以往<code>@Controller</code>注解的区别就是包含了<code>@RequestBody</code>注解。这次主要就是看看这个<code>Handler</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">echo</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> ServerResponse.ok().body(request.bodyToMono(String<span class="class">.<span class="keyword">class</span>), <span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title">monoRouterFunction</span><span class="params">(EchoHandler echoHandler)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> route(POST(<span class="string">"/echo"</span>), echoHandler::echo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过<code>Bean</code>注册路由信息，这和以往的<code>@Controller</code>有所不同，但是和<code>Vert.x</code>很相似。在<code>Handler</code>中通过<code>ServerRequest</code>接口接收请求信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Vert.x 路由部署方式</span></span><br><span class="line">...</span><br><span class="line">router.get(<span class="string">"/"</span>).handler(<span class="keyword">this</span>::indexhandler);</span><br><span class="line">router.route().handler(BodyHandler.create().setMergeFormAttributes(<span class="keyword">true</span>));</span><br><span class="line">router.route(<span class="string">"/static/*"</span>).handler(StaticHandler.create(<span class="string">"static"</span>));</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><strong>运行样例：</strong></p>
<p>使用<code>Httpie</code>携带Body 信息请求<code>/echo</code>，返回请求的Body信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">E:\spring-boot-sample-webflux&gt;http post :8080/<span class="built_in">echo</span> foo=bar</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Length: 14</span><br><span class="line">Content-Type: text/plain;charset=UTF-8</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"foo"</span>: <span class="string">"bar"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取请求"><a href="#获取请求" class="headerlink" title="获取请求"></a>获取请求</h3><p>上面的实例可以获取Body信息，但是当我们想<code>subscribe</code>获取这个body内的信息时，会得到一个<code>null</code>的对象。</p>
<p>错误代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.bodyToMono(String<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">       .<span class="title">subscribe</span>(<span class="title">body</span> -&gt; </span>&#123;</span><br><span class="line">          System.out.println(<span class="string">"body data-&gt;"</span> + body);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<p>在<a href="https://github.com/spring-projects/spring-boot/issues/15320#issuecomment-442574935" target="_blank" rel="noopener">Spring Boot#15320</a>找到了答案</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This code is calling subscribe on the request body and decouples it from the response rendering. </span><br><span class="line">Because you&#39;re decoupling the request handling from the bit that reads the request body, </span><br><span class="line">you&#39;re running into a race condition: </span><br><span class="line">by the time the response is handled, Spring WebFlux is cleaning the HTTP resources (request and response resources), </span><br><span class="line">which means that your other subscription might not have time to read the body.</span><br></pre></td></tr></table></figure>

<p>主要意思就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">调用subscribe()方法获取请求体会割裂响应，此时正处于竞争态。</span><br><span class="line">在处理响应时，Spring WebFlux正在清理HTTP资源（请求和响应资源）。</span><br><span class="line">意味着你其他的订阅无法得到请求体。</span><br></pre></td></tr></table></figure>

<p>所以想对Body做操作时，需要链式调用，最好不要使用订阅等方法，而且这里还处于竞争态，更不能使用。所以单独获取Body或者某一请求值的话，直接使用<code>flatMap()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">test2</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request.bodyToMono(String<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">      .<span class="title">flatMap</span>(<span class="title">s</span> -&gt; <span class="title">ServerResponse</span>.<span class="title">ok</span>().<span class="title">body</span>(<span class="title">Mono</span>.<span class="title">just</span>(<span class="title">s</span>), <span class="title">String</span>.<span class="title">class</span>))</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就可以在<code>flatMap()</code>操作body了，同时在后面加上了<code>log()</code>。看下调用情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2019-01-11 15:19:25.971  INFO 19612 --- [ctor-http-nio-2] reactor.Mono.FlatMap.2                   : | onSubscribe([Fuseable] MonoFlatMap.FlatMapMain)</span><br><span class="line">2019-01-11 15:19:25.971  INFO 19612 --- [ctor-http-nio-2] reactor.Mono.FlatMap.2                   : | request(unbounded)</span><br><span class="line">2019-01-11 15:19:25.975  INFO 19612 --- [ctor-http-nio-2] reactor.Mono.OnErrorResume.1             : onSubscribe(FluxOnErrorResume.ResumeSubscriber)</span><br><span class="line">2019-01-11 15:19:25.975  INFO 19612 --- [ctor-http-nio-2] reactor.Mono.OnErrorResume.1             : request(unbounded)</span><br><span class="line">2019-01-11 15:19:25.984  INFO 19612 --- [ctor-http-nio-2] reactor.Mono.OnErrorResume.1             : onNext(&#123;<span class="string">"foo"</span>: <span class="string">"bar"</span>&#125;)   </span><br><span class="line">2019-01-11 15:19:25.990  INFO 19612 --- [ctor-http-nio-2] reactor.Mono.FlatMap.2                   : | onNext(org.springframework.web.reactive.function.server.DefaultEntityResponseBuilder<span class="variable">$DefaultEntityResponse</span>@b65494c)</span><br><span class="line">2019-01-11 15:19:26.017  INFO 19612 --- [ctor-http-nio-2] reactor.Mono.FlatMap.2                   : | onComplete()</span><br><span class="line">2019-01-11 15:19:26.017  INFO 19612 --- [ctor-http-nio-2] reactor.Mono.OnErrorResume.1             : onComplete()</span><br></pre></td></tr></table></figure>

<p>可以在第五行看到<code>onNext({&quot;foo&quot;: &quot;bar&quot;})</code>,显示出了请求体。同时可以看到，<code>reactor.Mono.OnErrorResume.1</code>这里是调用了<code>OnErrorResume</code>方法，我理解就是存在竞争，它是从错误中恢复出来的。</p>
<p>当获取多个参数时，需要使用<code>zip()</code>方法将几个参数zip在一起，例如获取请求IP和请求体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">test</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Mono.zip(request.bodyToMono(String<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">      <span class="title">Mono</span>.<span class="title">just</span>(<span class="title">request</span>.<span class="title">remoteAddress</span>()</span></span><br><span class="line">          .map(InetSocketAddress::getHostString)</span><br><span class="line">          .orElseThrow(RuntimeException::<span class="keyword">new</span>)))</span><br><span class="line">        .flatMap(tuple -&gt; &#123;</span><br><span class="line">          String bodyData = tuple.getT1();</span><br><span class="line">          String remoteIp = tuple.getT2();</span><br><span class="line">          log.info(<span class="string">"BodyData =&gt;"</span> + bodyData);</span><br><span class="line">          log.info(<span class="string">"RemoteIp =&gt;"</span> + remoteIp);</span><br><span class="line">          <span class="keyword">return</span> ServerResponse.ok().body(Mono.just(bodyData + <span class="string">"\n"</span> + remoteIp), String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>请求<code>/test</code>端点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">C:\spring-boot-sample-webflux&gt;http post :8080/<span class="built_in">test</span> foo=bar</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Length: 30</span><br><span class="line">Content-Type: text/plain;charset=UTF-8</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">"foo"</span>: <span class="string">"bar"</span>&#125;</span><br><span class="line">0:0:0:0:0:0:0:1</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    想要在Spring 5，Spring Boot 2上得到更好的体验。可以尝试转到流式编程上，包括使用<code>lambda</code>表达式等。可以增加代码的可读性和整洁性。</p>
<p>​    在这个例子里面，主要是获取多个请求参数，我自己也绕了好久，从以往的注解中跳出来。更多的可以看看<code>Pivotal</code>开源的<code>Reactor</code>或者<code>RxJava</code>等等。</p>
<p>结束！🔚</p>
<hr>
]]></content>
      <tags>
        <tag>WebFlux</tag>
        <tag>Spring Boot</tag>
        <tag>Reactor</tag>
      </tags>
  </entry>
  <entry>
    <title>更换Spring Boot 2.0的连接池</title>
    <url>/posts/319c1e00/</url>
    <content><![CDATA[<blockquote>
<p><strong>前言</strong></p>
<p>前期做gateway demo的时候一直用的都是阿里的<code>Druid</code>，自带监控，但是暂时监控用不上，就想试试<code>HikariCP</code>，所以要将<code>Druid</code>转移至<code>HikariCP</code>连接池</p>
<p>当前Spring Boot版本为：<strong>2.1.0.RELEASE</strong></p>
</blockquote>
<h4 id="HikariCP简介"><a href="#HikariCP简介" class="headerlink" title="HikariCP简介"></a><code>HikariCP</code>简介</h4><p>HikariCP专注于连接池，没有加Druid中的监控功能，轻量级，代码一共只有130kb左右</p>
<p><strong>Github地址:</strong>  <a href="https://github.com/brettwooldridge/HikariCP" target="_blank" rel="noopener">https://github.com/brettwooldridge/HikariCP</a></p>
<p>Spring Boot 2.0将<code>HikariCP</code>作为默认的连接池，给出了如下解释：</p>
<blockquote>
<p>Production database connections can also be auto-configured by using a pooling<code>DataSource</code>. Spring Boot uses the following algorithm for choosing a specific implementation:</p>
<ol>
<li>We prefer <a href="https://github.com/brettwooldridge/HikariCP" target="_blank" rel="noopener">HikariCP</a> for its performance and concurrency. If HikariCP is available, we always choose it.</li>
<li>Otherwise, if the Tomcat pooling <code>DataSource</code> is available, we use it.</li>
<li>If neither HikariCP nor the Tomcat pooling datasource are available and if <a href="https://commons.apache.org/proper/commons-dbcp/" target="_blank" rel="noopener">Commons DBCP2</a> is available, we use it.</li>
</ol>
</blockquote>
<h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>Tips：</strong>没有在<code>spring-boot-starter-jdbc</code>的<code>pom</code>文件里发现<code>tomcat-jdbc</code>，可能默认的就已经是<code>HikariCP</code>了吧，所以也不用排除<code>tomcat-jdbc</code></p>
<h4 id="yaml配置"><a href="#yaml配置" class="headerlink" title="yaml配置"></a>yaml配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/database?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">auto-commit:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">60</span></span><br><span class="line">      <span class="attr">minimum-idle:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">connection-test-query:</span> <span class="string">SELECT</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">connection-timeout:</span> <span class="number">30000</span></span><br><span class="line">      <span class="attr">idle-timeout:</span> <span class="number">600000</span></span><br><span class="line">      <span class="attr">maxLifetime:</span> <span class="number">1800000</span></span><br><span class="line">      <span class="attr">read-only:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>这样直接启动就可以了，会看到<code>HikariCP</code>启动成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[2018-12-17 11:34:48] [RMI TCP Connection(6)-127.0.0.1] INFO  [com.zaxxer.hikari.HikariDataSource] 110 - HikariPool-1 - Starting...</span><br><span class="line">[2018-12-17 11:34:48] [RMI TCP Connection(6)-127.0.0.1] DEBUG [com.zaxxer.hikari.pool.HikariPool] 545 - HikariPool-1 - Added connection com.mysql.jdbc.JDBC4Connection@3961e5e4</span><br><span class="line">[2018-12-17 11:34:48] [RMI TCP Connection(6)-127.0.0.1] INFO  [com.zaxxer.hikari.HikariDataSource] 123 - HikariPool-1 - Start completed.</span><br></pre></td></tr></table></figure>

<h5 id="配置上的坑"><a href="#配置上的坑" class="headerlink" title="配置上的坑"></a>配置上的坑</h5><p>起初配置的时候，是如下这样的</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">jdbc-url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/database?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span> <span class="comment"># &lt;1&gt;</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span>                                 <span class="comment"># &lt;2&gt;</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span>                                 <span class="comment"># &lt;3&gt;</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span>       <span class="comment"># &lt;4&gt;</span></span><br><span class="line">      <span class="attr">auto-commit:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">60</span></span><br><span class="line">      <span class="attr">minimum-idle:</span> <span class="number">10</span></span><br><span class="line">      <span class="attr">connection-test-query:</span> <span class="string">SELECT</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">connection-timeout:</span> <span class="number">30000</span></span><br><span class="line">      <span class="attr">idle-timeout:</span> <span class="number">600000</span></span><br><span class="line">      <span class="attr">maxLifetime:</span> <span class="number">1800000</span></span><br><span class="line">      <span class="attr">read-only:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>当把上面这四项放在<code>spring.datasource.hikari</code>下面的时候，启动会报如下错误：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.jdbc.DataSourceProperties$DataSourceBeanCreationException: Failed to determine a suitable driver <span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class">...</span></span><br><span class="line"><span class="class">***************************</span></span><br><span class="line"><span class="class"><span class="title">APPLICATION</span> <span class="title">FAILED</span> <span class="title">TO</span> <span class="title">START</span></span></span><br><span class="line"><span class="class">***************************</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Failed to configure a DataSource: <span class="string">'url'</span> attribute is not specified and no embedded datasource could be configured.</span><br><span class="line"></span><br><span class="line">Reason: Failed to determine a suitable driver <span class="class"><span class="keyword">class</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line">Action:</span><br><span class="line"></span><br><span class="line">Consider the following:</span><br><span class="line">	<span class="function">If you want an embedded <span class="title">database</span> <span class="params">(H2, HSQL or Derby)</span>, please put it on the classpath.</span></span><br><span class="line"><span class="function">	If you have database settings to be loaded from a particular profile you may need to activate <span class="title">it</span> <span class="params">(no profiles are currently active)</span>.</span></span><br></pre></td></tr></table></figure>

<p>“无法确定合适的驱动类”，配置<code>DataSource</code>下的<code>&#39;url&#39;</code>参数失败，像阿里自己封装的<code>druid-starter</code>，所有都配置<code>spring.datasource.druid</code>在即可，所以出现上面问题的解决办法就是使用<a href="#yaml配置">yaml配置</a> 这里的配置就可以了。</p>
<p>BTW，好像没在    </p>
<p>还有一个小问题就是<code>IDEA</code>针对<code>spring.datasource.driver-class-name</code>这一项配置居然不识别，虽然报错，但是不影响使用</p>
<blockquote>
<p>IDEA当前版本：IntelliJ IDEA 2018.3.1 (Ultimate Edition)</p>
</blockquote>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/spring/jdbc-driver.jpg" alt=""></p>
<p>结束！🔚</p>
<hr>
]]></content>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Pool</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令备份</title>
    <url>/posts/edb3f98d/</url>
    <content><![CDATA[<p><strong>备份一下日常用命令</strong></p>
<blockquote>
<p><strong>引用</strong></p>
<p><a href="https://segmentfault.com/a/1190000008542123" target="_blank" rel="noopener">git代码统计-segmentfault</a></p>
</blockquote>
<p>所有在<code>Windows</code>下用<a href="http://cmder.net/" target="_blank" rel="noopener">cmder</a>都可以执行</p>
<ol>
<li>查看提交次数：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git shortlog --numbered --summary</span><br><span class="line">55  Gsealy</span><br><span class="line"> 3  JEDI</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>删除本地提交</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset --soft HEAD~1</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>查看git上的个人代码量（修改<code>username</code>）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --author=<span class="string">"username"</span> --pretty=tformat: --numstat | awk <span class="string">'&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc &#125;'</span> -</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>统计每个人增删行数</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --format=<span class="string">'%aN'</span> | sort -u | <span class="keyword">while</span> <span class="built_in">read</span> name; <span class="keyword">do</span> <span class="built_in">echo</span> -en <span class="string">"<span class="variable">$name</span>\t"</span>; git <span class="built_in">log</span> --author=<span class="string">"<span class="variable">$name</span>"</span> --pretty=tformat: --numstat | awk <span class="string">'&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc &#125;'</span> -; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>添加或修改的代码行数</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span>|perl -ne <span class="string">'END &#123; print $c &#125; $c += $1 if /(\d+) insertions/'</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Route删除和Gateway-Filter优先级的小坑</title>
    <url>/posts/6548debe/</url>
    <content><![CDATA[<p>最近在做业务网关的时候，发现用<code>RouteLocatorBuilder</code>构建的<code>Route</code>无法操作删除和更新操作，又换回了<code>RouteDefinition</code>的构建方式，梳理下这里面的坑。</p>
<h3 id="Route不能删除"><a href="#Route不能删除" class="headerlink" title="Route不能删除"></a>Route不能删除</h3><p>查看<code>GatewayControllerEndpoint</code>可以看到有这个删除的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/routes/&#123;id&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> Mono&lt;ResponseEntity&lt;Object&gt;&gt; delete(<span class="meta">@PathVariable</span> String id) &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.routeDefinitionWriter.delete(Mono.just(id))</span><br><span class="line">			.then(Mono.defer(() -&gt; Mono.just(ResponseEntity.ok().build())))</span><br><span class="line">			.onErrorResume(t -&gt; t <span class="keyword">instanceof</span> NotFoundException, t -&gt; Mono.just(ResponseEntity.notFound().build()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是他只针对<code>RouteDefinition</code>方式构建的Route, 因为它会调用<code>delete()</code>这个在<code>RouteDefinitionWriter</code>接口中的方法，具体实现是在<code>InMemoryRouteDefinitionRepository</code>中，我们看最开始：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InMemoryRouteDefinitionRepository</span> <span class="keyword">implements</span> <span class="title">RouteDefinitionRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, RouteDefinition&gt; routes = synchronizedMap(<span class="keyword">new</span> LinkedHashMap&lt;String, RouteDefinition&gt;());</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Mono&lt;Void&gt; <span class="title">save</span><span class="params">(Mono&lt;RouteDefinition&gt; route)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> route.flatMap( r -&gt; &#123;</span><br><span class="line">			routes.put(r.getId(), r);</span><br><span class="line">			<span class="keyword">return</span> Mono.empty();</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接就是一个带<code>RouteDefinition</code>的Map，这也都是<code>save()</code>存进来的KV，可以很清楚的看到Key就是他的<code>Id</code>，然后对应着本身。所以删除的时候直接删除这一KV，然后再去<code>publisher</code>一下就行了。</p>
<p>反而<code>Route</code>就没有这好事，所以我不得不先放弃了这个，但是也提了issues <a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/675" target="_blank" rel="noopener">#675</a>, 看看官方怎么说吧。</p>
<h3 id="Factory不能实现Ordered"><a href="#Factory不能实现Ordered" class="headerlink" title="Factory不能实现Ordered"></a>Factory不能实现Ordered</h3><p>本想着构建<code>Factory</code>的时候，像普通的<code>GlobalFilter</code>或者<code>GatewayFilter</code>直接实现一个<code>Ordered</code>就能给他一个特定的优先级了。也不用改之前其他<code>Filters</code>定义好的优先级，但是不行啊！</p>
<p>我先给了个优先级，从官方给的<code>EndPoint</code>可以查看到：</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/spring/gateway-filters.jpg" alt=""></p>
<p>但是这个设置了是不起作用的！只能<code>debug</code>看看了，进入到任意一个<code>GlobalFilter</code>，查看<code>GatewayFilterChain</code>的<code>filters</code>这一项，可以看到他的order是1！所以要改变的话，只要把应该在他后面的改的值比他大就行了。</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/spring/gateway-filters-2.jpg" alt=""></p>
<p>结束！🔚</p>
<hr>
]]></content>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Gateway</tag>
        <tag>Filter</tag>
      </tags>
  </entry>
  <entry>
    <title>SC-Gateway缓存Body并从中提取FormData和MultiPart</title>
    <url>/posts/635b6c82/</url>
    <content><![CDATA[<blockquote>
<p>更新于 2021年3月12日</p>
<p>新增具体实例，感谢yvanbaker指出的Part文件上传读取问题</p>
</blockquote>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>通过创建一个<code>XSS过滤</code>的全局过滤器，来展示form-data，part，及url的过滤操作。</p>
<h2 id="缓存Body"><a href="#缓存Body" class="headerlink" title="缓存Body"></a>缓存Body</h2><p>在SCG 2.1.4+，支持body题缓存为<code>DataBuffer</code>，去掉了外面的<code>Flux</code>包装，具体可以参考<a href="https://github.com/spring-cloud/spring-cloud-gateway/blob/eb9611a58a46a50a3a330c213a13965854c52deb/spring-cloud-gateway-server/src/main/java/org/springframework/cloud/gateway/support/ServerWebExchangeUtils.java#L332" target="_blank" rel="noopener">ServerWebExchangeUtils#cacheRequestBody</a></p>
<p>那下面就用2.1.1的SCG来做，把body缓存拿到低版本来试试。</p>
<p>新建一个<code>GlobalFilter</code>做缓存，把所有操作都封装到<code>BodyUtils.cacheRequestBody</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> BodyUtils.cacheRequestBody(exchange, (serverHttpRequest) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (serverHttpRequest == exchange.getRequest()) &#123;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> chain.filter(exchange.mutate().request(serverHttpRequest).build());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="XSS过滤"><a href="#XSS过滤" class="headerlink" title="XSS过滤"></a>XSS过滤</h2><ol>
<li>先从Attribute中取到缓存的<code>Databuffer</code></li>
<li>分别针对header，query，form-data，multipart做过滤操作</li>
<li>重新封装请求，返回给过滤链（Filter Chain）</li>
</ol>
<p>具体内容可以查看demo：<a href="https://gsealy.coding.net/public/escape-request/escape-request/git/files" target="_blank" rel="noopener">escape-request</a></p>
<hr>
<h1 id="以下为旧内容，不推荐"><a href="#以下为旧内容，不推荐" class="headerlink" title="以下为旧内容，不推荐"></a>以下为旧内容，不推荐</h1><h3 id="缓存Body-1"><a href="#缓存Body-1" class="headerlink" title="缓存Body"></a>缓存Body</h3><p>缓存Body的话， Gateway给出了一个工厂类，可以直接用。也可以像我有别的需求的，重写一下。</p>
<p>我主要就给他改成<code>GlobalFilter</code>，然后给了最高优先级，就想在入口处就拿到缓存内容，放到Attribute中，以供后面使用。</p>
<p>给一个Gist的链接吧 : <a href="https://gist.github.com/Gsealy/a468da7d36a65de9f5b959f2b20f0bca" target="_blank" rel="noopener">Link</a></p>
<h3 id="提取数据"><a href="#提取数据" class="headerlink" title="提取数据"></a>提取数据</h3><p>困扰我好久的问题主要就是<code>FormData</code>和<code>Part</code>的使用问题，因为需要做参数映射、Hash计算等操作，需要用到这些body中的内容，也不能直接拿Body去计算，还是需要转换为标准的Data格式，比如<code>FormData</code>主要就是键值对，<code>MultiPart</code>主要就是上传文件，然后给他转成输入流<code>InputStream</code>.</p>
<h4 id="Body转换"><a href="#Body转换" class="headerlink" title="Body转换"></a>Body转换</h4><p>本来还提了一个issues <a href="https://github.com/spring-cloud/spring-cloud-gateway/issues/671" target="_blank" rel="noopener">#671</a> , 但是因为没有给完整demo而是给了一个Gist就被关了(笑，确实是自己懒省事了). 但是今儿在rebuild demo的时候想到，既然我都已经拿到了Body，直接转换一下不就行了么，也解决了<code>Mono</code>形式的<code>FormData</code>被消费，后端服务无法接收的问题。</p>
<p>当我发现了<a href="https://github.com/spring-projects/spring-framework/blob/a5339d71eae50e2cb6e572d52a823a26d1d103f1/spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java" target="_blank" rel="noopener">BodyExtractors</a>类, 其中有<code>toFormData()</code>和<code>toMultipartData()</code>方法, 结合测试类<a href="https://github.com/spring-projects/spring-framework/blob/cfb1ed1009bebe7d7fbb10908dbdbf3bae934548/spring-webflux/src/test/java/org/springframework/web/reactive/function/BodyExtractorsTests.java" target="_blank" rel="noopener">BodyExtractorsTests</a> 就可以实现提取了</p>
<p>Gist : <a href="https://gist.github.com/Gsealy/1450a0df67a80d56b6b430627af5a4ac" target="_blank" rel="noopener">Link</a></p>
<p>完整Demo-FormData ：<a href="https://github.com/Gsealy/SignatureTest/raw/master/datademo.zip" target="_blank" rel="noopener">zip</a></p>
<p>结束！🔚</p>
<hr>
]]></content>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Gateway</tag>
        <tag>WebFlux</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring MultiValueMap抛出java.lang.UnsupportedOperationException: null异常</title>
    <url>/posts/76378c1b/</url>
    <content><![CDATA[<p>今儿在SC-Gateway处理formData的时候，明明有值，但是会抛出<code>java.lang.UnsupportedOperationException: null</code>的异常。</p>
<p>看一下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (delegate.getMethod().matches(<span class="string">"POST"</span>)) &#123;</span><br><span class="line">	<span class="keyword">if</span> (StringUtils.equals(mediatype.toString(), MediaType.APPLICATION_FORM_URLENCODED_VALUE)) &#123;</span><br><span class="line">        Mono&lt;MultiValueMap&lt;String, String&gt;&gt; formdata = exchange.getFormData();</span><br><span class="line">        addFormDataToMap(formdata, paramsMap);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          ...</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Spring Cloud Gateway是建在Spring 5和Spring Boot 2.0之上的。所以是响应式的编程，上手比较困难。这里是做一个FormData的转换，将键值对形式的FormData加载到Query中去，再继续做下一步操作。</p>
<p><code>addFormDataToMap</code>方法是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormDataToMap</span><span class="params">(Mono&lt;MultiValueMap&lt;String, String&gt;&gt; formdata,</span></span></span><br><span class="line"><span class="function"><span class="params">      MultiValueMap&lt;String, String&gt; paramsMap)</span> </span>&#123;</span><br><span class="line">    AtomicReference&lt;MultiValueMap&lt;String, String&gt;&gt; QueryRef = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line">    formdata.subscribe(maps -&gt; &#123;</span><br><span class="line">      QueryRef.set(maps);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (QueryRef.get().isEmpty() &amp;&amp; QueryRef.get() == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    paramsMap.addAll(QueryRef.get()); <span class="comment">// &lt;1&gt;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><code>paramsMap</code>存储的是Query中的键值对，同过formdata的subscribe，存储进<code>QueryRef</code>中。最后在<code>addAll</code>进<code>paramsMap</code>。</p>
<p>这样看起来没什么问题，但是当执行<code>&lt;1&gt;</code>时，会抛出异常：<code>java.lang.UnsupportedOperationException: null</code></p>
<p>跟进去发现，在<code>CollectionUtils</code>类中，可以看到存在完整的键值对，执行完当前step会直接抛出异常。</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/spring/gateway-exception-1.jpg" alt=""></p>
<p>subscribe抛出异常：</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/spring/gateway-exception-2.jpg" alt=""></p>
<p>查看<code>java.util.Map</code>方法中的<code>computeIfAbsent</code>类，当当前Map不支持此<code>put</code>操作时抛出<code>UnsupportedOperationException</code>异常，所以存储了一个<code>null</code></p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/spring/gateway-exception-2.jpg" alt=""></p>
<p>修改代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormDataToMap</span><span class="params">(Mono&lt;MultiValueMap&lt;String, String&gt;&gt; formdata, MultiValueMap&lt;String, String&gt; paramsMap)</span> </span>&#123;</span><br><span class="line">	AtomicReference&lt;MultiValueMap&lt;String, String&gt;&gt; queryRef = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line">    formdata.subscribe(maps -&gt; &#123;</span><br><span class="line">      queryRef.set(maps);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (queryRef.get() == <span class="keyword">null</span> &amp;&amp; queryRef.get().isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LinkedMultiValueMap&lt;String, String&gt; newList = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;(paramsMap); <span class="comment">// &#123;1-1&#125;</span></span><br><span class="line">    newList.addAll(queryRef.get()); <span class="comment">// &#123;1-2&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>删除原先代码<code>&lt;1&gt;</code>部分，增加<code>{1-1}</code>和<code>{1-2}</code>，先创建新的<code>LinkedList</code>，再<code>addAll</code></p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote>
<p><a href="https://stackoverflow.com/a/2965762" target="_blank" rel="noopener">Why do I get an UnsupportedOperationException when trying to remove an element from a List?</a>🔚</p>
</blockquote>
<hr>
]]></content>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Gateway</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Gateway两种Route动态配置方式</title>
    <url>/posts/d49605fb/</url>
    <content><![CDATA[<blockquote>
<p><strong>前言</strong><br>最近在用Spring Cloud Gateway（sc-gateway）的时候，总是被他的Route编辑方式搞的很难受，只能写死。网上找了找，有两个实现的方式，还有一个写的不是很全。所以自己整理了一下。</p>
</blockquote>
<p>通过这篇 <a href="https://my.oschina.net/tongyufu/blog/1844573" target="_blank" rel="noopener">Spring Cloud Gateway运行时动态配置网关</a>，了解了基本动态配置的方式。万分感谢。但是写的不是很详细。也看到评论有不能复现的。</p>
<h3 id="sc-gateway-支持动态配置么？"><a href="#sc-gateway-支持动态配置么？" class="headerlink" title="sc-gateway 支持动态配置么？"></a>sc-gateway 支持动态配置么？</h3><p>查看上面的blog，可以知道是支持的，也支持RESTful方式，内部写好了相应的类，就是现今文档不是很详细。源码的javadoc也写的很模糊。<code>GatewayControllerEndpoint</code>类中，只是很简单的写了个注释。</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/spring/gateway-original-method.jpg" alt=""></p>
<p>因为这种方式依赖于健康检查，先在<code>pom.xml</code>里面添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再在application.yml中添加，以打开配置访问</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure>

<p>默认打开了<code>consul</code>的<code>json</code>配置</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/spring/gateway-actuator.jpg" alt=""></p>
<h3 id="重新实现动态配置"><a href="#重新实现动态配置" class="headerlink" title="重新实现动态配置"></a>重新实现动态配置</h3><p>以后肯定是要关闭健康检查中的配置节点的，所以要重新覆写一个api了。</p>
<p>实现<code>ApplicationEventPublisherAware</code>，创建一个刷新<code>Route</code>的发布事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.event.RefreshRoutesEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisherAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过实现ApplicationEventPublisherAware来发布路由刷新事件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Gsealy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-10-17 14:07:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayRoutesRefresher</span> <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.publisher = applicationEventPublisher;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refreshRoutes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    publisher.publishEvent(<span class="keyword">new</span> RefreshRoutesEvent(<span class="keyword">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再创建一个用来配置路由信息的<code>RouteLocator</code>，其中有两种配置方式，第一种是通过<code>RouteLocator.Builder</code>的Build+lambda表达式，但是只能给出默认的配置，针对多种的filter不好给出参数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> RefreshRouteLocator <span class="title">addRoute</span><span class="params">(@NotNull <span class="keyword">final</span> String id, @NotNull <span class="keyword">final</span> String path, @NotNull <span class="keyword">final</span> URI uri)</span></span></span><br></pre></td></tr></table></figure>

<p>另一种是通过<code>RouteDefinition</code>，通过自建对象（手动滑稽）的方式，添加各种的配置。但是其中的<code>Key</code>是<strong>大小写敏感</strong>的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> RefreshRouteLocator <span class="title">addRoute</span><span class="params">(@NotNull RouteDefinition definition)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.Route;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteDefinitionWriter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteLocator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Flux;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态加载路由配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Gsealy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-10-17 14:07:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefreshRouteLocator</span> <span class="keyword">implements</span> <span class="title">RouteLocator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> RouteLocatorBuilder builder;</span><br><span class="line">  <span class="keyword">private</span> RouteLocatorBuilder.Builder routesBuilder;</span><br><span class="line">  <span class="keyword">private</span> Flux&lt;Route&gt; route;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  GatewayRoutesRefresher gatewayRoutesRefresher;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> RouteDefinitionWriter routeDefinitionWriter;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">RefreshRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.builder = builder;</span><br><span class="line">    clearRoutes();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearRoutes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    routesBuilder = builder.routes();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 使用RouteLocatorBuilder.Builder创建新的路由规则（ps.仅支持添加最基础的转发规则）</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> id 路由id</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> path 路由path</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> uri 指向地址</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> RefreshRouteLocator</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@NotNull</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RefreshRouteLocator <span class="title">addRoute</span><span class="params">(@NotNull <span class="keyword">final</span> String id, @NotNull <span class="keyword">final</span> String path,</span></span></span><br><span class="line"><span class="function"><span class="params">      @NotNull <span class="keyword">final</span> URI uri)</span> <span class="keyword">throws</span> URISyntaxException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(uri.getScheme())) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> URISyntaxException(<span class="string">"Missing scheme in URI: &#123;&#125;"</span>, uri.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    routesBuilder.route(id, fn -&gt; fn</span><br><span class="line">        .path(path + <span class="string">"/**"</span>)</span><br><span class="line">        .uri(uri)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 使用RouteDefinition添加路由节点，可自己配置相关属性</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> definition 属性定义</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> RefreshRouteLocator</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@NotNull</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> RefreshRouteLocator <span class="title">addRoute</span><span class="params">(@NotNull RouteDefinition definition)</span> </span>&#123;</span><br><span class="line">    routeDefinitionWriter.save(Mono.just(definition)).subscribe();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 配置完成后，调用本方法构建路由和刷新路由表</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildRoutes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (routesBuilder != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.route = routesBuilder.build().getRoutes();</span><br><span class="line">    &#125;</span><br><span class="line">    gatewayRoutesRefresher.refreshRoutes();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> 路由信息</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Flux&lt;Route&gt; <span class="title">getRoutes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> route;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，直接在Controller里面添加路由信息即可，演示一下第二种方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.handler.predicate.PredicateDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.gateway.route.RouteDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.util.UriComponentsBuilder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouteController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> RefreshRouteLocator refreshableRoutesLocator;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Map&lt;String <span class="comment">/*Tag*/</span>, String <span class="comment">/*Path*/</span>&gt; routes = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ResponseBody</span></span><br><span class="line">  <span class="meta">@PostMapping</span>(<span class="string">"/testbaidu"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">baidu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RouteDefinition definition = <span class="keyword">new</span> RouteDefinition();        <span class="comment">// &lt;1&gt;</span></span><br><span class="line">    PredicateDefinition predicate = <span class="keyword">new</span> PredicateDefinition(); <span class="comment">// &lt;2&gt;</span></span><br><span class="line">    Map&lt;String, String&gt; predicateParams = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    definition.setId(<span class="string">"baiduRoute"</span>);</span><br><span class="line">    predicate.setName(<span class="string">"Path"</span>);</span><br><span class="line">    predicateParams.put(<span class="string">"pattern"</span>, <span class="string">"/baidu"</span>);</span><br><span class="line">    predicateParams.put(<span class="string">"pathPattern"</span>, <span class="string">"/baidu"</span>);</span><br><span class="line">    predicate.setArgs(predicateParams);</span><br><span class="line">    definition.setPredicates(Arrays.asList(predicate));</span><br><span class="line">    URI uri = UriComponentsBuilder.fromHttpUrl(<span class="string">"https://www.baidu.com"</span>).build().toUri();</span><br><span class="line">    definition.setUri(uri);</span><br><span class="line">    refreshableRoutesLocator.addRoute(definition);            <span class="comment">// &lt;3&gt;</span></span><br><span class="line">    log.info(<span class="string">"添加的代理路径: tag &#123;&#125; -&gt; &#123;&#125;"</span>, <span class="string">"/baidu"</span>, uri);</span><br><span class="line">    refreshableRoutesLocator.buildRoutes();                   <span class="comment">// &lt;4&gt;</span></span><br><span class="line">    log.info(<span class="string">"创建完成"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码中的&lt;1&gt;和&lt;2&gt;，就是<code>RouteDefinition</code>，<code>PredicateDefinition</code>两种定义对象</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http post http://127.0.0.1:12305/testbaidu</span><br></pre></td></tr></table></figure>

<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/spring/gateway-httpie-1.jpg" alt=""></p>
<p>可以拉取一下配置文件看看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http get http://127.0.0.1:12305/actuator/gateway/routes/</span><br></pre></td></tr></table></figure>

<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/spring/gateway-httpie-2.jpg" alt=""></p>
<p>这样就初步完成配置</p>
<h3 id="怎么启动后没有静态配置的Route信息了？"><a href="#怎么启动后没有静态配置的Route信息了？" class="headerlink" title="怎么启动后没有静态配置的Route信息了？"></a>怎么启动后没有静态配置的Route信息了？</h3><p>在抓取配置信息的时候，出现了500错误，出现了<code>The mapper returned a null Publisher</code>的error信息。明明在<code>application.yml</code>或者代码中配置了route信息。只有在添加新的路由信息后，才能刷新出路由表。</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/spring/gateway-httpie-3.jpg" alt=""></p>
<p>这样需要在Spring boot启动的时候，自动去刷新一下路由表，为了方便后期在添加启动执行项，创建一个<code>startup</code>类，在里面调用一下<code>buildRoutes</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动后自刷新路由</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Gsealy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-10-18 10:01:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayStartup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> RefreshRouteLocator refreshRouteLocator;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> GatewayStartup <span class="title">createApplicationStartup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> GatewayStartup();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    refreshRouteLocator.buildRoutes();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在启动类中添加<code>startup</code>方法，配置相应的注解，从而Spring Boot启动后执行<code>startup</code>方法。启动后就会自动刷新路由信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Gsealy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> GatewayStartup gatewayStartup;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@EventListener</span>(ApplicationReadyEvent<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">void</span> <span class="title">startup</span>() </span>&#123;</span><br><span class="line">    gatewayStartup.start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(GatewayApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，基本配置完成，可以再在上面搭建前端展示页面。</p>
<p>（Ps. 要是配置的静态资源啥的访问不了，也是路由表的问题，刷新后就好了）</p>
<blockquote>
<h4 id="引用："><a href="#引用：" class="headerlink" title="引用："></a>引用：</h4><p><a href="https://my.oschina.net/tongyufu/blog/1844573" target="_blank" rel="noopener">Spring Cloud Gateway运行时动态配置网关</a></p>
<p><a href="https://stackoverflow.com/a/51499046/9137803" target="_blank" rel="noopener">Persisting Spring Cloud Gateway Routes in Database</a> 🔚</p>
</blockquote>
<hr>
]]></content>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Gateway</tag>
        <tag>Dynamic Route</tag>
      </tags>
  </entry>
  <entry>
    <title>PXC双机部署和单机下线重启并网运行方法</title>
    <url>/posts/d3399d08/</url>
    <content><![CDATA[<blockquote>
<p>因为PhxSQL使用的时候，会出一些问题。所有机器都停掉再启动的时候，我就没有一步搞好过。文档也就是官方WIki里面的&lt;成员管理&gt;可以参考一下，基本就是重新部署了。</p>
</blockquote>
<p>所以，又捡起了以前不知道什么原因放弃的PXC。部署起来也比较简单，一些不支持的东西也不太用的到。</p>
<blockquote>
<p>Note：</p>
<p>默认会用到下面的端口，生产环境记得配置相应的防火墙规则</p>
<ul>
<li>3306    <strong>数据库对外服务的端口号</strong></li>
<li>4444       <strong>请求SST SST: 指数据一个镜象传输 xtrabackup , rsync ,mysqldump</strong></li>
<li>4567       <strong>组成员之间进行沟通的一个端口号</strong></li>
<li>4568       <strong>传输IST用的。相对于SST来说的一个增量</strong></li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">一些名词介绍：</span><br><span class="line">WS：write <span class="keyword">set</span> 写数据集</span><br><span class="line">IST: Incremental State Transfer 增量同步</span><br><span class="line">SST：State Snapshot Transfer 全量同步</span><br></pre></td></tr></table></figure>

<p><strong>其他原理介绍可看：</strong></p>
<p><a href="https://cloud.tencent.com/developer/article/1026107" target="_blank" rel="noopener">MySQL高可用方案－PXC环境部署记录</a></p>
<hr>
<h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><p>测试环境下，首先还是先把selinux和防火墙关掉，卸载系统中自带的MariaDB。</p>
<p>最方便的安装方式当然是<code>yum</code>了，自动安装依赖。先安装库：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install http://www.percona.com/downloads/percona-release/redhat/0.1-6/percona-release-0.1-6.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>再安装PXC就行了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install Percona-XtraDB-Cluster-57 -y</span><br></pre></td></tr></table></figure>

<p>启动MySQL</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service mysql start</span><br></pre></td></tr></table></figure>

<p>因为5.7首次启动的密码叒改了，从<code>error.log</code>中抓初始密码即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo grep 'temporary password' /var/log/mysqld.log</span><br></pre></td></tr></table></figure>

<p>以<code>root</code>用户登录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>修改<code>root</code>账户密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ALTER USER 'root'@'localhost' IDENTIFIED BY 'rootPass';</span><br></pre></td></tr></table></figure>

<p>关掉MySQL服务，长时间无响应的话，kill掉相关pid就行了(ps. 其实service stop 也是直接 kill)。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service mysql stop</span><br></pre></td></tr></table></figure>

<p>修改<code>my.cnf</code>文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The Percona XtraDB Cluster 5.7 configuration file.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># * IMPORTANT: Additional settings that can override those from this file!</span></span><br><span class="line"><span class="comment">#   The files must end with '.cnf', otherwise they'll be ignored.</span></span><br><span class="line"><span class="comment">#   Please make any edits and changes to the appropriate sectional files</span></span><br><span class="line"><span class="comment">#   included below.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">!includedir /etc/my.cnf.d/</span></span><br><span class="line"><span class="comment">!includedir /etc/percona-xtradb-cluster.conf.d/</span></span><br><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">datadir</span>=<span class="string">/var/lib/mysql</span></span><br><span class="line"><span class="attr">user</span>=<span class="string">mysql</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Path to Galera library</span></span><br><span class="line"><span class="attr">wsrep_provider</span>=<span class="string">/usr/lib64/libgalera_smm.so</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Cluster connection URL contains the IPs of node#1, node#2 and node#3</span></span><br><span class="line"><span class="attr">wsrep_cluster_address</span>=<span class="string">gcomm://192.168.85.147,192.168.85.148</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># In order for Galera to work correctly binlog format should be ROW</span></span><br><span class="line"><span class="attr">binlog_format</span>=<span class="string">ROW</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># MyISAM storage engine has only experimental support</span></span><br><span class="line"><span class="attr">default_storage_engine</span>=<span class="string">InnoDB</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># This changes how InnoDB autoincrement locks are managed and is a requirement for Galera</span></span><br><span class="line"><span class="attr">innodb_autoinc_lock_mode</span>=<span class="string">2</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Node #1 address</span></span><br><span class="line"><span class="attr">wsrep_node_address</span>=<span class="string">192.168.85.147</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># node name</span></span><br><span class="line"><span class="attr">wsrep_node_name</span>=<span class="string">pxc1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SST method</span></span><br><span class="line"><span class="attr">wsrep_sst_method</span>=<span class="string">xtrabackup-v2</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Cluster name</span></span><br><span class="line"><span class="attr">wsrep_cluster_name</span>=<span class="string">my_centos_cluster</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># Authentication for SST method</span></span><br><span class="line"><span class="attr">wsrep_sst_auth</span>=<span class="string">"sstuser:s3cret"</span></span><br></pre></td></tr></table></figure>

<p>不同节点主要修改<code>wsrep_node_address</code>和<code>wsrep_node_name</code>即可。</p>
<h3 id="二、启动"><a href="#二、启动" class="headerlink" title="二、启动"></a>二、启动</h3><p>我这里为了懒省事，直接完全克隆这个配置好的虚拟机。当做第二台PXC节点。</p>
<p>就修改里面的<code>my.cnf</code>即可。</p>
<p><strong>1、在<code>node#1</code>上使用命令启动PXC</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start mysql@bootstrap.service</span><br></pre></td></tr></table></figure>

<p>进入<code>mysql</code>，添加同步所使用的账户密码，刷新权限。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql@pxc1&gt;</span><span class="bash"> CREATE USER <span class="string">'sstuser'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'s3cret'</span>;</span></span><br><span class="line"><span class="meta">mysql@pxc1&gt;</span><span class="bash"> GRANT RELOAD, LOCK TABLES, PROCESS, REPLICATION CLIENT ON *.* TO</span></span><br><span class="line">  'sstuser'@'localhost';</span><br><span class="line"><span class="meta">mysql@pxc1&gt;</span><span class="bash"> FLUSH PRIVILEGES;</span></span><br></pre></td></tr></table></figure>

<p><font color=red><strong>其中的账户密码，要和<code>my.cnf</code>中<code>wsrep_sst_auth</code>项所填的一样</strong></font></p>
<p><strong>在<code>node#2</code>上</strong></p>
<p>2、直接启动mysql服务，<font color=red><strong>不可使用<code>mysql@bootstrap.service</code>启动</strong></font></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysql start</span><br></pre></td></tr></table></figure>

<p>进入MySQL查看相应的参数 (仅展示需要查看的项)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql@pxc2&gt;</span><span class="bash"> show status like <span class="string">'wsrep%'</span>;</span></span><br><span class="line">+----------------------------+--------------------------------------+</span><br><span class="line">| Variable_name              | Value                                |</span><br><span class="line">+----------------------------+--------------------------------------+</span><br><span class="line">| wsrep_local_state_uuid     | c2883338-834d-11e2-0800-03c9c68e41ec |</span><br><span class="line">| ...                        | ...                                  |</span><br><span class="line">| wsrep_local_state          | 4                                    |</span><br><span class="line">| wsrep_local_state_comment  | Synced                               |</span><br><span class="line">| ...                        | ...                                  |</span><br><span class="line">| wsrep_cluster_size         | 2                                    |</span><br><span class="line">| wsrep_cluster_status       | Primary                              |</span><br><span class="line">| wsrep_connected            | ON                                   |</span><br><span class="line">| ...                        | ...                                  |</span><br><span class="line">| wsrep_ready                | ON                                   |</span><br><span class="line">+----------------------------+--------------------------------------+</span><br><span class="line">40 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>看以上几项是否相同。集群大小是<code>2</code>，状态是<code>Primary</code>，本地是<code>Synced</code>状态。</p>
<p>这样两个node的PXC集群就搭建好了。</p>
<hr>
<h3 id="三、下线重启"><a href="#三、下线重启" class="headerlink" title="三、下线重启"></a>三、下线重启</h3><p>当两台机子中有一台以及被迫下线的时候，可以简便的把修复好的节点并网继续运行。也不用使用<code>mysqldump</code>导入缺失的数据，直接启动服务就可以。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysql start</span><br></pre></td></tr></table></figure>

<p>直接当子节点重启服气，因为在内部已经把剩余的一个node当做<code>mysql@bootstrap.service</code>服务在运行了。</p>
<p>查看两个node的状态，同时查看数据同步情况，在数据量不大的情况下，应该能够自动增量同步，依托于<code>percona</code>自家的<code>xtrabackup</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql@pxc1&gt;</span><span class="bash"> show status like <span class="string">'wsrep%'</span>;</span></span><br><span class="line">+----------------------------+--------------------------------------+</span><br><span class="line">| Variable_name              | Value                                |</span><br><span class="line">+----------------------------+--------------------------------------+</span><br><span class="line">| wsrep_local_state_uuid     | c2883338-834d-11e2-0800-03c9c68e41ec |</span><br><span class="line">| ...                        | ...                                  |</span><br><span class="line">| wsrep_local_state          | 4                                    |</span><br><span class="line">| wsrep_local_state_comment  | Synced                               |</span><br><span class="line">| ...                        | ...                                  |</span><br><span class="line">| wsrep_cluster_size         | 2                                    |</span><br><span class="line">| wsrep_cluster_status       | Primary                              |</span><br><span class="line">| wsrep_connected            | ON                                   |</span><br><span class="line">| ...                        | ...                                  |</span><br><span class="line">| wsrep_ready                | ON                                   |</span><br><span class="line">+----------------------------+--------------------------------------+</span><br><span class="line">40 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>结束。🔚</p>
<hr>
]]></content>
      <tags>
        <tag>PXC</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot程序连接CAT服务</title>
    <url>/posts/6170f7da/</url>
    <content><![CDATA[<p>CAT服务端部署完并启动之后，一步一步的将我们的Spring Boot应用连接上CAT。</p>
<p>demo 地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Gsealy/CATClientDemo.git</span><br></pre></td></tr></table></figure>

<h3 id="一、构建Spring-Boot应用"><a href="#一、构建Spring-Boot应用" class="headerlink" title="一、构建Spring Boot应用"></a>一、构建Spring Boot应用</h3><p><strong>方法一</strong>：从<a href="https://start.spring.io/" target="_blank" rel="noopener">start.spring.io</a>快速构建完整项目，仅需添加<code>web</code>依赖。<br><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/spring/start-spring.jpg" alt=""></p>
<p><strong>方法二</strong>：直接在IDE（idea或者STS）中创建Spring Boot应用即可。</p>
<p>先给出项目内文件结构：</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/spring/spring-tree-map.jpg" alt=""></p>
<p>在<code>WebApplication</code>类中创建Controller，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(WebApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 监控访问id</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/index/&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"id is : "</span> + id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"id: "</span> + id;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样直接运行就是一个跑在8080端口上的web服务了。</p>
<p>在<code>pom.xml</code>中添加<code>cat-client</code>依赖，为了做单元测试，同时也添加一下junit依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dianping.cat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cat-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="二、添加配置文件"><a href="#二、添加配置文件" class="headerlink" title="二、添加配置文件"></a>二、添加配置文件</h3><p>在<code>resources</code>目录下，新建<code>META-INF</code>文件夹</p>
<p>在<code>META-INF</code>中新建<code>app.properties</code>配置文件并添加应用名称，从而让CAT服务端能正常接收应用名称</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">app.name</span>=<span class="string">webserver</span></span><br></pre></td></tr></table></figure>

<h3 id="三、添加埋点方案"><a href="#三、添加埋点方案" class="headerlink" title="三、添加埋点方案"></a>三、添加埋点方案</h3><p>从cat目录下框架埋点方案集成的文件夹中找到springboot的埋点方案，放进项目中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatFilterConfigure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> FilterRegistrationBean&lt;CatFilter&gt; <span class="title">catFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FilterRegistrationBean&lt;CatFilter&gt; registration = <span class="keyword">new</span> FilterRegistrationBean&lt;&gt;();</span><br><span class="line">    CatFilter filter = <span class="keyword">new</span> CatFilter();</span><br><span class="line">    registration.setFilter(filter);</span><br><span class="line">    registration.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">    registration.setName(<span class="string">"cat-filter"</span>);</span><br><span class="line">    registration.setOrder(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> registration;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="四、修改Controller"><a href="#四、修改Controller" class="headerlink" title="四、修改Controller"></a>四、修改Controller</h3><p>修改之前的<code>index</code>方法，添加Transaction和Event。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/index/&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(@PathVariable <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    Transaction t = Cat</span><br><span class="line">        .getProducer().newTransaction(<span class="string">"URL"</span>, <span class="string">"Get.id"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Cat.getProducer().newEvent(<span class="string">"URL.Get"</span>, <span class="string">"id"</span>).setStatus(Message.SUCCESS);</span><br><span class="line">      t.addData(<span class="string">"id is:"</span> + id);</span><br><span class="line">      <span class="comment">// 你的业务代码</span></span><br><span class="line">      System.out.println(<span class="string">"id is : "</span> + id);</span><br><span class="line"></span><br><span class="line">      t.setStatus(Transaction.SUCCESS);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      t.setStatus(e);</span><br><span class="line">      <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      t.complete();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"id: "</span> + id;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="五、运行测试"><a href="#五、运行测试" class="headerlink" title="五、运行测试"></a>五、运行测试</h3><p>可以直接跑demo中的单元测试，也可以直接启动web服务，然后自测。</p>
<p>可以在CAT服务端看到当前的应用已经连上了</p>
<p><img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/spring/cat-with-spring.jpg" alt=""></p>
<p>在Transaction和Event中也都能看到相应的log。</p>
<p>结束！🔚</p>
<hr>
]]></content>
      <tags>
        <tag>Spring Cloud</tag>
        <tag>Spring Boot</tag>
        <tag>CAT</tag>
      </tags>
  </entry>
  <entry>
    <title>编译部署监控CAT2.0</title>
    <url>/posts/d4222fd6/</url>
    <content><![CDATA[<p>最近还是在研究微服务，看到了链路追踪这部分。发现点评开源的CAT比较完成，可以直接集成使用。所以就先盯上了CAT。</p>
<h3 id="一、编译"><a href="#一、编译" class="headerlink" title="一、编译"></a>一、编译</h3><p>因为我的测试用服务器是不联网的，所以先在本地编译好war包。</p>
<p>1、git克隆cat项目到本地</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/dianping/cat.git</span><br></pre></td></tr></table></figure>

<p>2、直接编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn clean install</span><br></pre></td></tr></table></figure>

<p>这样，在<code>cat-home/target/</code>下就有一个<code>cat-2.0.0.war</code>(or <code>cat-alpha-2.0.0.war</code>)</p>
<h3 id="二、部署"><a href="#二、部署" class="headerlink" title="二、部署"></a>二、部署</h3><p>从官网下载<a href="http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.34/bin/apache-tomcat-8.5.34.tar.gz" target="_blank" rel="noopener">tomcat</a>和<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">jdk1.8</a>，删除自带的其他版本java，保证war包能够运行就可以了。</p>
<p>解压缩<code>tomcat</code>，路径自选，进入<code>bin</code>目录，按照官网给出的修改<code>catalina.sh</code>文件(<code>ps.</code>刚发现他们在升级3.0.0版，readme给改了0.0，那下个2.0.0的release版吧)</p>
<p>在<code># OS specific support.  $var _must_ be set to either true or false.</code>后一行添加<code>CATALINA_OPTS</code>参数<img src="https://gsealy-1257917518.cos.ap-beijing.myqcloud.com/gsealy.github.io/cat/cat-catalina.jpg" alt=""></p>
<p><strong><em>ps.</em> 建议cat的使用堆大小至少10G以上，开发环境启动2G堆启动即可</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">CATALINA_OPTS="$CATALINA_OPTS -server -Djava.awt.headless=true -Xms25G -Xmx25G -XX:PermSize=256m -XX:MaxPermSize=256m -XX:NewSize=10144m -XX:MaxNewSize=10144m -XX:SurvivorRatio=10 -XX:+UseParNewGC -XX:ParallelGCThreads=4 -XX:MaxTenuringThreshold=13 -XX:+UseConcMarkSweepGC -XX:+DisableExplicitGC -XX:+UseCMSInitiatingOccupancyOnly -XX:+ScavengeBeforeFullGC -XX:+UseCMSCompactAtFullCollection -XX:+CMSParallelRemarkEnabled -XX:CMSFullGCsBeforeCompaction=9 -XX:CMSInitiatingOccupancyFraction=60 -XX:+CMSClassUnloadingEnabled -XX:SoftRefLRUPolicyMSPerMB=0 -XX:-ReduceInitialCardMarks -XX:+CMSPermGenSweepingEnabled -XX:CMSInitiatingPermOccupancyFraction=70 -XX:+ExplicitGCInvokesConcurrent -Djava.nio.channels.spi.SelectorProvider=sun.nio.ch.EPollSelectorProvider -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.util.logging.config.file="%CATALINA_HOME%\conf\logging.properties" -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCApplicationConcurrentTime -XX:+PrintHeapAtGC -Xloggc:/data/applogs/heap_trace.txt -XX:-HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/data/applogs/HeapDumpOnOutOfMemoryError -Djava.util.Arrays.useLegacyMergeSort=true"</span><br></pre></td></tr></table></figure>

<p>修改<code>server.xml</code>文件，添加<code>UTF-8</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">URIEncoding</span>=<span class="string">"utf-8"</span>    <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span>  增加  URIEncoding="utf-8"</span><br></pre></td></tr></table></figure>

<p>把在本地编译好的<code>cat-*-2.0.0.war</code>改名为<code>cat.war</code>放进webapps目录下</p>
<h5 id="1、在根目录下创建具有读写权限的目录"><a href="#1、在根目录下创建具有读写权限的目录" class="headerlink" title="1、在根目录下创建具有读写权限的目录"></a>1、在根目录下创建具有读写权限的目录</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /data</span><br><span class="line">chmod 777 /data/ -R</span><br></pre></td></tr></table></figure>

<h5 id="2、编写配置文件（单机）"><a href="#2、编写配置文件（单机）" class="headerlink" title="2、编写配置文件（单机）"></a>2、编写配置文件（单机）</h5><p>配置文件创建在<code>/data/appdatas/cat/</code>内</p>
<p><strong>client.xml</strong> (配置受监控的客户端)</p>
<p>配置监控的服务器本机和客户端IP，监控客户端<code>2280</code>端口</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">config</span> <span class="attr">mode</span>=<span class="string">"client"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- server本机 IP--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">server</span> <span class="attr">ip</span>=<span class="string">"10.20.88.222"</span> <span class="attr">port</span>=<span class="string">"2280"</span> <span class="attr">http-port</span>=<span class="string">"8080"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 远程client IP--&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">server</span> <span class="attr">ip</span>=<span class="string">"10.20.61.19"</span> <span class="attr">port</span>=<span class="string">"2280"</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>server.xml</strong>（配置服务端）</p>
<p>因为是单机配置，所以<code>job-machine</code>和<code>alert-machine</code>都在本机开启。关闭hdfs存储。其余参数参考官方README.md</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">config</span> <span class="attr">local-mode</span>=<span class="string">"false"</span> <span class="attr">hdfs-machine</span>=<span class="string">"false"</span> <span class="attr">job-machine</span>=<span class="string">"true"</span> <span class="attr">alert-machine</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">storage</span>  <span class="attr">local-base-dir</span>=<span class="string">"/data/appdatas/cat/bucket/"</span> <span class="attr">max-hdfs-storage-time</span>=<span class="string">"15"</span> <span class="attr">local-report-storage-time</span>=<span class="string">"7"</span> <span class="attr">local-logivew-storage-time</span>=<span class="string">"7"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;hdfs id="logview" max-size="128M" server-uri="hdfs:///user/cat" base-dir="logview"/&gt;</span></span><br><span class="line"><span class="comment">                &lt;hdfs id="dump" max-size="128M" server-uri="hdfs://10.1.77.86/user/cat" base-dir="dump"/&gt;</span></span><br><span class="line"><span class="comment">                &lt;hdfs id="remote" max-size="128M" server-uri="hdfs://10.1.77.86/user/cat" base-dir="remote"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">storage</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">default-domain</span>=<span class="string">"Cat"</span> <span class="attr">show-cat-domain</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">remote-servers</span>&gt;</span>10.20.88.222:8080<span class="tag">&lt;/<span class="name">remote-servers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>datasources.xml</strong>（配置数据源）</p>
<p>修改里面的URI和账户密码即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">data-sources</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">data-source</span> <span class="attr">id</span>=<span class="string">"cat"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">maximum-pool-size</span>&gt;</span>3<span class="tag">&lt;/<span class="name">maximum-pool-size</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">connection-timeout</span>&gt;</span>1s<span class="tag">&lt;/<span class="name">connection-timeout</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">idle-timeout</span>&gt;</span>10m<span class="tag">&lt;/<span class="name">idle-timeout</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">statement-cache-size</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">statement-cache-size</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">driver</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">driver</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">				&lt;![CDATA[jdbc:mysql://127.0.0.1:3306/cat]]&gt;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">user</span>&gt;</span>root<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">password</span>&gt;</span>root<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">connectionProperties</span>&gt;</span></span><br><span class="line">				&lt;![CDATA[useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;socketTimeout=120000]]&gt;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">connectionProperties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">data-source</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">data-source</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">maximum-pool-size</span>&gt;</span>3<span class="tag">&lt;/<span class="name">maximum-pool-size</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">connection-timeout</span>&gt;</span>1s<span class="tag">&lt;/<span class="name">connection-timeout</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">idle-timeout</span>&gt;</span>10m<span class="tag">&lt;/<span class="name">idle-timeout</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">statement-cache-size</span>&gt;</span>1000<span class="tag">&lt;/<span class="name">statement-cache-size</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">driver</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">driver</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">				&lt;![CDATA[jdbc:mysql://10.20.88.222:3306/cat]]&gt;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">user</span>&gt;</span>root<span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">password</span>&gt;</span>root<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">connectionProperties</span>&gt;</span></span><br><span class="line">				&lt;![CDATA[useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;socketTimeout=120000]]&gt;</span><br><span class="line">			<span class="tag">&lt;/<span class="name">connectionProperties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">data-source</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">data-sources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3、建库建表"><a href="#3、建库建表" class="headerlink" title="3、建库建表"></a>3、建库建表</h5><p>手动安装<code>mysql</code>，MySQL的一个系统参数：max_allowed_packet，其默认值为1048576(1M)，修改为1000M，,修改<code>my.cnf</code>，添加如下一行。修改完需要重启MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">max_allowed_packet=1000M</span><br></pre></td></tr></table></figure>

<p>然后，执行项目下<code>script/Cat.sql</code>即可</p>
<h3 id="三、启动"><a href="#三、启动" class="headerlink" title="三、启动"></a>三、启动</h3><p>定位到<code>tomcat/bin</code>目录下，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./catalina.sh run</span><br></pre></td></tr></table></figure>

<p>打开：<a href="http://ip:8080/cat/s/config?op=routerConfigUpdate" target="_blank" rel="noopener">http://ip:8080/cat/s/config?op=routerConfigUpdate</a> </p>
<p>修改<code>default-server</code>为本机ip，重启tomcat即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-config</span> <span class="attr">backup-server</span>=<span class="string">"10.20.88.222"</span> <span class="attr">backup-server-port</span>=<span class="string">"2280"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">default-server</span> <span class="attr">id</span>=<span class="string">"10.20.88.222"</span> <span class="attr">weight</span>=<span class="string">"1.0"</span> <span class="attr">port</span>=<span class="string">"2280"</span> <span class="attr">enable</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>至此，服务端配置完成。🔚</p>
<hr>
]]></content>
      <tags>
        <tag>CAT</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>[转]&#39;GLIBC_2.14&#39; not found解决办法</title>
    <url>/posts/6c4e7b5a/</url>
    <content><![CDATA[<p>最近在CentOS6上部署Kong 0.14时，遇到了这个问题。所以找到解决办法以后记录一下。</p>
<h3 id="一、下载、编译、安装"><a href="#一、下载、编译、安装" class="headerlink" title="一、下载、编译、安装"></a>一、下载、编译、安装</h3><p>下载<a href="http://ftp.gnu.org/gnu/glibc/glibc-2.14.tar.gz" target="_blank" rel="noopener">glibc-2.14.tar.gz</a>或者[百度云](<a href="https://pan.baidu.com/s/1xYOrZtl46t_48flWUBTozA" target="_blank" rel="noopener">https://pan.baidu.com/s/1xYOrZtl46t_48flWUBTozA</a> 提取码: ksv6)</p>
<p>编译并安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># tar zxvf glibc-2.14.tar.gz -C /home/software/</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cd /home/software/glibc-2.14</span></span><br><span class="line">[root@localhost glibc-2.14]<span class="comment"># mkdir /opt/build</span></span><br><span class="line">[root@localhost glibc-2.14]<span class="comment"># cd build</span></span><br><span class="line">[root@localhost build]<span class="comment"># ../configure --prefix=/opt/glibc-2.14</span></span><br><span class="line">[root@localhost build]<span class="comment"># make -j4</span></span><br><span class="line">[root@localhost build]<span class="comment"># make install</span></span><br></pre></td></tr></table></figure>

<p>==编译安装时间稍长，需要耐心等待==</p>
<h3 id="二、中间遇到的坑"><a href="#二、中间遇到的坑" class="headerlink" title="二、中间遇到的坑"></a>二、中间遇到的坑</h3><p>1、在make过程中出现如下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/install: <span class="string">'include/limits.h'</span> and <span class="string">'/opt/glibc-2.14/include/limits.h'</span> are the same file</span><br></pre></td></tr></table></figure>

<p>原因就是楼主解压的glic-2.14.tar.gz源码和编译时定义的目录../configure –prefix=/home/software/glibc-2.14放到了一起。</p>
<p>所以解决方法就是：只要将编译定义目录和源码目录区分开就ok了。</p>
<p>2、最后就是设置环境变量，因为glibc库使用广泛，为了避免污染当前系统环境，在使用时候定义一下环境变量。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># export LD_LIBRARY_PATH=/opt/glibc-2.14/lib:$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>

<p>将库的位置临时定位在/opt/glibc-2.14/lib位置。</p>
<p>此时再执行相关程序即可顺利运行。</p>
<blockquote>
<p>转载自：<a href="https://blog.csdn.net/clirus/article/details/62425498" target="_blank" rel="noopener">https://blog.csdn.net/clirus/article/details/62425498</a></p>
</blockquote>
<p>结束！🔚</p>
<hr>
]]></content>
      <tags>
        <tag>Kong</tag>
        <tag>CentOS</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>BC添加HMAC-SM3算法支持</title>
    <url>/posts/fbc1d256/</url>
    <content><![CDATA[<blockquote>
<p><strong>注：</strong></p>
<ol>
<li>仅适用没有java JCE证书的情况，最好还是申请一张签名证书。申请地址：<a href="https://www.oracle.com/technetwork/java/javase/tech/getcodesigningcertificate-361306.html" target="_blank" rel="noopener">获取JCE签名证书</a></li>
<li>请提前了解BouncyCastle轻量级加密套件</li>
<li>请提前了解HMAC</li>
<li>了解<a href="http://blog.csdn.net/xyang81/article/details/7292380" target="_blank" rel="noopener">ClassLoader原理</a></li>
</ol>
</blockquote>
<hr>
<h3 id="一、有JCE签名证书的情况"><a href="#一、有JCE签名证书的情况" class="headerlink" title="一、有JCE签名证书的情况"></a>一、有JCE签名证书的情况</h3><p>直接修改<code>SM3.java</code>文件，添加几个方法即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * SM3 HashMac</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMac</span> <span class="keyword">extends</span> <span class="title">BaseMac</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HashMac</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>(<span class="keyword">new</span> HMac(<span class="keyword">new</span> SM3Digest()));</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyGenerator</span> <span class="keyword">extends</span> <span class="title">BaseKeyGenerator</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">KeyGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">super</span>(<span class="string">"HMACSM3"</span>, <span class="number">256</span>, <span class="keyword">new</span> CipherKeyGenerator());</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Mappings</span> <span class="keyword">extends</span> <span class="title">DigestAlgorithmProvider</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREFIX = SM3<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Mappings</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ConfigurableProvider provider)</span> </span>&#123;</span><br><span class="line">     addHMACAlgorithm(provider, <span class="string">"SM3"</span>, PREFIX + <span class="string">"$HashMac"</span>, PREFIX + <span class="string">"$KeyGenerator"</span>);</span><br><span class="line">     addHMACAlias(provider, <span class="string">"SM3"</span>, GMObjectIdentifiers.hmac_sm3);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>至此，从新打包BC，签名即可使用。</p>
<h3 id="二、无JCE签名证书，外部挂载"><a href="#二、无JCE签名证书，外部挂载" class="headerlink" title="二、无JCE签名证书，外部挂载"></a>二、无JCE签名证书，外部挂载</h3><ol>
<li><p>新建一个项目，导入bcprov的jar包</p>
</li>
<li><p>新建<code>SM3</code>和<code>DigestAlgorithmProvider</code>类 </p>
</li>
<li><p>将BC中的相同类源码复制到新建类中，主要是<code>DigestAlgorithmProvider</code>类不是<code>public</code>的，所以需要重写一下。</p>
</li>
<li><p>编写测试类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.Security;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Mac;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.jce.provider.BouncyCastleProvider;</span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.util.encoders.Hex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HmacTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">byte</span>[] keyBytes = Hex.decode(<span class="string">"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b"</span>);</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">byte</span>[] message = Hex.decode(<span class="string">"4869205468657265"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    BouncyCastleProvider bcp = <span class="keyword">new</span> BouncyCastleProvider();</span><br><span class="line">    Security.addProvider(bcp);</span><br><span class="line">    <span class="keyword">new</span> SM3.Mappings().configure(bcp);</span><br><span class="line">    <span class="keyword">for</span> (String s : Security.getAlgorithms(<span class="string">"Mac"</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (s.contains(<span class="string">"HMACSM3"</span>)) &#123;</span><br><span class="line">        System.out.println(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    HmacTest hmactest = <span class="keyword">new</span> HmacTest();</span><br><span class="line">    hmactest.testHMac(<span class="string">"HMAC-SM3"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHMac</span><span class="params">(String hmacName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    SecretKey key = <span class="keyword">new</span> SecretKeySpec(keyBytes, hmacName);</span><br><span class="line">    <span class="keyword">byte</span>[] out,out1;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// SM3 </span></span><br><span class="line">    MessageDigest sm3 = MessageDigest.getInstance(<span class="string">"SM3"</span>, <span class="string">"BC"</span>);</span><br><span class="line">    out1 = sm3.digest(message);</span><br><span class="line">    System.out.println(Hex.toHexString(out1));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// HMAC-SM3 </span></span><br><span class="line">    Mac mac = Mac.getInstance(hmacName, <span class="string">"BC"</span>);</span><br><span class="line">    mac.init(key);</span><br><span class="line">    mac.reset();</span><br><span class="line">    mac.update(message, <span class="number">0</span>, message.length);</span><br><span class="line">    out = mac.doFinal();</span><br><span class="line">    System.out.println(Hex.toHexString(out));</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<h3 id="其中遇到的问题："><a href="#其中遇到的问题：" class="headerlink" title="其中遇到的问题："></a>其中遇到的问题：</h3><ol>
<li><p>需要了解JCE的调用过程和BC实现的相关方法</p>
</li>
<li><p><code>DigestAlgorithmProvider</code>抽象类中的方法都是<code>protected</code>方法，需要在外部重写。</p>
</li>
<li><p>bcprov.jar不能放到java/jre/ext中，因为会loadSM3$Hmac.class，不然会报如下Exception。所以jar要和class使用相同的classloader。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread "main" java.security.NoSuchAlgorithmException: class configured for Mac (provider: BC) cannot be found.</span><br><span class="line">at java.security.Provider$Service.getImplClass(Provider.java:<span class="number">1649</span>)</span><br><span class="line">at java.security.Provider$Service.newInstance(Provider.java:<span class="number">1592</span>)</span><br><span class="line">at sun.security.jca.GetInstance.getInstance(GetInstance.java:<span class="number">236</span>)</span><br><span class="line">at javax.crypto.JceSecurity.getInstance(JceSecurity.java:<span class="number">103</span>)</span><br><span class="line">at javax.crypto.Mac.getInstance(Mac.java:<span class="number">222</span>)</span><br><span class="line">at cn.com.infosec.HmacSM3.HmacTest.testHMac(HmacTest.java:<span class="number">37</span>)</span><br><span class="line">at cn.com.infosec.HmacSM3.HmacTest.main(HmacTest.java:<span class="number">30</span>)</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: com.gsealy.HmacSM3.SM3X$HashMac</span><br><span class="line">at java.net.URLClassLoader.findClass(URLClassLoader.java:<span class="number">381</span>)</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">424</span>)</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">357</span>)</span><br><span class="line">at java.security.Provider$Service.getImplClass(Provider.java:<span class="number">1636</span>)</span><br><span class="line">... <span class="number">6</span> more</span><br></pre></td></tr></table></figure>

<p>结束！🔚</p>
</li>
</ol>
<hr>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>BC</tag>
        <tag>JCE</tag>
      </tags>
  </entry>
  <entry>
    <title>基于BouncyCastle，PKCS12添加CrlBag支持</title>
    <url>/posts/f01dc177/</url>
    <content><![CDATA[<blockquote>
<p>BouncyCastle的KeyStore（PKCS12KeyStorespi）默认支持KeyBag、PKCS8ShroudedKeyBag、CertBag。现阶段还没有任何一个p12生成工具支持添加CrlBag的。</p>
</blockquote>
<h3 id="添加crlBag支持"><a href="#添加crlBag支持" class="headerlink" title="添加crlBag支持"></a>添加crlBag支持</h3><p>直接对<code>PKCS12KeyStoreSpi.java</code>进行修改：</p>
<p>首先是<code>engineLoad</code>方法，直接在certbag的判断后添加对crlbag的判断：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (b.getBagId().equals(crlBag)) &#123;</span><br><span class="line">                            org.bouncycastle.asn1.pkcs.CRLBag crlB =</span><br><span class="line">                                    org.bouncycastle.asn1.pkcs.CRLBag.getInstance(b.getBagValue());</span><br><span class="line">                            <span class="comment">// TODO set the attributes on the key</span></span><br><span class="line">                            X509CRL crlx509 = <span class="keyword">null</span>;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                InputStream crlIn = <span class="keyword">new</span> ByteArrayInputStream(</span><br><span class="line">                                        ((ASN1OctetString) crlB.getCrlValue()).getOctets());</span><br><span class="line">                                crlx509 = (X509CRL) certFact.generateCRL(crlIn);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">                                <span class="keyword">new</span> Exception(e.toString());</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">//</span></span><br><span class="line">                            <span class="comment">// set the attributes</span></span><br><span class="line">                            <span class="comment">//</span></span><br><span class="line">                            ASN1OctetString localId = <span class="keyword">null</span>;</span><br><span class="line">                            String alias = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (b.getBagAttributes() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                Enumeration e = b.getBagAttributes().getObjects();</span><br><span class="line">                                <span class="keyword">while</span> (e.hasMoreElements()) &#123;</span><br><span class="line">                                    ASN1Sequence sq = (ASN1Sequence) e.nextElement();</span><br><span class="line">                                    ASN1ObjectIdentifier aOid =</span><br><span class="line">                                            (ASN1ObjectIdentifier) sq.getObjectAt(<span class="number">0</span>);</span><br><span class="line">                                    ASN1Set attrSet = (ASN1Set) sq.getObjectAt(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">if</span> (attrSet.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                                        ASN1Primitive attr = (ASN1Primitive) attrSet.getObjectAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                                        <span class="keyword">if</span> (crlx509 <span class="keyword">instanceof</span> PKCS12BagAttributeCarrier) &#123;</span><br><span class="line">                                            PKCS12BagAttributeCarrier bagAttr =</span><br><span class="line">                                                    (PKCS12BagAttributeCarrier) crlx509;</span><br><span class="line">                                            ASN1Encodable existing = bagAttr.getBagAttribute(aOid);</span><br><span class="line">                                            <span class="keyword">if</span> (existing != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                                <span class="comment">// OK, but the value has to be the same</span></span><br><span class="line">                                                <span class="keyword">if</span> (!existing.toASN1Primitive().equals(attr)) &#123;</span><br><span class="line">                                                    <span class="keyword">throw</span> <span class="keyword">new</span> IOException(</span><br><span class="line">                                                            <span class="string">"attempt to add existing attribute with different value"</span>);</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                bagAttr.setBagAttribute(aOid, attr);</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        <span class="keyword">if</span> (aOid.equals(pkcs_9_at_friendlyName)) &#123;</span><br><span class="line">                                            alias = ((DERBMPString) attr).getString();</span><br><span class="line">                                            crls.put(alias, crlx509);</span><br><span class="line">                                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aOid.equals(pkcs_9_at_localKeyId)) &#123;</span><br><span class="line">                                            localId = (ASN1OctetString) attr;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span> (localId != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                String name = <span class="keyword">new</span> String(Hex.encode(localId.getOctets()));</span><br><span class="line"></span><br><span class="line">                                <span class="keyword">if</span> (alias == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    crls.put(name, crlx509);</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    localIds.put(alias, name);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                unmarkedCrl = <span class="keyword">true</span>;</span><br><span class="line">                                crls.put(<span class="string">"unmarked"</span>, crlx509);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure>

<p>在<code>engineLoad</code>中，还需要对<code>unmarkedCrl</code>判断，虽说P9扩展是可添加也可不添加，但是对pfx处理的时候，还是需要<code>localId</code>作为Key存储在<code>HashTable</code>中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (unmarkedKey) &#123;</span><br><span class="line">　　<span class="keyword">if</span> (keyCerts.isEmpty()) &#123;</span><br><span class="line">        String name = <span class="keyword">new</span> String(Hex.encode(createSubjectKeyId(cert.getPublicKey()).getKeyIdentifier()));</span><br><span class="line">        keyCerts.put(name, cert);</span><br><span class="line">        keys.put(name, keys.remove(<span class="string">"unmarked"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (unmarkedCrl) &#123;</span><br><span class="line">         String name = <span class="keyword">new</span> String(Hex.encode(createSubjectKeyId(cert.getPublicKey()).getKeyIdentifier()));</span><br><span class="line">         crls.put(name, crls.remove(<span class="string">"unmarked"</span>));</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>在外部生成pfx时，我们读取一个crl文件，直接转换为X509CRL文件格式存储在Pfx文件中，然后通过<code>engineLoad</code>方法解析pfx中包含的所有内容。解析后，存储在<code>HashTable</code>和<code>IgnoresCaseHashtable</code>中。以备<code>doStore</code>方法使用。</p>
<p>在<code>doStore</code>中，处理CRL：  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// handle the crl</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">ASN1EncodableVector crlSeq = <span class="keyword">new</span> ASN1EncodableVector();</span><br><span class="line">Enumeration crlbs = crls.keys();</span><br><span class="line"><span class="keyword">while</span> (crlbs.hasMoreElements()) &#123;</span><br><span class="line">	<span class="keyword">byte</span>[] crlSalt = <span class="keyword">new</span> <span class="keyword">byte</span>[SALT_SIZE];</span><br><span class="line">	random.nextBytes(crlSalt);</span><br><span class="line">	String name = (String) crlbs.nextElement();</span><br><span class="line">	X509CRL x509crl = (X509CRL) crls.get(name);</span><br><span class="line">	PKCS12PBEParams crlParams = <span class="keyword">new</span> PKCS12PBEParams(crlSalt, MIN_ITERATIONS);</span><br><span class="line">	AlgorithmIdentifier crlAlgId =</span><br><span class="line">	                    <span class="keyword">new</span> AlgorithmIdentifier(keyAlgorithm, crlParams.toASN1Primitive());</span><br><span class="line">	org.bouncycastle.asn1.pkcs.CRLBag crlbagInfo = <span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		crlbagInfo = <span class="keyword">new</span> org.bouncycastle.asn1.pkcs.CRLBag(crlBag,</span><br><span class="line">		                        <span class="keyword">new</span> DEROctetString(x509crl.getEncoded()));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (CRLException e) &#123;</span><br><span class="line">		<span class="keyword">new</span> CRLException(e.toString());</span><br><span class="line">	&#125;</span><br><span class="line">	Boolean crlattrSet = <span class="keyword">false</span>;</span><br><span class="line">	ASN1EncodableVector crlName = <span class="keyword">new</span> ASN1EncodableVector();</span><br><span class="line">	<span class="keyword">if</span> (x509crl <span class="keyword">instanceof</span> PKCS12BagAttributeCarrier) &#123;</span><br><span class="line">		PKCS12BagAttributeCarrier bagAttrs = (PKCS12BagAttributeCarrier) x509crl;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		<span class="comment">// make sure we are using the local alias on store</span></span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		DERBMPString nm = (DERBMPString) bagAttrs.getBagAttribute(pkcs_9_at_friendlyName);</span><br><span class="line">		<span class="keyword">if</span> (nm == <span class="keyword">null</span> || !nm.getString().equals(name)) &#123;</span><br><span class="line">			bagAttrs.setBagAttribute(pkcs_9_at_friendlyName, <span class="keyword">new</span> DERBMPString(name));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		<span class="comment">// make sure we have a local key-id</span></span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		<span class="keyword">if</span> (bagAttrs.getBagAttribute(pkcs_9_at_localKeyId) == <span class="keyword">null</span>) &#123;</span><br><span class="line">			Certificate ct = engineGetCertificate(name);</span><br><span class="line">			bagAttrs.setBagAttribute(pkcs_9_at_localKeyId,</span><br><span class="line">			                            createSubjectKeyId(ct.getPublicKey()));</span><br><span class="line">		&#125;</span><br><span class="line">		Enumeration e = bagAttrs.getBagAttributeKeys();</span><br><span class="line">		<span class="keyword">while</span> (e.hasMoreElements()) &#123;</span><br><span class="line">			ASN1ObjectIdentifier oid = (ASN1ObjectIdentifier) e.nextElement();</span><br><span class="line">			ASN1EncodableVector crlS = <span class="keyword">new</span> ASN1EncodableVector();</span><br><span class="line">			crlS.add(oid);</span><br><span class="line">			crlS.add(<span class="keyword">new</span> DERSet(bagAttrs.getBagAttribute(oid)));</span><br><span class="line">			crlName.add(<span class="keyword">new</span> DERSequence(crlS));</span><br><span class="line">			crlattrSet = <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!crlattrSet) &#123;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		<span class="comment">// set a default friendly name (from the key id) and local id</span></span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		ASN1EncodableVector crlS = <span class="keyword">new</span> ASN1EncodableVector();</span><br><span class="line">		Certificate ct = engineGetCertificate(name);</span><br><span class="line">		crlS.add(pkcs_9_at_localKeyId);</span><br><span class="line">		crlS.add(<span class="keyword">new</span> DERSet(createSubjectKeyId(ct.getPublicKey())));</span><br><span class="line">		crlName.add(<span class="keyword">new</span> DERSequence(crlS));</span><br><span class="line">		crlS = <span class="keyword">new</span> ASN1EncodableVector();</span><br><span class="line">		crlS.add(pkcs_9_at_friendlyName);</span><br><span class="line">		crlS.add(<span class="keyword">new</span> DERSet(<span class="keyword">new</span> DERBMPString(name)));</span><br><span class="line">		crlName.add(<span class="keyword">new</span> DERSequence(crlS));</span><br><span class="line">	&#125;</span><br><span class="line">	SafeBag crlsBag =</span><br><span class="line">	                    <span class="keyword">new</span> SafeBag(crlBag, crlbagInfo.toASN1Primitive(), <span class="keyword">new</span> DERSet(crlName));</span><br><span class="line">	crlSeq.add(crlsBag);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">byte</span>[] CrlEncoded = <span class="keyword">new</span> DERSequence(crlSeq).getEncoded(ASN1Encoding.DER);</span><br><span class="line">BEROctetString CrlString = <span class="keyword">new</span> BEROctetString(CrlEncoded);</span><br></pre></td></tr></table></figure>

<p>至此，CRL基本处理完成，添加到<code>ContentInfo</code>中即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// safebag 按顺序放入contentinfo</span></span><br><span class="line"><span class="comment">// keyBag | pkcs8ShroudedKeyBag | certBag | crlBag | secretBag | safeContentsBag</span></span><br><span class="line">ContentInfo[] info = <span class="keyword">new</span> ContentInfo[] &#123;<span class="keyword">new</span> ContentInfo(data, keyString), </span><br><span class="line">　　　　　　　　　　　　　　　　　　　　　　　　<span class="keyword">new</span> ContentInfo(encryptedData, cInfo.toASN1Primitive()),</span><br><span class="line">　　　　　　　　　　　　　　　　　　　　　　　　<span class="keyword">new</span> ContentInfo(data, CrlString)&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="测试Pfx"><a href="#测试Pfx" class="headerlink" title="测试Pfx"></a>测试Pfx</h3><p>编写测试类，输出一个pfx：</p>
<p>测试类太大了，放到Gist上地址：<a href="https://gist.github.com/Gsealy/30704c7c098f3f8620a065cb61fd68bb" target="_blank" rel="noopener">PKCS12.java</a></p>
<p>使用<code>openssl</code>查看pfx文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">OpenSSL&gt; pkcs12 -<span class="keyword">in</span> D:\test.pfx -info</span><br><span class="line">Enter Import Password:</span><br><span class="line">MAC:sha1 Iteration 1024</span><br><span class="line">PKCS7 Data</span><br><span class="line">Shrouded Keybag: pbeWithSHA1And3-KeyTripleDES-CBC, Iteration 51200</span><br><span class="line">Bag Attributes</span><br><span class="line">    localKeyID: F3 32 9A 1E EC 9C A8 E7 87 E2 73 28 74 AC E5 A7 8A 19 C2 A4</span><br><span class="line">    friendlyName: f3329a1eec9ca8e787e2732874ace5a78a19c2a4</span><br><span class="line">Key Attributes: &lt;No Attributes&gt;</span><br><span class="line">Enter PEM pass phrase:</span><br><span class="line">Verifying - Enter PEM pass phrase:</span><br><span class="line">-----BEGIN ENCRYPTED PRIVATE KEY-----</span><br><span class="line">MIIC1DBOBgkqhkiG9w0BBQ0wQTApBgkqhkiG9w0BBQwwHAQIXykO/vFWOcMCAggA</span><br><span class="line">MAwGCCqGSIb3DQIJBQAwFAYIKoZIhvcNAwcECMtSfWOttU3iBIICgBd5cr9SQN9l</span><br><span class="line">jdxNRqgqeb+Q8seSo2sDQVbhIggc/kUQgDuXgR71kNxnlqU/qtZul/DWZbCZTgGX</span><br><span class="line">2V/vRO9bd3Y4/YNuxWBDRqxsD3rWWq0YNrkKyh0pApW/R5t1/AeQgADCSOzN5FLz</span><br><span class="line">fOLN76ZbDpxtQVitt09wu1I1F8ui7QicS3kwiCV6TQZHyoere7dv1QYt5mGmZnj9</span><br><span class="line">luPRB6TcXMVKRnGYZki4AVx9Yc7XudC9pd5QPSlD4wJj3gap1mreOqvryxbU4dcl</span><br><span class="line">YLh+itTgeB4DIRzhj3liooJic+iNuICyULPpr3Tqj9JKbQFkICxZpQGhZ8L/AuXu</span><br><span class="line">aBC1jNdSLaMb+7PtCCXcH667A2zyUuD+/LLwqnvpfHFrYeelyFOY5nKC4UgsueHP</span><br><span class="line">t+MHldLYeJh/EzqoulbdTNTz90MocOgPgc6TBkfwlaiWOiLfLkFjkDjF1P64RxM9</span><br><span class="line">PX1KoQDrsgIA2bEa28ZG0qUx/I6ENz9Nn/9IOV0uyWxct/WCEpdDIUSBJHbVHvX4</span><br><span class="line">Nm+3rfOdK3av4vJTqGzaqRAGZQ7iAoHfOGhlnq6T1Q/Xs6SjCnLM7nARh0o0JE3q</span><br><span class="line">B7HDs2miXVzjZvYaT5or5tIsYm3WpLybx1gLtw4Bi98srnLQwuAQiQcwWL65+OT/</span><br><span class="line">F9fBr3rQOzgQ8fauo/s6YWX/qwMuGPeK4KpZ7/F36rUGVzd5SiehZ0LIUJo+t6te</span><br><span class="line">iHT6q3JD+lADojXD5+Dvf5zGM35nnf+VjwnriBveVppenCm/nshwxo/gHWoBIRFL</span><br><span class="line">Q/VI3//vkl5mrfHyrt8fBCsp1mgkR3E9dL9lFKt3vw615bJm7olgWKvLjXHqyrPD</span><br><span class="line">gD1mYgrCH+E=</span><br><span class="line">-----END ENCRYPTED PRIVATE KEY-----</span><br><span class="line">PKCS7 Encrypted data: pbeWithSHA1And40BitRC2-CBC, Iteration 51200</span><br><span class="line">Certificate bag</span><br><span class="line">Bag Attributes</span><br><span class="line">    localKeyID: F3 32 9A 1E EC 9C A8 E7 87 E2 73 28 74 AC E5 A7 8A 19 C2 A4</span><br><span class="line">    friendlyName: f3329a1eec9ca8e787e2732874ace5a78a19c2a4</span><br><span class="line">subject=/C=AU/O=The Legion of the Bouncy Castle/L=Melbourne/CN=Eric H. Echidna/emailAddress=feedback-crypto@bouncycastle.org</span><br><span class="line">issuer=/C=AU/O=The Legion of the Bouncy Castle/OU=Bouncy Intermediate Certificate/emailAddress=feedback-crypto@bouncycastle.org</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIC4jCCAkugAwIBAgIBAzANBgkqhkiG9w0BAQUFADCBkjELMAkGA1UEBhMCQVUx</span><br><span class="line">KDAmBgNVBAoMH1RoZSBMZWdpb24gb2YgdGhlIEJvdW5jeSBDYXN0bGUxKDAmBgNV</span><br><span class="line">BAsMH0JvdW5jeSBJbnRlcm1lZGlhdGUgQ2VydGlmaWNhdGUxLzAtBgkqhkiG9w0B</span><br><span class="line">CQEWIGZlZWRiYWNrLWNyeXB0b0Bib3VuY3ljYXN0bGUub3JnMB4XDTE3MTIzMDAy</span><br><span class="line">MDU0NFoXDTE4MDIyODAyMDU0NFowgZYxCzAJBgNVBAYTAkFVMSgwJgYDVQQKDB9U</span><br><span class="line">aGUgTGVnaW9uIG9mIHRoZSBCb3VuY3kgQ2FzdGxlMRIwEAYDVQQHDAlNZWxib3Vy</span><br><span class="line">bmUxGDAWBgNVBAMMD0VyaWMgSC4gRWNoaWRuYTEvMC0GCSqGSIb3DQEJARYgZmVl</span><br><span class="line">ZGJhY2stY3J5cHRvQGJvdW5jeWNhc3RsZS5vcmcwgZ8wDQYJKoZIhvcNAQEBBQAD</span><br><span class="line">gY0AMIGJAoGBAIxalHTxlstm+f3wwL7R9LmTKqz3VGQsMxQU0uLybDMBgeWdpatm</span><br><span class="line">yvHud+0oOzrfwaGzcduRUx7+0B1cnzMCvM3snVxUcGJmH/gcF5+pBXOPIbBlfyKY</span><br><span class="line">gwnUx/B4QyOxZKkoZ93yf/fhlldWNkWwjfN3YqSGGpPie8nWCSPX0iPNAgMBAAGj</span><br><span class="line">QjBAMB0GA1UdDgQWBBTzMpoe7Jyo54ficyh0rOWnihnCpDAfBgNVHSMEGDAWgBTz</span><br><span class="line">Mpoe7Jyo54ficyh0rOWnihnCpDANBgkqhkiG9w0BAQUFAAOBgQBImpjBAY5P7ol0</span><br><span class="line">Dfnu4jTgaedgpss5oC9zsi4RC8NOan040o1WVNif2924TMaSv5B5oyiZWUGJLt1r</span><br><span class="line">JLCfYtZX3dAwWpIFnKPSXPcezcTorUWTD78f7+Qs6aax5arN6inxC8LzEWOzeyRw</span><br><span class="line">MpOmsgTMhDJjltNNAnF6jOe6rxDALg==</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">Certificate bag</span><br><span class="line">Bag Attributes</span><br><span class="line">    friendlyName: Bouncy Primary Certificate</span><br><span class="line">subject=/C=AU/O=The Legion of the Bouncy Castle/OU=Bouncy Primary Certificate</span><br><span class="line">issuer=/C=AU/O=The Legion of the Bouncy Castle/OU=Bouncy Primary Certificate</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIICLDCCAZWgAwIBAgIBATANBgkqhkiG9w0BAQUFADBcMQswCQYDVQQGEwJBVTEo</span><br><span class="line">MCYGA1UECgwfVGhlIExlZ2lvbiBvZiB0aGUgQm91bmN5IENhc3RsZTEjMCEGA1UE</span><br><span class="line">CwwaQm91bmN5IFByaW1hcnkgQ2VydGlmaWNhdGUwHhcNMTcxMjMwMDIwNTQ0WhcN</span><br><span class="line">MTgwMjI4MDIwNTQ0WjBcMQswCQYDVQQGEwJBVTEoMCYGA1UECgwfVGhlIExlZ2lv</span><br><span class="line">biBvZiB0aGUgQm91bmN5IENhc3RsZTEjMCEGA1UECwwaQm91bmN5IFByaW1hcnkg</span><br><span class="line">Q2VydGlmaWNhdGUwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKZeos3VmEH5</span><br><span class="line">ArZnt5y5XwvHmdUPg0WNxSAe33xwipx33ge1tT9MYyDkXOvmywk234D9uAyblkY/</span><br><span class="line">HvMAapNrGbVk6C5NRCpFjwW1YWa92DMWi9RDetMnDw1cv+WkaQqLbeaaeEhoZ2OB</span><br><span class="line">HrvzKJhiB8d02c6T3KO6araImqMBD9d5AgMBAAEwDQYJKoZIhvcNAQEFBQADgYEA</span><br><span class="line">axNdt0JvRmdw67VvoioAiY8c0iTy0/Ic2cINDhBeMlyX6eiseCpovDzcIZVS8C57</span><br><span class="line">o1eSjwuaBy5WwDQOvQbZ74pVO1setHo6tfRpmigwc1u6gaDxxKL50PyZ22PS550u</span><br><span class="line">46f3rw+XjhGfoQwileXMPJ8hJHqMZQuHjsAy4+eJS3c=</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">Certificate bag</span><br><span class="line">Bag Attributes</span><br><span class="line">    friendlyName: Bouncy Intermediate Certificate</span><br><span class="line">subject=/C=AU/O=The Legion of the Bouncy Castle/OU=Bouncy Intermediate Certificate/emailAddress=feedback-crypto@bouncycastle.org</span><br><span class="line">issuer=/C=AU/O=The Legion of the Bouncy Castle/OU=Bouncy Primary Certificate</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIIDIzCCAoygAwIBAgIBAjANBgkqhkiG9w0BAQUFADBcMQswCQYDVQQGEwJBVTEo</span><br><span class="line">MCYGA1UECgwfVGhlIExlZ2lvbiBvZiB0aGUgQm91bmN5IENhc3RsZTEjMCEGA1UE</span><br><span class="line">CwwaQm91bmN5IFByaW1hcnkgQ2VydGlmaWNhdGUwHhcNMTcxMjMwMDIwNTQ0WhcN</span><br><span class="line">MTgwMjI4MDIwNTQ0WjCBkjELMAkGA1UEBhMCQVUxKDAmBgNVBAoMH1RoZSBMZWdp</span><br><span class="line">b24gb2YgdGhlIEJvdW5jeSBDYXN0bGUxKDAmBgNVBAsMH0JvdW5jeSBJbnRlcm1l</span><br><span class="line">ZGlhdGUgQ2VydGlmaWNhdGUxLzAtBgkqhkiG9w0BCQEWIGZlZWRiYWNrLWNyeXB0</span><br><span class="line">b0Bib3VuY3ljYXN0bGUub3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCM</span><br><span class="line">WpR08ZbLZvn98MC+0fS5kyqs91RkLDMUFNLi8mwzAYHlnaWrZsrx7nftKDs638Gh</span><br><span class="line">s3HbkVMe/tAdXJ8zArzN7J1cVHBiZh/4HBefqQVzjyGwZX8imIMJ1MfweEMjsWSp</span><br><span class="line">KGfd8n/34ZZXVjZFsI3zd2KkhhqT4nvJ1gkj19IjzQIDAQABo4G9MIG6MB0GA1Ud</span><br><span class="line">DgQWBBTzMpoe7Jyo54ficyh0rOWnihnCpDCBhAYDVR0jBH0we4AULrvQaIUwE+yo</span><br><span class="line">EpZVQuovt3Dj2mGhYKReMFwxCzAJBgNVBAYTAkFVMSgwJgYDVQQKDB9UaGUgTGVn</span><br><span class="line">aW9uIG9mIHRoZSBCb3VuY3kgQ2FzdGxlMSMwIQYDVQQLDBpCb3VuY3kgUHJpbWFy</span><br><span class="line">eSBDZXJ0aWZpY2F0ZYIBATASBgNVHRMBAf8ECDAGAQH/AgEAMA0GCSqGSIb3DQEB</span><br><span class="line">BQUAA4GBADkgMlIUOSub1ypi8RlKfBl54SennqwOSfDu63W0cbkLF2uCOxRTTLQo</span><br><span class="line">gCoTwMOUrO/9xWEnY78iS1KXO8+yhZuTFKRjzO4DXUOLgSVQdfoxi9rZtZIfjCaT</span><br><span class="line">wHLSzOEYWO3lOAov61uZDzijrzJdQidocbAxdMHdSR5jSJ2M1xtn</span><br><span class="line">-----END CERTIFICATE-----</span><br><span class="line">PKCS7 Data</span><br><span class="line">Warning unsupported bag <span class="built_in">type</span>: crlBag</span><br></pre></td></tr></table></figure>

<p>OPENSSL现阶段是无法读取crlBag的，现阶段可能实际场景应用极少。加就加上了。🔚</p>
<hr>
]]></content>
      <tags>
        <tag>BC</tag>
        <tag>PKCS12</tag>
      </tags>
  </entry>
</search>
